<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>posts on kian orr</title><link>https://kianorr.com/posts/</link><description>Recent content in posts on kian orr</description><image><url>https://kianorr.com/47</url><link>https://kianorr.com/47</link></image><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 20 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://kianorr.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>code and graphic design</title><link>https://kianorr.com/posts/code-graphics/</link><pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate><guid>https://kianorr.com/posts/code-graphics/</guid><description>I wanted to look into the intersection between graphic design and code. I found a program called Processing, where you can code in Java, C++ or Python. After trying a few simple things, this animation seemed to be pretty cool:
There should have been a video here but your browser does not seem to support it. The code for it is below. There are two functions that automatically run, setup() (runs once like __init__) and draw() (continuously runs).</description></item><item><title> my experience at APS DPP 2022</title><link>https://kianorr.com/posts/aps-experience/</link><pubDate>Sat, 26 Nov 2022 00:00:00 +0000</pubDate><guid>https://kianorr.com/posts/aps-experience/</guid><description>This event took place between Oct 16th and Oct 21st in Washington and was the first APS conference I have attended. I ended up really liking the location. Spokane is a medium sized city, but had the energy of a small town, which I enjoyed quite a bit. They even had a good book shop :)
It was an amazing experience because it basically took every single subfield of plasma and formed it into a convention of great people displaying their work.</description></item><item><title>RK4 in different languages</title><link>https://kianorr.com/posts/rkspeeds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kianorr.com/posts/rkspeeds/</guid><description>I wanted look more into Julia because it sounded like python but faster and better. So, I compared Julia to Python, and also threw C++ in there (do I regret that? Maybe). Below is a summary of the speed tests.
Julia C ++ Python 22.555 ± 34.788 μs 14.162 μs 2420 ± 197 μs Julia is actually quite close to C++, which isn&amp;rsquo;t too surprising, but it&amp;rsquo;s nice to see. Now everyone just needs to actually use Julia so there&amp;rsquo;s support behind it :p</description></item></channel></rss>