<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Game Boy on SLC is</title><link>https://slc.is/tags/game-boy/</link><description>Recent content in Game Boy on SLC is</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 23 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://slc.is/tags/game-boy/index.xml" rel="self" type="application/rss+xml"/><item><title>Deep Cleaning a Game Boy Color</title><link>https://slc.is/archive/deep-cleaning-a-game-boy-color/</link><pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate><guid>https://slc.is/archive/deep-cleaning-a-game-boy-color/</guid><description>&lt;img src="https://slc.is/images/gbc2.webp" alt="Featured image of post Deep Cleaning a Game Boy Color" />&lt;p>I&amp;rsquo;ve been using my old Game Boy Color a lot more now that I&amp;rsquo;m programming a GB game, so I wanted to clean up the handheld! This tutorial is the culmination of a few YouTube videos from &lt;a class="link" href="https://youtu.be/fZ__K0QotW8" target="_blank" rel="noopener"
>The Retro Future&lt;/a> and &lt;a class="link" href="https://youtu.be/2BmGMi0IEx4" target="_blank" rel="noopener"
>Odd Tinkering&lt;/a>. I liked a lot of their tips, so I decided to add them and my own to this post.&lt;/p>
&lt;p>&lt;img src="https://slc.is/images/gbc1.webp"
loading="lazy"
alt="GBC Before Cleaning"
>&lt;/p>
&lt;h2 id="tools">Tools:&lt;/h2>
&lt;ul>
&lt;li>Tri-Point Y1 Screwdriver&lt;/li>
&lt;li>Phillips Head Screwdriver&lt;/li>
&lt;li>Cotton Swab&lt;/li>
&lt;li>Tooth Brush&lt;/li>
&lt;li>99% Isopropyl Alcohol
&lt;ul>
&lt;li>The higher percentage, the faster the evaporation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Vinegar&lt;/li>
&lt;/ul>
&lt;h2 id="disassembly">Disassembly&lt;/h2>
&lt;ol>
&lt;li>Unscrew the 4 Tri-Wing screws on the back of the &lt;!-- raw HTML omitted -->GBC&lt;!-- raw HTML omitted -->
1.5. Unscrew 2 more screws under the batteries&lt;/li>
&lt;li>Remove the back plate&lt;/li>
&lt;li>Unscrew the 3 Phillips screws holding the motherboard&lt;/li>
&lt;li>Disconnect the screen&amp;rsquo;s ribbon cable from the top of the motherboard&lt;/li>
&lt;li>Lift the motherboard out of the casing&lt;/li>
&lt;li>Slide the &lt;!-- raw HTML omitted -->IR&lt;!-- raw HTML omitted --> cover and power switch slider out of the case&lt;/li>
&lt;li>Remove the buttons and membranes
&lt;ul>
&lt;li>&lt;!-- raw HTML omitted -->D&lt;!-- raw HTML omitted -->-pad&lt;/li>
&lt;li>A + B&lt;/li>
&lt;li>Start + Select&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Lift the screen out of the case
&lt;ul>
&lt;li>It comes loose by flexing the chassis back and forth&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>On the back plate, unscrew the 4 Phillips screws holding the cartridge slot&lt;/li>
&lt;li>Slide the metal battery contact out of the case&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://slc.is/images/gbc2.webp"
loading="lazy"
alt="Disassembled GBC"
>&lt;/p>
&lt;h2 id="cleaning">Cleaning&lt;/h2>
&lt;p>Motherboard:&lt;/p>
&lt;ol>
&lt;li>Dip the cotton swabs in isopropyl alcohol
&lt;ul>
&lt;li>If the board is really dirty, use the tooth brush to scrub with the alcohol&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Clean everything on the motherboard with the swabs
&lt;ul>
&lt;li>Focus on the metal connectors&lt;/li>
&lt;li>Thoroughly clean all button contacts&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Clean the surface of the speaker&lt;/li>
&lt;li>Dab alcohol around the volume dial and power switch
&lt;ul>
&lt;li>Actuate them to spread the alcohol inside&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Use alcohol to clean the headphone jack&lt;/li>
&lt;li>Swab the battery terminal with alcohol&lt;/li>
&lt;/ol>
&lt;p>Case:&lt;/p>
&lt;ol>
&lt;li>Prepare a hot soapy water to submerge the case&lt;/li>
&lt;li>Wash and brush the plastic in the water&lt;/li>
&lt;li>Clean the speaker holes&lt;/li>
&lt;li>Scrub the plastic screen protector&lt;/li>
&lt;/ol>
&lt;p>Buttons:&lt;/p>
&lt;ol>
&lt;li>Wash the buttons and their rubber membranes in the water
&lt;ul>
&lt;li>Use a toothbrush to clean&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Also clean the IR cover&lt;/li>
&lt;/ol>
&lt;p>Battery Contact:&lt;/p>
&lt;ol>
&lt;li>Let the metal battery contact sit in vinegar until it shines like new&lt;/li>
&lt;/ol>
&lt;h2 id="reassemble">Reassemble&lt;/h2>
&lt;ol>
&lt;li>Read the &lt;strong>Disassembly&lt;/strong> section backwards ðŸ˜‚&lt;/li>
&lt;li>Screw in a &lt;a class="link" href="https://www.boltscience.com/pages/tsequence.htm" target="_blank" rel="noopener"
>sequence&lt;/a> that evenly distributes the force&lt;/li>
&lt;/ol>
&lt;h2 id="enjoy">Enjoy&lt;/h2>
&lt;p>&lt;img src="https://slc.is/images/gbc3.webp"
loading="lazy"
alt="GBC After Cleaning"
>&lt;/p>
&lt;p>Now that the GBC is all cleaned up, it should last a few more decades!&lt;/p></description></item><item><title>Pirate's Folly</title><link>https://slc.is/archive/pirates-folly/</link><pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate><guid>https://slc.is/archive/pirates-folly/</guid><description>&lt;img src="https://slc.is/images/piratesFolly1.webp" alt="Featured image of post Pirate's Folly" />&lt;p>The Raspberry Pi Pico inspired the release of the &lt;a class="link" href="https://shop.pimoroni.com/products/picosystem" target="_blank" rel="noopener"
>Picosystem&lt;/a>. I love working with limited hardware as a challenge to improve my programming. I&amp;rsquo;ve had my fair share of &lt;a class="link" href="https://www.romhacking.net/forum/index.php?topic=31892.0" target="_blank" rel="noopener"
>6502 assembly&lt;/a> for the &lt;!-- raw HTML omitted -->NES&lt;!-- raw HTML omitted --> but recently enjoyed the new RP2040. The Picosystem uses the RP2040 to run games, so I just had to try it out!&lt;/p>
&lt;p>I began development of Pirate&amp;rsquo;s Folly, a procedurally generated game. I&amp;rsquo;ve laid the groundwork for terrain and item generation; however, enemy placement is still needed. &lt;em>In the &lt;a class="link" href="https://github.com/splch/pirates-folly" target="_blank" rel="noopener"
>GitHub repo&lt;/a>, I have a list of completed and planned features.&lt;/em> The idea is a blend between One Piece, Minecraft, and No Man&amp;rsquo;s Sky. Pirates competing for treasure is such an entertaining concept since pirates are the most unpredictable and greedy people! To lean on my CS (and not artistic) background, I used &lt;a class="link" href="http://freespace.virgin.net/hugo.elias/models/m_perlin.htm" target="_blank" rel="noopener"
>Hugo Elias&amp;rsquo;&lt;/a> procedural generation webpage for algorithm details. His site is down, so you can view a &lt;a class="link" href="https://slc.is/data/perlinNoise.pdf" >locally-served PDF&lt;/a>. That enabled me to generate over a thousand square kilometers of terrain to explore. So, like Minecraft there is a vast world to explore, but I have a global seed (57) that will show the same world to everyone. In that way, players can share good locations for items or pirates.&lt;/p>
&lt;p>&lt;img src="https://slc.is/images/piratesFolly2.webp"
loading="lazy"
alt="PicoSystem"
>&lt;/p>
&lt;p>I&amp;rsquo;ll keep this page updated as I proceed. Currently, I&amp;rsquo;m wondering if I want to develop the game for Game Boy with the upcoming release of the &lt;a class="link" href="https://www.analogue.co/pocket" target="_blank" rel="noopener"
>Analogue Pocket&lt;/a> and &lt;a class="link" href="https://www.gbstudio.dev/" target="_blank" rel="noopener"
>&lt;!-- raw HTML omitted -->GB&lt;!-- raw HTML omitted --> Studio 3.0&lt;/a>.&lt;/p>
&lt;h1 id="transition-to-game-boy">Transition to Game Boy&lt;/h1>
&lt;!-- raw HTML omitted -->
&lt;p>Sadly, the Picosystem &lt;!-- raw HTML omitted -->SDK&lt;!-- raw HTML omitted --> stopped getting &lt;a class="link" href="https://github.com/pimoroni/picosystem/commit/266c7d992b52f6b6af1c5c77f350bf010047ce0e" target="_blank" rel="noopener"
>updates&lt;/a> after the system release, so I decided to move the game to a more reliable console. Restraining the requirements further, I began using &lt;a class="link" href="https://github.com/gbdk-2020/gbdk-2020" target="_blank" rel="noopener"
>GBDK-2020&lt;/a> to make a GB game!&lt;/p>
&lt;p>I chose to use GBDK-2020 instead of GB Studio because I know how to program C and something like procedural-generation isn&amp;rsquo;t nearly as common as side-scrolling games. When GB Studio abstracts away a lot of the programming aspects, they lower the barrier of entry while compromising expressability.&lt;/p>
&lt;p>A lot of the code from the Picosystem could be reused for Game Boy; however, every 16-bit variable needed to be converted to 8-bit. In addition, float arithmetic isn&amp;rsquo;t supported in GBDK (or on the GB&amp;rsquo;s Z80 processor for that matter). These restrictions ultimately reduced the quality of map generation, but it should still be good enough for exploration.&lt;/p>
&lt;p>&lt;img src="https://slc.is/images/piratesFolly1.webp"
loading="lazy"
alt="Game Boy"
>&lt;/p>
&lt;h2 id="procedural-generation">Procedural Generation&lt;/h2>
&lt;p>After loads of trial and error, I found that the following formula works very well to provide fast and seeded noise.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">uint8_t&lt;/span> &lt;span class="nf">noise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">uint8_t&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">uint8_t&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// return random number [49, 201]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// derived from perlin noise and 8-bit xorshift
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">y&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">y&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">SEED&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The formula took inspiration from Hugo Elias&amp;rsquo; tutorial, but is closer to &lt;a class="link" href="https://bumbershootsoft.wordpress.com/2017/03/11/getting-a-decent-and-fast-prng-out-of-an-8-bit-chip/" target="_blank" rel="noopener"
>Michael Martin&amp;rsquo;s xorshift post&lt;/a>. The xorshifts I use differ from common xorshift algorithms in that the function doesn&amp;rsquo;t use its previous output as the next input. Here, &lt;code>noise&lt;/code> is a function of &lt;code>x&lt;/code>, &lt;code>y&lt;/code>, and &lt;code>SEED&lt;/code>.&lt;/p>
&lt;h2 id="profiling">Profiling&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Procedure&lt;/th>
&lt;th style="text-align:center">% Self Cycles&lt;/th>
&lt;th>Self Cycles&lt;/th>
&lt;th>Invocations&lt;/th>
&lt;th>Procedure Cycles&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>_interpolate_noise&lt;/td>
&lt;td style="text-align:center">40.7%&lt;/td>
&lt;td>100035660&lt;/td>
&lt;td>12786&lt;/td>
&lt;td>6036/8112/8111.8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_set_bkg_tiles.set_xy_btt&lt;/td>
&lt;td style="text-align:center">21.6%&lt;/td>
&lt;td>53069008&lt;/td>
&lt;td>6732&lt;/td>
&lt;td>4520/8328/7883.1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_shift_array_left&lt;/td>
&lt;td style="text-align:center">16.8%&lt;/td>
&lt;td>41287680&lt;/td>
&lt;td>6718&lt;/td>
&lt;td>122880/122880/122880.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_shift_array_up&lt;/td>
&lt;td style="text-align:center">9.3%&lt;/td>
&lt;td>22786176&lt;/td>
&lt;td>336&lt;/td>
&lt;td>67816/67816/67816.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_generate_side&lt;/td>
&lt;td style="text-align:center">3.8%&lt;/td>
&lt;td>9259312&lt;/td>
&lt;td>673&lt;/td>
&lt;td>167776/189308/180029.8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_terrain&lt;/td>
&lt;td style="text-align:center">2.0%&lt;/td>
&lt;td>4909548&lt;/td>
&lt;td>12786&lt;/td>
&lt;td>6188/8540/8539.8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_noise&lt;/td>
&lt;td style="text-align:center">1.5%&lt;/td>
&lt;td>3784584&lt;/td>
&lt;td>473073&lt;/td>
&lt;td>8/8/8.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_generate_item&lt;/td>
&lt;td style="text-align:center">1.1%&lt;/td>
&lt;td>2608344&lt;/td>
&lt;td>12786&lt;/td>
&lt;td>212/212/212.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;em>LABEL_1C6&lt;/em>&lt;/td>
&lt;td style="text-align:center">1.0%&lt;/td>
&lt;td>2394684&lt;/td>
&lt;td>3501&lt;/td>
&lt;td>684/684/684.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_display_map&lt;/td>
&lt;td style="text-align:center">0.6%&lt;/td>
&lt;td>1595432&lt;/td>
&lt;td>6732&lt;/td>
&lt;td>155176/158632/157505.6&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;em>LABEL_40&lt;/em>&lt;/td>
&lt;td style="text-align:center">0.4%&lt;/td>
&lt;td>1100820&lt;/td>
&lt;td>3501&lt;/td>
&lt;td>1100/1112/1100.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_set_bkg_tiles&lt;/td>
&lt;td style="text-align:center">0.4%&lt;/td>
&lt;td>1077088&lt;/td>
&lt;td>6732&lt;/td>
&lt;td>4680/8488/8043.1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_closest&lt;/td>
&lt;td style="text-align:center">0.2%&lt;/td>
&lt;td>562584&lt;/td>
&lt;td>12786&lt;/td>
&lt;td>44/44/44.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_update_position&lt;/td>
&lt;td style="text-align:center">0.1%&lt;/td>
&lt;td>298604&lt;/td>
&lt;td>2212735&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;em>LABEL_A4&lt;/em>&lt;/td>
&lt;td style="text-align:center">0.1%&lt;/td>
&lt;td>210060&lt;/td>
&lt;td>3501&lt;/td>
&lt;td>744/744/744.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_generate_map_sides&lt;/td>
&lt;td style="text-align:center">0.1%&lt;/td>
&lt;td>182872&lt;/td>
&lt;td>6719&lt;/td>
&lt;td>167864/551336/550198.1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;em>LABEL_0&lt;/em>.call_hl&lt;/td>
&lt;td style="text-align:center">0.1%&lt;/td>
&lt;td>126204&lt;/td>
&lt;td>3501&lt;/td>
&lt;td>780/792/780.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_get_terrain&lt;/td>
&lt;td style="text-align:center">0.0%&lt;/td>
&lt;td>117068&lt;/td>
&lt;td>1009&lt;/td>
&lt;td>68/140/116.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>00106$&lt;/td>
&lt;td style="text-align:center">0.0%&lt;/td>
&lt;td>110232&lt;/td>
&lt;td>2206353&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_check_interactions&lt;/td>
&lt;td style="text-align:center">0.0%&lt;/td>
&lt;td>75264&lt;/td>
&lt;td>336&lt;/td>
&lt;td>264/264/264.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_joypad&lt;/td>
&lt;td style="text-align:center">0.0%&lt;/td>
&lt;td>67200&lt;/td>
&lt;td>336&lt;/td>
&lt;td>200/200/200.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_adjust_position&lt;/td>
&lt;td style="text-align:center">0.0%&lt;/td>
&lt;td>36396&lt;/td>
&lt;td>337&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;em>LABEL_48&lt;/em>.int&lt;/td>
&lt;td style="text-align:center">0.0%&lt;/td>
&lt;td>19500&lt;/td>
&lt;td>75&lt;/td>
&lt;td>1040/1052/1040.2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_clock&lt;/td>
&lt;td style="text-align:center">0.0%&lt;/td>
&lt;td>13440&lt;/td>
&lt;td>336&lt;/td>
&lt;td>40/40/40.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_main&lt;/td>
&lt;td style="text-align:center">0.0%&lt;/td>
&lt;td>0&lt;/td>
&lt;td>12778&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_check_input&lt;/td>
&lt;td style="text-align:center">0.0%&lt;/td>
&lt;td>0&lt;/td>
&lt;td>12778&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item></channel></rss>