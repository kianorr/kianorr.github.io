<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Qiskit on SLC is</title><link>https://slc.is/tags/qiskit/</link><description>Recent content in Qiskit on SLC is</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 08 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://slc.is/tags/qiskit/index.xml" rel="self" type="application/rss+xml"/><item><title>Quantum versus Avalanche Breakdown Randomness</title><link>https://slc.is/archive/quantum-versus-avalanche-breakdown-randomness/</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate><guid>https://slc.is/archive/quantum-versus-avalanche-breakdown-randomness/</guid><description>&lt;img src="https://slc.is/images/onerng.webp" alt="Featured image of post Quantum versus Avalanche Breakdown Randomness" />&lt;p>Avalanche breakdown and quantum are two methods for generating true random numbers. Here, we&amp;rsquo;ll compare them for feasibility and quality. The feasibility of a &lt;!-- raw HTML omitted -->TRNG&lt;!-- raw HTML omitted --> is how many bits per second it can produce while remaining random. And that leads us into quality which will be determined according to the NIST&amp;rsquo;s &lt;a class="link" href="https://www.nist.gov/publications/statistical-test-suite-random-and-pseudorandom-number-generators-cryptographic" target="_blank" rel="noopener"
>&lt;!-- raw HTML omitted -->STS&lt;!-- raw HTML omitted -->&lt;/a>. We&amp;rsquo;ll also compare these methods against the computer&amp;rsquo;s default RNG as a baseline.&lt;/p>
&lt;p>I&amp;rsquo;m using the Arcetri Team&amp;rsquo;s &lt;a class="link" href="https://github.com/arcetri/sts" target="_blank" rel="noopener"
>implementation&lt;/a> of the STS. Building it just required running &lt;code>make&lt;/code> in the repo.&lt;/p>
&lt;p>We&amp;rsquo;ll read around 100 &lt;!-- raw HTML omitted -->MB&lt;!-- raw HTML omitted --> of random data to perform the tests on. STS defaults to measuring bitsreams of 1 megabit per iteration, so we&amp;rsquo;ll run 800 iterations (8 bits = 1 byte).&lt;/p>
&lt;p>A useful way to record the random numbers and the speed of their generation is with the &lt;a class="link" href="https://wikipedia.org/wiki/Dd_%28Unix%29" target="_blank" rel="noopener"
>&lt;code>dd&lt;/code>&lt;/a> command.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">~# dd &lt;span class="k">if&lt;/span>&lt;span class="o">=&lt;/span>/path/to/random &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">of&lt;/span>&lt;span class="o">=&lt;/span>/copy/of/random &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">bs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">104857600&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">iflag&lt;/span>&lt;span class="o">=&lt;/span>fullblock
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">104857600&lt;/span> bytes &lt;span class="o">(&lt;/span>&lt;span class="m">105&lt;/span> MB, &lt;span class="m">100&lt;/span> MiB&lt;span class="o">)&lt;/span> copied, X.X s, X B/s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>I&amp;rsquo;m also saving the data and reports under a &lt;code>reports&lt;/code> directory — so, create that if you need.&lt;/p>
&lt;/blockquote>
&lt;h2 id="baseline">Baseline&lt;/h2>
&lt;p>Reading from &lt;a class="link" href="https://linuxhint.com/dev_random_vs_dev_urandom/" target="_blank" rel="noopener"
>random or urandom&lt;/a> seems to be a surprisingly controversial subject, but the only nearly-standard difference I found was that &lt;code>urandom&lt;/code> (which stands for unblocked random) won&amp;rsquo;t block read access when there isn&amp;rsquo;t enough randomness while &lt;code>random&lt;/code> will. I&amp;rsquo;m only looking at the best each method has to offer, so I&amp;rsquo;ll be accessing &lt;code>/dev/random&lt;/code> for this data.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">~# dd &lt;span class="k">if&lt;/span>&lt;span class="o">=&lt;/span>/dev/random &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">of&lt;/span>&lt;span class="o">=&lt;/span>reports/random &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">bs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">104857600&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">iflag&lt;/span>&lt;span class="o">=&lt;/span>fullblock
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">104857600&lt;/span> bytes &lt;span class="o">(&lt;/span>&lt;span class="m">105&lt;/span> MB, &lt;span class="m">100&lt;/span> MiB&lt;span class="o">)&lt;/span> copied, 0.637875 s, &lt;span class="m">164&lt;/span> MB/s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~# ./sts -v &lt;span class="m">1&lt;/span> -i &lt;span class="m">800&lt;/span> -w reports/ -F r reports/random
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Testing data from file: reports/random
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of init phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of init phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of iterate phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of iterate phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of assess phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of assess phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of destroy phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of destroy phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Execution completed!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Check the random.txt file &lt;span class="k">for&lt;/span> the results
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The collapsed details above summarize how many STS random tests the data passed. Running these tests on different data will change the results; however, we&amp;rsquo;re testing 800 iterations of $2^{20}=1,048,576$ bits, so the results are statistically significant.&lt;/p>
&lt;p>This report is included in the zip linked in the conclusion along with the data used to derive the score.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>A total of 188 tests (some of the 15 tests actually consist of multiple sub-tests) were conducted to evaluate the randomness of 800 bitstreams of 1048576 bits from:&lt;/p>
&lt;pre>&lt;code>reports/random
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>The numerous empirical results of these tests were then interpreted with an examination of the proportion of sequences that pass a statistical test (proportion analysis) and the distribution of p-values to check for uniformity (uniformity analysis). The results were the following:&lt;/p>
&lt;pre>&lt;code>187/188 tests passed successfully both the analyses.
1/188 tests did not pass successfully both the analyses.
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>Here are the results of the single tests:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The &amp;ldquo;Frequency&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Block Frequency&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Cumulative Sums&amp;rdquo; (forward) test passed both the analyses.
The &amp;ldquo;Cumulative Sums&amp;rdquo; (backward) test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Runs&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Longest Run of Ones&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Binary Matrix Rank&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Discrete Fourier Transform&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>147/148 of the &amp;ldquo;Non-overlapping Template Matching&amp;rdquo; tests passed both the analyses.
1/148 of the &amp;ldquo;Non-overlapping Template Matching&amp;rdquo; tests FAILED the proportion analysis.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Overlapping Template Matching&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Maurer&amp;rsquo;s Universal Statistical&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Approximate Entropy&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>8/8 of the &amp;ldquo;Random Excursions&amp;rdquo; tests passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>18/18 of the &amp;ldquo;Random Excursions Variant&amp;rdquo; tests passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Serial&amp;rdquo; (first) test passed both the analyses.
The &amp;ldquo;Serial&amp;rdquo; (second) test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Linear Complexity&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;p>To begin our comparison, we&amp;rsquo;ll evaluate avalanche breakdown.&lt;/p>
&lt;h2 id="avalanche-breakdown">Avalanche Breakdown&lt;/h2>
&lt;p>This step is unique since we need to initialize the avalanche device to be read as a bitstream on &lt;!-- raw HTML omitted -->*nix&lt;!-- raw HTML omitted -->.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">~# dmesg &lt;span class="p">|&lt;/span> grep cdc_acm&lt;span class="se">\ &lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="p">|&lt;/span> tail -1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cdc_acm 1-2.3.2.4.2.4:1.0: ttyACM0: USB ACM device
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~# stty raw -echo &amp;lt;/dev/ttyACM0 &lt;span class="c1"># put the tty device into raw mode&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~# &lt;span class="nb">echo&lt;/span> cmd0 &amp;gt;/dev/ttyACM0 &lt;span class="c1"># put the device into the avalanche/whitening mode&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~# &lt;span class="nb">echo&lt;/span> cmdO &amp;gt;/dev/ttyACM0 &lt;span class="c1"># turn on the feed to the USB&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Running the command below should dim the &lt;!-- raw HTML omitted -->LED&lt;!-- raw HTML omitted -->, indicating a loss in entropy.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">~# dd &lt;span class="k">if&lt;/span>&lt;span class="o">=&lt;/span>/dev/ttyACM0 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">of&lt;/span>&lt;span class="o">=&lt;/span>reports/avalanche &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">bs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">104857600&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">iflag&lt;/span>&lt;span class="o">=&lt;/span>fullblock
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">104857600&lt;/span> bytes &lt;span class="o">(&lt;/span>&lt;span class="m">105&lt;/span> MB, &lt;span class="m">100&lt;/span> MiB&lt;span class="o">)&lt;/span> copied, 1829.86 s, 57.3 kB/s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~# ./sts -v &lt;span class="m">1&lt;/span> -i &lt;span class="m">800&lt;/span> -w reports/ -F r reports/avalanche
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Testing data from file: reports/avalanche
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of init phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of init phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of iterate phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of iterate phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of assess phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of assess phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of destroy phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of destroy phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Execution completed!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Check the avalanche.txt file &lt;span class="k">for&lt;/span> the results
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>A total of 188 tests (some of the 15 tests actually consist of multiple sub-tests) were conducted to evaluate the randomness of 800 bitstreams of 1048576 bits from:&lt;/p>
&lt;pre>&lt;code>reports/avalanche
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>The numerous empirical results of these tests were then interpreted with an examination of the proportion of sequences that pass a statistical test (proportion analysis) and the distribution of p-values to check for uniformity (uniformity analysis). The results were the following:&lt;/p>
&lt;pre>&lt;code>183/188 tests passed successfully both the analyses.
5/188 tests did not pass successfully both the analyses.
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>Here are the results of the single tests:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The &amp;ldquo;Frequency&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Block Frequency&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Cumulative Sums&amp;rdquo; (forward) test passed both the analyses.
The &amp;ldquo;Cumulative Sums&amp;rdquo; (backward) test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Runs&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Longest Run of Ones&amp;rdquo; test FAILED both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Binary Matrix Rank&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Discrete Fourier Transform&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>146/148 of the &amp;ldquo;Non-overlapping Template Matching&amp;rdquo; tests passed both the analyses.
2/148 of the &amp;ldquo;Non-overlapping Template Matching&amp;rdquo; tests FAILED both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Overlapping Template Matching&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Maurer&amp;rsquo;s Universal Statistical&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Approximate Entropy&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>8/8 of the &amp;ldquo;Random Excursions&amp;rdquo; tests passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>18/18 of the &amp;ldquo;Random Excursions Variant&amp;rdquo; tests passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Serial&amp;rdquo; (first) test FAILED both the analyses.
The &amp;ldquo;Serial&amp;rdquo; (second) test FAILED both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Linear Complexity&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="quantum-computer">Quantum Computer&lt;/h2>
&lt;p>You can either collect your own quantum data or download dumps from &lt;a class="link" href="https://cloudstor.aarnet.edu.au/plus/s/9Ik6roa7ACFyWL4" target="_blank" rel="noopener"
>ANU&lt;/a>. For any reasonable length, just download a pre-collected dump which the bash code will help with.&lt;/p>
&lt;h3 id="code-to-collect-data">Code to Collect Data&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">requests&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">get&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">tqdm&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">trange&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">os&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">path&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;reports/quantum&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;ab&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">trange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">2e6&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getsize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bin_str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://qrng.anu.edu.au/wp-content/plugins/colours-plugin/get_one_binary.php&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">text&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bin_str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">byteorder&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;big&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">~# &lt;span class="c1"># download 100 MB of quantum data from ANU&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~# curl -o reports/.quantum &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="s2">&amp;#34;https://cloudstor.aarnet.edu.au/plus/s/9Ik6roa7ACFyWL4/download?path=%2FANU_23Oct2017_5000MB&amp;amp;files=ANU_23Oct2017_100MB_1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> % Total % Received % Xferd Average Speed Time Time Time Current
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Dload Upload Total Spent Left Speed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">100&lt;/span> 100M &lt;span class="m">100&lt;/span> 100M &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> 5587k &lt;span class="m">0&lt;/span> 0:00:18 0:00:18 --:--:-- 6108k
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~# ./sts -v &lt;span class="m">1&lt;/span> -i &lt;span class="m">800&lt;/span> -w ./reports/ -F r reports/quantum
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Testing data from file: reports/quantum
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of init phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of init phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of iterate phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of iterate phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of assess phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of assess phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of destroy phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of destroy phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Execution completed!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Check the quantum.txt file &lt;span class="k">for&lt;/span> the results
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>A total of 188 tests (some of the 15 tests actually consist of multiple sub-tests) were conducted to evaluate the randomness of 800 bitstreams of 1048576 bits from:&lt;/p>
&lt;pre>&lt;code>reports/quantum
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>The numerous empirical results of these tests were then interpreted with an examination of the proportion of sequences that pass a statistical test (proportion analysis) and the distribution of p-values to check for uniformity (uniformity analysis). The results were the following:&lt;/p>
&lt;pre>&lt;code>188/188 tests passed successfully both the analyses.
0/188 tests did not pass successfully both the analyses.
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>Here are the results of the single tests:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The &amp;ldquo;Frequency&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Block Frequency&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Cumulative Sums&amp;rdquo; (forward) test passed both the analyses.
The &amp;ldquo;Cumulative Sums&amp;rdquo; (backward) test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Runs&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Longest Run of Ones&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Binary Matrix Rank&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Discrete Fourier Transform&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>148/148 of the &amp;ldquo;Non-overlapping Template Matching&amp;rdquo; tests passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Overlapping Template Matching&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Maurer&amp;rsquo;s Universal Statistical&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Approximate Entropy&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>8/8 of the &amp;ldquo;Random Excursions&amp;rdquo; tests passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>18/18 of the &amp;ldquo;Random Excursions Variant&amp;rdquo; tests passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Serial&amp;rdquo; (first) test passed both the analyses.
The &amp;ldquo;Serial&amp;rdquo; (second) test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Linear Complexity&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Here&amp;rsquo;s a summary of results.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th style="text-align:center">Randomness&lt;/th>
&lt;th style="text-align:center">Speed&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Random&lt;/td>
&lt;td style="text-align:center">187/188&lt;/td>
&lt;td style="text-align:center">164 MB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Avalanche&lt;/td>
&lt;td style="text-align:center">183/188&lt;/td>
&lt;td style="text-align:center">57.3 kB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Quantum&lt;/td>
&lt;td style="text-align:center">188/188&lt;/td>
&lt;td style="text-align:center">&lt;a class="link" href="https://qrng.anu.edu.au/contact/faq/" target="_blank" rel="noopener"
>5.7 Gb/s&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The built-in random entropy is the most common source of random numbers, and is almost perfectly statistically random. Obviously, the computer is not truly random, but the &lt;a class="link" href="https://unix.stackexchange.com/a/324210" target="_blank" rel="noopener"
>algorithms used&lt;/a> are made to score highly on these tests. For fast and affordable random numbers, built-in generators are the way to go, especially since they&amp;rsquo;re constantly seeded with conditions surrounding the machine.&lt;/p>
&lt;p>Avalanche diode breakdown has by far the slowest generation speed but boasts true random number generation. Interestingly, this generation scored the lowest in both randomness and speed, so the primary use-case for avalanche breakdown would be seeding the computer&amp;rsquo;s built-in &lt;code>random&lt;/code>. In that way, the computer will take entropy from the diode without depleting it and offering fast generation. When generating SSL certificates and private keys in general for websites, SSH, or even &lt;!-- raw HTML omitted -->crypto&lt;!-- raw HTML omitted --> wallets, the risk of using pseudo-random numbers is too high, in my opinion. If what you&amp;rsquo;re working on isn&amp;rsquo;t worth ~$40.00, then use &lt;code>random&lt;/code>, but if it&amp;rsquo;s worth more than that, invest in a avalanche breakdown device. I spent $40.00 and picked up the &lt;a class="link" href="https://onerng.info/" target="_blank" rel="noopener"
>OneRNG V3&lt;/a> pictured above.&lt;/p>
&lt;p>Quantum random numbers are blisteringly fast and truly random. This will most likely be a huge use-case for quantum in the future. As crypto becomes more widespread on the internet, I&amp;rsquo;m sure companies or individuals will want true randomness for generating their keys. As of right now, though, they&amp;rsquo;re simply too expensive to buy.&lt;/p>
&lt;p>The best option for securely generating random numbers is to seed the computer&amp;rsquo;s entropy with a source of true randomness. If this is something you were considering, know that despite the high 187 score that &lt;code>random&lt;/code> achieved, it is not truly random, meaning the numbers will always be the same if the initial conditions are replicated. Depending on your use-case, that might be fine. For example, running a Monte Carlo simulation or initializing random weights to a neural network. But if you&amp;rsquo;re working with sensitive information, a true source of random numbers, even just as a seed to the machine, is always safer.&lt;/p>
&lt;p>If you&amp;rsquo;d like to confirm these results, you can &lt;a class="link" href="https://slc.is/data/randomReports.zip" >download&lt;/a> the random data and reports for each respective binary blob. As expected for random data, zip couldn&amp;rsquo;t compress the three 100 MB files, so it is over 300 MB! Sadly I can&amp;rsquo;t upload that to GitHub, so I&amp;rsquo;m uploading a 100 MB version instead. If you&amp;rsquo;d &lt;em>really&lt;/em> like the 300 MB version, email me and I&amp;rsquo;ll send it over.&lt;/p>
&lt;p>Based on the results from the smaller sample, it seems that the &lt;a class="link" href="https://wikipedia.org/wiki/Law_of_large_numbers" target="_blank" rel="noopener"
>Law of Large Numbers&lt;/a> applies most to avalanche diode breakdown and least to the built-in pseudo-random number generator. Quantum in somewhere in the middle. This is only from a few tests though, so it&amp;rsquo;s by no means as significant as the results from 800 tests.&lt;/p></description></item><item><title>Custom Gates in Qiskit with Pulse</title><link>https://slc.is/archive/custom-gates-in-qiskit-with-pulse/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><guid>https://slc.is/archive/custom-gates-in-qiskit-with-pulse/</guid><description>&lt;img src="https://slc.is/images/pulseVisual3.webp" alt="Featured image of post Custom Gates in Qiskit with Pulse" />&lt;p>Quantum research often requires applying operations in novel ways; however, it&amp;rsquo;s occasionally necessary to create gates to reduce circuit length. If too many operations are applied to a qubit, the quantum state is lost and no valuable insight can be gained. The quantum compiler can optimize these steps, but having the ability to create custom microwave pulses to apply to qubits is valuable.&lt;/p>
&lt;p>In this quick tutorial, we will compose a Hadamard pulse and apply it to a qubit through a circuit using Qiskit. That&amp;rsquo;s quite a mouthful, but it&amp;rsquo;s a lot nicer than it seems.&lt;/p>
&lt;h2 id="imports">Imports&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">qiskit&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Aer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">assemble&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pulse&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">QuantumCircuit&lt;/span>&lt;span class="p">,&lt;/span>\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">schedule&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">transpile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">qiskit.circuit&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Gate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">qiskit.providers.aer&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">PulseSimulator&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">qiskit.providers.aer.pulse&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">PulseSystemModel&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">qiskit.test&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">mock&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">qiskit.pulse.library&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Gaussian&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">qiskit.visualization&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">plot_histogram&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">qiskit.visualization.pulse_v2&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">draw&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">qiskit.tools.jupyter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># fake quantum computer we&amp;#39;re using&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">backend&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">FakeArmonk&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We need to import the necessary Qiskit modules, but one thing to note is the mock backend we&amp;rsquo;re using. From &lt;code>qiskit.test&lt;/code> we import &lt;code>mock&lt;/code> and use its fake Armonk backend. This is a fake quantum computer that will simulate our code. Armonk also supports Qiskit Pulse and pulse simulations which we need. Waiting to run pulses on hardware can take a long time, so having a simulator is extremely helpful when prototyping quantum gates.&lt;/p>
&lt;p>To begin our custom gate, we need to define a non-calibrated gate that we will later calibrate with a custom microwave pulse.&lt;/p>
&lt;h3 id="create-a-custom-gate">Create a custom gate&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">gate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;hadamard&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;H&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num_qubits&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We created a gate that will apply a pulse to one qubit. But the gate doesn&amp;rsquo;t have a pulse yet. Let&amp;rsquo;s fix that!&lt;/p>
&lt;h3 id="build-pulse-for-custom-gate">Build pulse for custom gate&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># create a microwave pulse with a gaussian curve&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">with&lt;/span> &lt;span class="n">pulse&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">backend&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;hadamard&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">gate_pulse&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># custom pulse for this demo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">microwave&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Gaussian&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">duration&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">310&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amp&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mf">.36&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sigma&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">80&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pulse&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">play&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">microwave&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pulse&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">drive_channel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">gate_pulse&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">draw&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://slc.is/images/pulseVisual1.webp"
loading="lazy"
alt="Hadamard Gaussian"
>&lt;/p>
&lt;p>Most waves can be parameterized by a gaussian shape in quantum computing. In Qiskit Pulse, we simply define the shape of the curve and set that microwave to a variable &lt;code>gate_pulse&lt;/code>. This pulse can be changed in both shape and parameters. Qiskit also offers non-gaussian curves that can be used, though gaussian is most commonly seen.&lt;/p>
&lt;p>The next step is to attach this microwave pulse to the custom gate we initialized.&lt;/p>
&lt;h3 id="use-custom-gate">Use custom gate&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">qc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">QuantumCircuit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># append the custom gate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">qc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">qc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">measure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># define pulse of quantum gate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">qc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_calibration&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;hadamard&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">gate_pulse&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">qc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">draw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;mpl&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We can treat the gate normally when building circuits, but adding the pulse is different. Qiskit uses &lt;code>add_calibration&lt;/code> to apply a custom pulse to a specific gate.&lt;/p>
&lt;p>&lt;img src="https://slc.is/images/pulseVisual2.webp"
loading="lazy"
alt="Gate Circuit"
>&lt;/p>
&lt;p>We&amp;rsquo;re now using a custom gate in a circuit, but let&amp;rsquo;s confirm that this circuit is &lt;em>actually&lt;/em> applying the pulse we specified.&lt;/p>
&lt;p>We can use Qiskit Pulse to transpile the circuit to pulses that would be directly run on the quantum computers.&lt;/p>
&lt;h2 id="convert-the-circuit-back-to-a-pulse">Convert the circuit back to a pulse&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># unnecessary with calibrated gates&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">qc_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">transpile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">qc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">backend&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">qc_pulse&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">schedule&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">qc_t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">backend&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">draw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">qc_pulse&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">backend&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">backend&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://slc.is/images/pulseVisual3.webp"
loading="lazy"
alt="Circuit Pulses"
>&lt;/p>
&lt;p>If you compare the microwave we defined above to this, you can see that it is indeed the same. Our circuit is now using a custom Hadamard gate! But let&amp;rsquo;s not be too quick to celebrate.&lt;/p>
&lt;p>Let&amp;rsquo;s run one final test to see how the simulator handles custom pulses.&lt;/p>
&lt;h2 id="execute-circuit">Execute Circuit&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># create a pulse simulator and model&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">backend_sim&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PulseSimulator&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">system_model&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">PulseSystemModel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_backend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">backend&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># prepare the pulse job&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pulse_qobj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">assemble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">qc_pulse&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">backend&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">backend_sim&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># run the job on the backend&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sim_result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">backend_sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pulse_qobj&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This method of simulating circuits is different from most tutorials you&amp;rsquo;ll find. Since we&amp;rsquo;re using a custom pulse, our simulator needs to be able to handle that. We use the &lt;code>PulseSimulator&lt;/code> to handle this kind of circuit. I believe it&amp;rsquo;s due to the normal simulator using matrices while this needs to handle microwaves, but I&amp;rsquo;m not sure.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># plot circuit output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">plot_histogram&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sim_result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_counts&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://slc.is/images/pulseVisual4.webp"
loading="lazy"
alt="Measurement Histogram"
>&lt;/p>
&lt;p>Success! As expected, the qubit is in a superposition between $\ket{0}$ and $\ket{1}$. The near 50-50 distribution supports that… but what happens when you apply two of these pulses in succession? We&amp;rsquo;ll tackle that at a later time, but if you want a head-start, check out the &lt;a class="link" href="https://qiskit.org/textbook/ch-quantum-hardware/calibrating-qubits-pulse.html" target="_blank" rel="noopener"
>Rabi experiment&lt;/a>. 😵‍💫&lt;/p>
&lt;h3 id="version-information">Version Information&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Qiskit Software&lt;/th>
&lt;th style="text-align:right">Version&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>qiskit-terra&lt;/td>
&lt;td style="text-align:right">0.19.1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>qiskit-aer&lt;/td>
&lt;td style="text-align:right">0.9.1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>qiskit-ignis&lt;/td>
&lt;td style="text-align:right">0.7.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>qiskit-ibmq-provider&lt;/td>
&lt;td style="text-align:right">0.18.2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>qiskit&lt;/td>
&lt;td style="text-align:right">0.33.1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Quantum Tales</title><link>https://slc.is/archive/quantum-tales/</link><pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate><guid>https://slc.is/archive/quantum-tales/</guid><description>&lt;img src="https://slc.is/images/quantumTales.webp" alt="Featured image of post Quantum Tales" />&lt;p>Shortly after becoming an IBM Qiskit Advocate, I was introduced to the Unitary Fund. After writing a &lt;a class="link" href="https://link.medium.com/y1zFy6ThYhb" target="_blank" rel="noopener"
>story&lt;/a> where the reader uses Shor&amp;rsquo;s algorithm to decrypt a stock listing, I wanted to create more stories teaching quantum algorithms.&lt;/p>
&lt;p>With the help of the &lt;a class="link" href="https://unitary.fund" target="_blank" rel="noopener"
>Unitary Fund&lt;/a>, I was able to realize this dream. I created a series of stories that teach various quantum algorithms. The stories are all rooted in classic fairy tales from around the world, except the protagonist now employees their quantum prowess to succeed.&lt;/p>
&lt;p>This project is ongoing and will hopefully cover a wide range of algorithms and tales alike. The &lt;a class="link" href="https://quantumtales.org" target="_blank" rel="noopener"
>QuantumTales&lt;/a> site will have the most up-to-date information as well as previews. The &lt;a class="link" href="https://github.com/splch/quantum-tales/" target="_blank" rel="noopener"
>GitHub repository&lt;/a> is the second place to look for code and additional information.&lt;/p></description></item></channel></rss>