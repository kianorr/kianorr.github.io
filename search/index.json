[{"content":"I used the SUBTLEX-CH frequency list to list the top 100 Chinese words per part of speech.\nIf you\u0026rsquo;d like to view the entire list, download this Python pickle file. The structure is:\n1 2 3 4 5 6 7  { \u0026#34;part of speech\u0026#34;: { \u0026#34;word\u0026#34;: frequency, ... }, ... }   There are 2683 words on this page, so it should be enough to survive in a Chinese-speaking region with. Additionally, I\u0026rsquo;m not sure what each of the POS tags mean, but I\u0026rsquo;ll figure it out soon.\nWord Lists Heavenly Stems  甲 0.0% 丙 0.0% 乙 0.0% 丁 0.0% 戊 0.0% 巳 0.0% 寅 0.0% 癸 0.0% 辰 0.0%  Rg  尔 0.01% 斯 0.01% 兹 0.0% 夫 0.0% 伊 0.0% 汝 0.0% 胡 0.0% 余 0.0% 甚 0.0% 予 0.0%  Adjectives  好 0.99% 真 0.14% 大 0.13% 小 0.1% 快 0.1% 多 0.08% 不错 0.06% 抱歉 0.05% 新 0.05% 高兴 0.05% 棒 0.05% 老 0.05% 亲爱 0.04% 重要 0.03% 漂亮 0.03% 长 0.03% 清楚 0.03% 一样 0.02% 坏 0.02% 高 0.02% 开心 0.02% 可爱 0.02% 不行 0.02% 糟 0.02% 有趣 0.02% 久 0.02% 糟糕 0.02% 不同 0.02% 难 0.01% 简单 0.01% 紧张 0.01% 远 0.01% 成功 0.01% 黑 0.01% 甜 0.01% 聪明 0.01% 疯狂 0.01% 早 0.01% 不好 0.01% 正常 0.01% 完美 0.01% 傻 0.01% 小心 0.01% 年轻 0.01% 容易 0.01% 强 0.01% 幸运 0.01% 危险 0.01% 可怕 0.01% 死 0.01% 必要 0.01% 假 0.01% 冷静 0.01% 正确 0.01% 全 0.01% 忙 0.01% 安静 0.01% 恐怖 0.01% 快乐 0.01% 红 0.01% 明显 0.01% 少 0.01% 恶心 0.01% 出色 0.01% 真实 0.01% 严重 0.01% 差 0.01% 慢 0.01% 美 0.01% 自由 0.01% 晚 0.01% 舒服 0.01% 热 0.01% 蠢 0.01% 伟大 0.01% 美丽 0.01% 臭 0.01% 厉害 0.01% 特别 0.01% 精彩 0.01% 失望 0.01% 愉快 0.01% 合适 0.01% 麻烦 0.01% 近 0.01% 显然 0.01% 短 0.01% 认真 0.01% 冷 0.01% 愚蠢 0.01% 客气 0.01% 美好 0.01% 公平 0.01% 重 0.01% 干净 0.01% 遗憾 0.01% 不够 0.01% 满 0.01% 烂 0.01% 激动 0.01%  ad  完全 0.03% 确实 0.02% 早 0.02% 难 0.02% 多 0.01% 直接 0.01% 突然 0.01% 随便 0.01% 努力 0.01% 远 0.01% 容易 0.0% 仔细 0.0% 老实 0.0% 抱歉 0.0% 少 0.0% 显然 0.0% 彻底 0.0% 正式 0.0% 小心 0.0% 冷静 0.0% 一般 0.0% 认真 0.0% 及时 0.0% 成功 0.0% 久 0.0% 主动 0.0% 明显 0.0% 紧急 0.0% 混 0.0% 自由 0.0% 秘密 0.0% 严重 0.0% 准时 0.0% 随意 0.0% 公开 0.0% 专心 0.0% 易 0.0% 暗 0.0% 安全 0.0% 长 0.0% 顺利 0.0% 迅速 0.0% 严格 0.0% 轻 0.0% 基本 0.0% 高 0.0% 集中 0.0% 亲 0.0% 详细 0.0% 精心 0.0% 全面 0.0% 疯狂 0.0% 充分 0.0% 意外 0.0% 耐心 0.0% 简单 0.0% 不好 0.0% 暴 0.0% 巧 0.0% 连续 0.0% 慢 0.0% 正常 0.0% 具体 0.0% 一致 0.0% 小 0.0% 偶然 0.0% 急 0.0% 健康 0.0% 假 0.0% 深入 0.0% 强烈 0.0% 正确 0.0% 过分 0.0% 积极 0.0% 独立 0.0% 用力 0.0% 轻松 0.0% 完美 0.0% 懦弱 0.0% 勉强 0.0% 不幸 0.0% 恶 0.0% 明确 0.0% 平安 0.0% 热烈 0.0% 用心 0.0% 乐 0.0% 严肃 0.0% 安心 0.0% 热情 0.0% 密切 0.0% 坚决 0.0% 实 0.0% 公平 0.0% 勇敢 0.0% 密 0.0% 真实 0.0% 紧张 0.0% 诚实 0.0% 大胆 0.0%  an  安全 0.02% 麻烦 0.01% 抱歉 0.01% 快乐 0.01% 努力 0.01% 危险 0.01% 痛苦 0.01% 骄傲 0.0% 恐惧 0.0% 成功 0.0% 困难 0.0% 自由 0.0% 礼貌 0.0% 邪恶 0.0% 黑暗 0.0% 幸福 0.0% 冲动 0.0% 惊喜 0.0% 健康 0.0% 意外 0.0% 矛盾 0.0% 热情 0.0% 必要 0.0% 烦恼 0.0% 自信 0.0% 尴尬 0.0% 卫生 0.0% 遗憾 0.0% 沉默 0.0% 温暖 0.0% 荣耀 0.0% 恐慌 0.0% 稳定 0.0% 混乱 0.0% 辣 0.0% 疼痛 0.0% 不安 0.0% 失望 0.0% 平衡 0.0% 悲哀 0.0% 苦 0.0% 忠诚 0.0% 困惑 0.0% 傻 0.0% 一致 0.0% 耐心 0.0% 腐败 0.0% 错乱 0.0% 孤独 0.0% 狂热 0.0% 惊讶 0.0% 悲伤 0.0% 冷静 0.0% 平安 0.0% 焦虑 0.0% 安宁 0.0% 清白 0.0% 愧疚 0.0% 欢乐 0.0% 不满 0.0% 明白 0.0% 沮丧 0.0% 不足 0.0% 浪漫 0.0% 愤怒 0.0% 民主 0.0% 内疚 0.0% 悲痛 0.0% 团结 0.0% 肃静 0.0% 刻薄 0.0% 阴险 0.0% 喜悦 0.0% 迷惑 0.0% 荣幸 0.0% 寂寞 0.0% 镇静 0.0% 默契 0.0% 忧伤 0.0% 无知 0.0% 公道 0.0% 孤单 0.0% 怪异 0.0% 偏执 0.0% 自私 0.0% 宁静 0.0% 安定 0.0% 羞辱 0.0% 无助 0.0% 苦恼 0.0% 幽默 0.0% 安慰 0.0% 方便 0.0% 伤感 0.0% 哀伤 0.0% 俗气 0.0% 厉害 0.0% 累赘 0.0% 贫穷 0.0% 残忍 0.0%  b  所有 0.08% 女 0.02% 整个 0.02% 唯一 0.02% 男 0.02% 真正 0.01% 哈 0.01% 美 0.01% 斯 0.01% 阿 0.01% 尼 0.01% 中 0.01% 副 0.01% 超级 0.01% 非 0.01% 同样 0.01% 亚 0.01% 吉 0.01% 巴 0.0% 金 0.0% 洛 0.0% 罗 0.0% 总 0.0% 奥 0.0% 伊 0.0% 德 0.0% 萨 0.0% 法 0.0% 原 0.0% 西 0.0% 加 0.0% 意 0.0% 全新 0.0% 日 0.0% 主要 0.0% 公共 0.0% 欧 0.0% 瑞 0.0% 泰 0.0% 南 0.0% 保安 0.0% 原来 0.0% 维 0.0% 消防 0.0% 格 0.0% 单 0.0% 一定 0.0% 克 0.0% 非法 0.0% 裸体 0.0% 连环 0.0% 丹 0.0% 太 0.0% 母 0.0% 印 0.0% 后备 0.0% 厄 0.0% 菲 0.0% 同一个 0.0% 藏 0.0% 苏 0.0% 英 0.0% 最终 0.0% 摩 0.0% 塔 0.0% 故意 0.0% 业余 0.0% 临时 0.0% 华 0.0% 额外 0.0% 兰 0.0% 大型 0.0% 芬 0.0% 亲生 0.0% 野 0.0% 贝 0.0% 韩 0.0% 鲁 0.0% 卢 0.0% 天生 0.0% 俄 0.0% 一流 0.0% 头号 0.0% 私家 0.0% 非常 0.0% 希 0.0% 银 0.0% 小型 0.0% 自动 0.0% 共同 0.0% 高速 0.0% 纳 0.0% 莫 0.0% 隐形 0.0% 首要 0.0% 潜在 0.0% 前任 0.0% 朝 0.0% 日常 0.0% 特定 0.0%  c  如果 0.23% 但 0.2% 但是 0.16% 所以 0.11% 然后 0.09% 那 0.07% 不过 0.06% 而且 0.06% 那么 0.05% 或者 0.04% 可是 0.03% 因为 0.03% 只要 0.03% 还是 0.03% 不管 0.02% 或 0.02% 只有 0.02% 虽然 0.02% 可 0.01% 并且 0.01% 除非 0.01% 才 0.01% 否则 0.01% 即使 0.01% 因此 0.01% 既然 0.01% 无论 0.01% 要是 0.01% 要么 0.01% 不然 0.01% 甚至 0.01% 尽管 0.01% 而是 0.01% 同时 0.01% 只是 0.01% 或是 0.01% 接着 0.0% 一旦 0.0% 若 0.0% 又 0.0% 首先 0.0% 另外 0.0% 总之 0.0% 不仅 0.0% 假如 0.0% 既 0.0% 然而 0.0% 即便 0.0% 不论 0.0% 哪怕 0.0% 且 0.0% 之所以 0.0% 由于 0.0% 万一 0.0% 再说 0.0% 要不然 0.0% 则 0.0% 无论是 0.0% 其次 0.0% 要不 0.0% 不光 0.0% 与此同时 0.0% 此外 0.0% 不但 0.0% 不是 0.0% 以至于 0.0% 何况 0.0% 虽 0.0% 另一方面 0.0% 以免 0.0% 从而 0.0% 以 0.0% 换句话说 0.0% 如 0.0% 一来 0.0% 果然 0.0% 况且 0.0% 因 0.0% 虽说 0.0% 是因为 0.0% 就是说 0.0% 恰恰相反 0.0% 不如说 0.0% 不论是 0.0% 抑或 0.0% 除此之外 0.0% 一方面 0.0% 不单 0.0% 以致 0.0% 总而言之 0.0% 以便 0.0% 总的来说 0.0% 不只 0.0% 故 0.0% 既然如此 0.0% 紧接着 0.0% 不如 0.0% 因而 0.0% 要说 0.0% 然 0.0%  cc  和 0.42% 而 0.12% 并 0.02% 以及 0.01% 与 0.01% 于是 0.01% 及 0.01% 及其 0.0% 以至 0.0% 加之 0.0% 换言之 0.0% 暨 0.0%  d  不 2.05% 就 0.79% 很 0.6% 都 0.53% 也 0.39% 还 0.39% 没 0.27% 别 0.2% 太 0.19% 只 0.19% 再 0.17% 真 0.16% 已经 0.15% 最 0.14% 又 0.1% 没有 0.1% 才 0.1% 更 0.1% 非常 0.08% 当然 0.08% 也许 0.08% 一直 0.07% 不要 0.06% 一定 0.06% 将 0.06% 必须 0.06% 正 0.06% 快 0.06% 只是 0.06% 先 0.05% 并 0.04% 却 0.04% 肯定 0.03% 刚 0.03% 真是 0.03% 马上 0.03% 永远 0.03% 到底 0.03% 一起 0.03% 总 0.03% 从来 0.03% 总是 0.03% 或许 0.02% 根本 0.02% 还是 0.02% 好好 0.02% 挺 0.02% 其实 0.02% 至少 0.02% 正在 0.02% 已 0.02% 刚刚 0.02% 绝对 0.02% 有点 0.02% 难道 0.02% 曾经 0.02% 一 0.02% 真的 0.02% 曾 0.01% 过 0.01% 简直 0.01% 的确 0.01% 特别 0.01% 全 0.01% 重新 0.01% 大概 0.01% 甚至 0.01% 实际上 0.01% 本来 0.01% 越 0.01% 终于 0.01% 不再 0.01% 就是 0.01% 从没 0.01% 不用 0.01% 很快 0.01% 到处 0.01% 经常 0.01% 实在 0.01% 比较 0.01% 似乎 0.01% 还要 0.01% 倒 0.01% 多么 0.01% 仍然 0.01% 居然 0.01% 就要 0.01% 几乎 0.01% 再次 0.01% 不得不 0.01% 大 0.01% 约 0.01% 乱 0.01% 真正 0.01% 有时 0.01% 反正 0.01% 未 0.01% 本 0.01% 不必 0.01% 有时候 0.01%  e  嘿 0.12% 嗯 0.1% 哦 0.08% 嗨 0.08% 噢 0.04% 喂 0.01% 啊 0.01% 哎 0.0% 唉 0.0% 哼 0.0% 哎呀 0.0% 呦 0.0% 哟 0.0% 诶 0.0% 呵呵 0.0% 呵 0.0% 哎哟 0.0% 好家伙 0.0% 啊啊 0.0% 咦 0.0% 咳 0.0% 呸 0.0% 呜呼 0.0% 嗬 0.0% 嚯 0.0% 啊呀 0.0% 喏 0.0% 哩 0.0% 啊哟 0.0% 啧 0.0% 嗨哟 0.0% 乎 0.0% 噫 0.0% 布拉沃 0.0%  f  上 0.24% 里 0.19% 中 0.1% 下 0.08% 前 0.08% 后 0.07% 最后 0.05% 之前 0.05% 以前 0.04% 之后 0.03% 里面 0.03% 来 0.03% 以后 0.03% 内 0.02% 之间 0.02% 外面 0.02% 上面 0.02% 后面 0.01% 外 0.01% 底 0.01% 下面 0.01% 附近 0.01% 面前 0.01% 间 0.01% 前面 0.01% 旁边 0.01% 周围 0.01% 右 0.01% 西 0.01% 以来 0.0% 中间 0.0% 之中 0.0% 东 0.0% 背后 0.0% 之外 0.0% 之内 0.0% 左边 0.0% 内部 0.0% 北 0.0% 起 0.0% 左 0.0% 当中 0.0% 期间 0.0% 右边 0.0% 底下 0.0% 以外 0.0% 旁 0.0% 以下 0.0% 之下 0.0% 对面 0.0% 初 0.0% 身后 0.0% 以上 0.0% 边上 0.0% 西部 0.0% 尽头 0.0% 东西 0.0% 南 0.0% 四周 0.0% 南部 0.0% 之上 0.0% 北部 0.0% 脚下 0.0% 东部 0.0% 两边 0.0% 里头 0.0% 末 0.0% 中部 0.0% 上头 0.0% 北边 0.0% 外头 0.0% 南边 0.0% 外部 0.0% 外边 0.0% 一边 0.0% 以内 0.0% 底部 0.0% 侧面 0.0% 上方 0.0% 背面 0.0% 前后 0.0% 上下 0.0% 里边 0.0% 正中 0.0% 北面 0.0% 上层 0.0% 一旁 0.0% 东边 0.0% 西边 0.0% 左侧 0.0% 之际 0.0% 上边 0.0% 右侧 0.0% 下方 0.0% 外围 0.0% 早期 0.0% 后边 0.0% 后头 0.0% 顶层 0.0% 南面 0.0%  g  时 0.07% 喝 0.04% 儿 0.02% 恩 0.01% 员 0.01% 象 0.01% 警 0.01% 子 0.01% 酷 0.01% 身 0.01% 性 0.01% 案 0.01% 特 0.01% 感 0.01% 杯 0.01% 秀 0.01% 机 0.01% 主 0.01% 圣 0.01% 爽 0.01% 行 0.01% 棒 0.01% 帐 0.01% 战 0.01% 克 0.01% 语 0.01% 师 0.01% 什 0.0% 物 0.0% 声 0.0% 尸 0.0% 咪 0.0% 奇 0.0% 魔 0.0% 基 0.0% 蒂 0.0% 久 0.0% 乔 0.0% 器 0.0% 杰 0.0% 佬 0.0% 强 0.0% 击 0.0% 模 0.0% 妮 0.0% 婚 0.0% 味 0.0% 症 0.0% 体 0.0% 意 0.0% 诺 0.0% 林 0.0% 瑞 0.0% 麦 0.0% 板 0.0% 史 0.0% 言 0.0% 司 0.0% 日 0.0% 纹 0.0% 胸 0.0% 丽 0.0% 文 0.0% 兰 0.0% 客 0.0% 镜 0.0% 样 0.0% 木 0.0% 夫 0.0% 普 0.0% 森 0.0% 具 0.0% 妞 0.0% 士 0.0% 影 0.0% 侠 0.0% 交 0.0% 明 0.0% 骨 0.0% 趣 0.0% 父 0.0% 职 0.0% 谎 0.0% 金 0.0% 箱 0.0% 轮 0.0% 术 0.0% 校 0.0% 庭 0.0% 狂 0.0% 善 0.0% 形 0.0% 蕾 0.0% 仔 0.0% 世 0.0% 检 0.0% 澡 0.0% 录 0.0% 异 0.0% 族 0.0%  h  超 0.0% 准 0.0% 泛 0.0%  k  们 0.12% 者 0.03% 边 0.01% 式 0.0% 型 0.0% 儿 0.0% 界 0.0% 性 0.0% 症 0.0% 率 0.0% 堆 0.0% 制 0.0% 化 0.0% 业 0.0% 热 0.0% 仪 0.0% 论 0.0% 乎 0.0% 头 0.0%  l  事实上 0.02% 差不多 0.01% 有意思 0.01% 不可思议 0.0% 不管怎样 0.0% 可不 0.0% 无论如何 0.0% 受不了 0.0% 毫无疑问 0.0% 所作所为 0.0% 用不着 0.0% 一模一样 0.0% 有史以来 0.0% 乱七八糟 0.0% 迫不及待 0.0% 独一无二 0.0% 性骚扰 0.0% 面对面 0.0% 您好 0.0% 除此之外 0.0% 显而易见 0.0% 此时此刻 0.0% 一塌糊涂 0.0% 各种各样 0.0% 不得了 0.0% 大惊小怪 0.0% 至关重要 0.0% 莫名其妙 0.0% 好不容易 0.0% 偷偷摸摸 0.0% 理所当然 0.0% 无处不在 0.0% 梦寐以求 0.0% 尽管如此 0.0% 诸如此类 0.0% 无缘无故 0.0% 激动人心 0.0% 轻而易举 0.0% 不择手段 0.0% 百分之百 0.0% 梦想成真 0.0% 从头到尾 0.0% 迄今为止 0.0% 彻头彻尾 0.0% 一清二楚 0.0% 情不自禁 0.0% 鬼鬼祟祟 0.0% 一举一动 0.0% 想方设法 0.0% 指手画脚 0.0% 每时每刻 0.0% 世界大战 0.0% 自言自语 0.0% 鸡皮疙瘩 0.0% 不顾一切 0.0% 全心全意 0.0% 团团转 0.0% 一天到晚 0.0% 无时无刻 0.0% 强有力 0.0% 愤世嫉俗 0.0% 完美无缺 0.0% 毫不犹豫 0.0% 一席之地 0.0% 筋疲力尽 0.0% 自然而然 0.0% 一连串 0.0% 不省人事 0.0% 说到底 0.0% 小心翼翼 0.0% 走投无路 0.0% 种族歧视 0.0% 不仅如此 0.0% 十字路口 0.0% 精彩绝伦 0.0% 正当防卫 0.0% 感情用事 0.0% 不知不觉 0.0% 光天化日 0.0% 恰到好处 0.0% 无稽之谈 0.0% 光明正大 0.0% 甜言蜜语 0.0% 从此以后 0.0% 蛛丝马迹 0.0% 中产阶级 0.0% 无名小卒 0.0% 天衣无缝 0.0% 军事基地 0.0% 无懈可击 0.0% 深思熟虑 0.0% 罪魁祸首 0.0% 不可收拾 0.0% 依我看 0.0% 死路一条 0.0% 光彩照人 0.0% 合情合理 0.0% 随时随地 0.0% 一臂之力 0.0% 无影无踪 0.0%  Numbers  一 0.59% 两 0.11% 几 0.07% 多 0.06% 第一 0.05% 三 0.05% 很多 0.04% 俩 0.03% 四 0.02% 第 0.02% 第二 0.02% 万 0.02% 五 0.02% 半 0.02% 二 0.01% 首 0.01% 六 0.01% 全部 0.01% 十 0.01% 来 0.01% 第三 0.01% 整 0.01% 一半 0.01% 部分 0.01% 双 0.01% 八 0.01% 许多 0.01% 七 0.01% 不少 0.01% 好几 0.01% 千万 0.0% 千 0.0% 大多数 0.0% 第四 0.0% 大部分 0.0% 好多 0.0% 九 0.0% 数 0.0% 左右 0.0% 第五 0.0% 好久 0.0% 百 0.0% 一会 0.0% 头 0.0% 大量 0.0% 百万 0.0% 不久 0.0% 第六 0.0% 亿 0.0% 一百 0.0% 无数 0.0% 二十 0.0% 一两 0.0% 一百万 0.0% 一千 0.0% 零 0.0% 第七 0.0% 十二 0.0% 一万 0.0% 几百 0.0% 第八 0.0% 三十 0.0% 几千 0.0% 第九 0.0% 多数 0.0% 五十 0.0% 十五 0.0% 十万 0.0% 好些 0.0% 许 0.0% 丝毫 0.0% 上千 0.0% 少数 0.0% 片刻 0.0% 一部分 0.0% 四十 0.0% 几百万 0.0% 十几 0.0% 第十 0.0% 众多 0.0% 上百 0.0% 亿万 0.0% 百分 0.0% 几十 0.0% 一整天 0.0% 两百万 0.0% 五千 0.0% 两三 0.0% 数百万 0.0% 终生 0.0% 四分之一 0.0% 上百万 0.0% 两千 0.0% 一千万 0.0% 三千 0.0% 三百 0.0% 五万 0.0% 十八 0.0% 十六 0.0% 两万 0.0%  mq  一个 0.35% 一下 0.08% 一点 0.06% 一些 0.05% 一会儿 0.01% 一刻 0.0% 一辈子 0.0% 一路 0.0% 一点儿 0.0% 一阵子 0.0% 一阵 0.0% 一番 0.0% 一下子 0.0% 多年 0.0% 一对 0.0% 多次 0.0% 半辈子 0.0% 半天 0.0% 半点 0.0% 百年 0.0% 一整套 0.0% 一丁点儿 0.0% 三维 0.0% 一头 0.0% 百倍 0.0% 半截 0.0% 一小撮 0.0% 大半天 0.0% 几度 0.0% 两手 0.0% 万年 0.0% 万代 0.0%  Nouns  人 0.58% 事 0.29% 时候 0.16% 先生 0.14% 话 0.12% 东西 0.11% 孩子 0.11% 问题 0.1% 时间 0.09% 钱 0.09% 事情 0.08% 朋友 0.08% 妈妈 0.08% 车 0.07% 地方 0.07% 爸爸 0.07% 点 0.06% 意思 0.06% 电话 0.05% 妈 0.05% 家 0.05% 医生 0.05% 伙计 0.04% 手 0.04% 感觉 0.04% 上帝 0.04% 女人 0.04% 名字 0.04% 家伙 0.04% 女孩 0.04% 父亲 0.04% 宝贝 0.04% 狗 0.04% 枪 0.04% 世界 0.03% 男人 0.03% 机会 0.03% 小时 0.03% 天 0.03% 警察 0.03% 儿子 0.03% 情况 0.03% 女士 0.03% 关系 0.03% 公司 0.03% 月 0.03% 爸 0.03% 心 0.03% 照片 0.03% 头 0.03% 兄弟 0.03% 嘴 0.03% 计划 0.03% 女儿 0.03% 小姐 0.03% 消息 0.02% 门 0.02% 房子 0.02% 衣服 0.02% 办法 0.02% 人们 0.02% 原因 0.02% 水 0.02% 混蛋 0.02% 学校 0.02% 队 0.02% 电影 0.02% 房间 0.02% 球 0.02% 书 0.02% 路 0.02% 结果 0.02% 长官 0.02% 律师 0.02% 故事 0.02% 可能 0.02% 妻子 0.02% 床 0.02% 案子 0.02% 酒 0.02% 歌 0.02% 节目 0.02% 母亲 0.02% 主意 0.02% 丈夫 0.02% 马 0.02% 生命 0.02% 办公室 0.02% 游戏 0.02% 眼睛 0.02% 国家 0.02% 信 0.02% 总统 0.02% 声音 0.02% 医院 0.02% 样子 0.02% 证据 0.02% 夫人 0.02% 父母 0.02% 事实 0.01%  People  杰克 0.02% 周 0.01% 约翰 0.01% 帅 0.01% 耶稣 0.0% 汤姆 0.0% 毛 0.0% 查理 0.0% 乔治 0.0% 麦克 0.0% 弗兰克 0.0% 比尔 0.0% 大卫 0.0% 迪 0.0% 乔伊 0.0% 张 0.0% 彼得 0.0% 玛丽 0.0% 福尔摩斯 0.0% 艾 0.0% 卡尔 0.0% 王 0.0% 威尔 0.0% 丹尼 0.0% 尼克 0.0% 克莱尔 0.0% 皮特 0.0% 鲍勃 0.0% 安娜 0.0% 李 0.0% 亨利 0.0% 汤米 0.0% 保罗 0.0% 山姆 0.0% 马 0.0% 迈克尔 0.0% 詹姆斯 0.0% 迈克 0.0% 凯文 0.0% 比利 0.0% 哈里 0.0% 莎拉 0.0% 阿门 0.0% 克里斯 0.0% 西蒙 0.0% 维加斯 0.0% 凯特 0.0% 吉姆 0.0% 哈利 0.0% 拉斯维加斯 0.0% 黄 0.0% 後 0.0% 马丁 0.0% 亚瑟 0.0% 威廉 0.0% 凯蒂 0.0% 陈 0.0% 华生 0.0% 崔 0.0% 托尼 0.0% 安迪 0.0% 查尔斯 0.0% 希特勒 0.0% 肖恩 0.0% 鲍尔 0.0% 麦克斯 0.0% 珍妮 0.0% 白 0.0% 胡 0.0% 杰夫 0.0% 琼斯 0.0% 凯尔 0.0% 安妮 0.0% 泰勒 0.0% 戴夫 0.0% 霍华德 0.0% 鲍比 0.0% 罗杰 0.0% 丹尼斯 0.0% 萨 0.0% 莉莉 0.0% 斯坦 0.0% 凯瑟琳 0.0% 全美超 0.0% 卡拉 0.0% 罗伯特 0.0% 迪克 0.0% 玛 0.0% 亚历克斯 0.0% 丹尼尔 0.0% 杰瑞 0.0% 史蒂夫 0.0% 杰西 0.0% 伊丽莎白 0.0% 克罗伊 0.0% 海伦 0.0% 威利 0.0% 泰德 0.0% 艾米 0.0% 琳达 0.0%  Locations  美国 0.04% 纽约 0.01% 洛杉矶 0.01% 英国 0.01% 法国 0.01% 中国 0.01% 意大利 0.01% 日本 0.01% 墨西哥 0.01% 好莱坞 0.01% 伦敦 0.0% 德国 0.0% 华盛顿 0.0% 巴黎 0.0% 罗马 0.0% 加州 0.0% 非洲 0.0% 迈阿密 0.0% 印度 0.0% 加拿大 0.0% 欧洲 0.0% 芝加哥 0.0% 西班牙 0.0% 俄国 0.0% 俄罗斯 0.0% 爱尔兰 0.0% 伊拉克 0.0% 希腊 0.0% 汉堡 0.0% 苏格兰 0.0% 波士顿 0.0% 印第安 0.0% 古巴 0.0% 韩国 0.0% 夏威夷 0.0% 东京 0.0% 曼哈顿 0.0% 巴斯 0.0% 埃及 0.0% 柏林 0.0% 旧金山 0.0% 撒旦 0.0% 苏联 0.0% 费城 0.0% 佛罗里达 0.0% 百老汇 0.0% 巴西 0.0% 克鲁 0.0% 亚洲 0.0% 西雅图 0.0% 新泽西 0.0% 哈佛 0.0% 德州 0.0% 越南 0.0% 布鲁克林 0.0% 朝鲜 0.0% 雷斯 0.0% 荷兰 0.0% 英格兰 0.0% 阿曼 0.0% 以色列 0.0% 汉城 0.0% 阿富汗 0.0% 耶鲁 0.0% 瑞士 0.0% 维多利亚 0.0% 莫斯科 0.0% 加利福尼亚 0.0% 阿拉伯 0.0% 巴基斯坦 0.0% 哥伦比亚 0.0% 太平洋 0.0% 圣地亚哥 0.0% 赫尔 0.0% 澳大利亚 0.0% 底特律 0.0% 波兰 0.0% 达拉斯 0.0% 阿姆斯特丹 0.0% 比萨 0.0% 巴库 0.0% 亚特兰大 0.0% 泰国 0.0% 香港 0.0% 丹佛 0.0% 土耳其 0.0% 布拉格 0.0% 阿根廷 0.0% 尼斯 0.0% 巴马 0.0% 瑞典 0.0% 阿拉斯加 0.0% 加里 0.0% 波斯 0.0% 新奥尔良 0.0% 威尼斯 0.0% 阿拉 0.0% 美洲 0.0% 麦迪逊 0.0% 秘鲁 0.0%  Organizations  联合国 0.0% 安全部 0.0% 安全局 0.0% 国防部 0.0% 国务院 0.0% 内务部 0.0% 司法部 0.0% 美国队 0.0% 北约 0.0% 财政部 0.0% 卫生部 0.0% 人事部 0.0% 外交部 0.0% 陶 0.0% 中国政府 0.0% 农业部 0.0% 摩萨德 0.0% 教育部 0.0% 交通部 0.0% 国家安全部 0.0% 气象局 0.0% 美联储 0.0% 德国队 0.0% 强生 0.0% 能源部 0.0% 美联社 0.0% 非国大 0.0% 世界银行 0.0% 工大 0.0% 瑞典队 0.0% 环境保护局 0.0% 科大 0.0% 全国委员会 0.0% 公安部 0.0% 国际货币基金组织 0.0% 城市规划委员会 0.0% 巴解组织 0.0% 文学院 0.0% 那不勒斯 0.0% 中国队 0.0% 审计局 0.0% 富士通 0.0% 最高法院 0.0% 法国队 0.0% 路透社 0.0% 东方航空 0.0% 商业委员会 0.0% 国家电网 0.0% 档案局 0.0% 非行 0.0% 韩国队 0.0% 世贸组织 0.0% 同盟会 0.0% 唐 0.0% 文化部 0.0% 新华社 0.0% 欧佩克 0.0% 监察部 0.0% 邹 0.0% 世界贸易组织 0.0% 东方集团 0.0% 中国人民解放军 0.0% 中央委员会 0.0% 党中央 0.0% 商业部 0.0% 啤酒花 0.0% 园林局 0.0% 教育委员会 0.0% 旅游局 0.0% 林业部 0.0% 水利部 0.0% 海关总署 0.0% 联合国安理会 0.0% 计划委员会 0.0% 计划生育委员会 0.0%  nz  英语 0.0% 法语 0.0% 西班牙语 0.0% 犹太 0.0% 沃尔特 0.0% 哈罗 0.0% 奥斯卡 0.0% 探索者 0.0% 拉丁 0.0% 梅林 0.0% 穆斯林 0.0% 福特 0.0% 博客 0.0% 英文 0.0% 德语 0.0% 劳拉 0.0% 基督 0.0% 道奇 0.0% 俄语 0.0% 华尔兹 0.0% 天主教 0.0% 基督教 0.0% 柯达 0.0% 飞龙 0.0% 海选 0.0% 林肯 0.0% 麻省 0.0% 国安 0.0% 可乐 0.0% 中文 0.0% 葡萄牙语 0.0% 日语 0.0% 腾达 0.0% 墨西哥人 0.0% 贝尔 0.0% 迪斯尼 0.0% 杜克 0.0% 三明治 0.0% 亚美尼亚人 0.0% 奔驰 0.0% 犹太教 0.0% 希伯来 0.0% 格力 0.0% 麦当劳 0.0% 华纳 0.0% 宝马 0.0% 卡迪拉克 0.0% 拉丁文 0.0% 土著 0.0% 希腊人 0.0% 奥林匹克 0.0% 法拉利 0.0% 星巴克 0.0% 环球 0.0% 帕特里克 0.0% 美国人 0.0% 东东 0.0% 哈勃 0.0% 大韩 0.0% 乌托邦 0.0% 波波 0.0% 夏普 0.0% 纳西 0.0% 诺贝尔奖 0.0% 宏 0.0% 普尔 0.0% 泰坦尼克号 0.0% 塔利班 0.0% 阿尔法 0.0% 多利 0.0% 法西斯 0.0% 天马 0.0% 波多黎各人 0.0% 奥斯卡奖 0.0% 斯安 0.0% 索尼 0.0% 萨尔瓦多人 0.0% 通用 0.0% 海尔 0.0% 伊利 0.0% 伊斯兰 0.0% 大众 0.0% 来复枪 0.0% 沃尔玛 0.0% 赛特 0.0% 幻像 0.0% 卡利 0.0% 方舟 0.0% 德赛 0.0% 灵光 0.0% 阿拉伯语 0.0% 神龙 0.0% 维克斯 0.0% 沙林 0.0% 海地人 0.0% 联想 0.0% 伊斯兰教 0.0% 可口可乐 0.0% 夏利 0.0% 红牛 0.0%  o  哦 0.12% 喔 0.02% 哇 0.01% 哈哈 0.0% 嘻 0.0% 哈哈哈 0.0% 呜 0.0% 砰 0.0% 呵呵 0.0% 咪咪 0.0% 嘿嘿 0.0% 嗒 0.0% 铃 0.0% 刷 0.0% 咕 0.0% 嘣 0.0% 嘎 0.0% 喵 0.0% 哒 0.0% 轰 0.0% 嘿嘿嘿 0.0% 嗡嗡 0.0% 嘟 0.0% 啪 0.0% 呼 0.0% 噗 0.0% 丁 0.0% 叮当 0.0% 哇哇 0.0% 咔 0.0% 咯咯 0.0% 噢噢 0.0% 咕噜 0.0% 唧唧 0.0% 叽 0.0% 咚 0.0% 呼呼 0.0% 哄 0.0% 咩 0.0% 吱吱 0.0% 叭 0.0% 嘭 0.0% 咔嚓 0.0% 叮咚 0.0% 嘟嘟 0.0% 吱 0.0% 呼啦 0.0% 梆 0.0% 咝 0.0% 叽叽喳喳 0.0% 嘎嘎 0.0% 哞 0.0% 乓 0.0% 呜呜 0.0% 嘶 0.0% 咕咕 0.0% 呼噜 0.0% 哗 0.0% 啧啧 0.0% 嗖 0.0% 砰砰 0.0% 隆隆 0.0% 呀呀 0.0% 嘀嗒 0.0% 叽叽 0.0% 哒哒 0.0% 喃喃 0.0% 啪啪 0.0% 扑通 0.0% 轧 0.0% 嘶嘶 0.0% 当当 0.0% 铛 0.0% 沙沙 0.0% 轰轰 0.0% 啧 0.0% 喀嚓 0.0% 嘀嘀 0.0% 嘭嘭 0.0% 咚咚 0.0% 怦怦 0.0% 咯吱 0.0% 哧 0.0% 叮叮当当 0.0% 哇啦 0.0% 嘤 0.0% 噌 0.0% 噼啪 0.0% 叽里呱啦 0.0% 咿呀 0.0% 哐 0.0% 喀 0.0% 刷刷 0.0% 哗啦 0.0% 唧唧喳喳 0.0% 嚓 0.0% 轰隆 0.0% 嗡 0.0% 潺潺 0.0% 吧哒 0.0%  p  在 1.27% 对 0.38% 把 0.36% 给 0.3% 被 0.2% 跟 0.15% 因为 0.15% 从 0.14% 为 0.08% 用 0.08% 当 0.07% 比 0.06% 为了 0.05% 向 0.05% 以 0.04% 就 0.04% 像 0.03% 与 0.03% 和 0.03% 关于 0.03% 于 0.03% 到 0.02% 往 0.02% 由 0.02% 将 0.02% 同 0.02% 除了 0.02% 对于 0.01% 通过 0.01% 作为 0.01% 替 0.01% 按 0.01% 根据 0.01% 因 0.01% 自 0.01% 自从 0.01% 经过 0.01% 朝 0.01% 靠 0.0% 离 0.0% 至 0.0% 随 0.0% 据 0.0% 叫 0.0% 凭 0.0% 按照 0.0% 经 0.0% 由于 0.0% 针对 0.0% 趁 0.0% 至于 0.0% 照 0.0% 随着 0.0% 除 0.0% 有关 0.0% 沿着 0.0% 基于 0.0% 每当 0.0% 鉴于 0.0% 顺着 0.0% 照着 0.0% 朝着 0.0% 依 0.0% 沿 0.0% 距 0.0% 乘 0.0% 距离 0.0% 借 0.0% 正当 0.0% 当着 0.0% 依照 0.0% 凭借 0.0% 趁着 0.0% 凭着 0.0% 待 0.0% 向着 0.0% 连同 0.0% 依据 0.0% 自打 0.0% 乘着 0.0% 经由 0.0% 遵照 0.0% 本着 0.0% 不比 0.0% 缘 0.0% 缘于 0.0% 为着 0.0% 乎 0.0% 较 0.0% 较之 0.0% 及至 0.0% 因着 0.0%  q  个 0.52% 些 0.06% 件 0.06% 位 0.05% 种 0.05% 条 0.04% 份 0.03% 张 0.03% 号 0.03% 名 0.03% 块 0.03% 家 0.03% 只 0.02% 段 0.02% 辆 0.02% 句 0.02% 起 0.02% 杯 0.01% 部 0.01% 美元 0.01% 季 0.01% 片 0.01% 集 0.01% 套 0.01% 支 0.01% 间 0.01% 座 0.01% 本 0.01% 点儿 0.01% 群 0.01% 颗 0.01% 根 0.01% 笔 0.01% 口 0.01% 项 0.01% 封 0.01% 头 0.01% 台 0.01% 英里 0.01% 员 0.01% 元 0.01% 堆 0.01% 瓶 0.0% 克 0.0% 米 0.0% 艘 0.0% 倍 0.0% 帮 0.0% 英尺 0.0% 处 0.0% 莱 0.0% 对 0.0% 组 0.0% 类 0.0% 磅 0.0% 眼 0.0% 首 0.0% 票 0.0% 篇 0.0% 所 0.0% 面 0.0% 匹 0.0% 行 0.0% 样 0.0% 页 0.0% 栋 0.0% 幅 0.0% 双 0.0% 扇 0.0% 美金 0.0% 伙 0.0% 队 0.0% 具 0.0% 码 0.0% 方 0.0% 批 0.0% 身 0.0% 级 0.0% 枚 0.0% 剂 0.0% 节 0.0% 棵 0.0% 尺 0.0% 章 0.0% 幕 0.0% 角 0.0% 英寸 0.0% 代 0.0% 桩 0.0% 里 0.0% 公里 0.0% 门 0.0% 股 0.0% 卷 0.0% 袋 0.0% 丝 0.0% 系列 0.0% 刀 0.0% 周年 0.0% 班 0.0%  qt  点 0.13% 天 0.12% 年 0.07% 岁 0.03% 分钟 0.03% 周 0.02% 分 0.01% 会儿 0.0% 秒 0.0% 辈子 0.0% 夜 0.0% 日 0.0% 席 0.0% 光年 0.0% 阵子 0.0% 宿 0.0% 下 0.0% 载 0.0% 刻 0.0% 秒钟 0.0% 阵 0.0%  qv  次 0.13% 场 0.03% 回 0.02% 步 0.01% 遍 0.01% 把 0.01% 顿 0.01% 声 0.01% 架 0.01% 轮 0.01% 层 0.0% 度 0.0% 道 0.0% 趟 0.0% 圈 0.0% 局 0.0% 期 0.0% 盘 0.0% 拳 0.0% 任 0.0% 通 0.0% 番 0.0% 餐 0.0% 路 0.0% 胎 0.0% 茬 0.0% 遭 0.0% 和 0.0% 人次 0.0% 场次 0.0% 巡 0.0% 架次 0.0%  r  我 5.01% 你 3.96% 他 1.19% 我们 1.11% 这 0.86% 什么 0.71% 她 0.66% 那 0.5% 他们 0.42% 你们 0.34% 这个 0.27% 怎么 0.27% 这样 0.19% 自己 0.17% 这里 0.16% 谁 0.16% 为什么 0.15% 这么 0.15% 它 0.15% 那个 0.12% 这些 0.11% 那么 0.08% 那些 0.08% 这儿 0.07% 哪 0.07% 一切 0.06% 怎么样 0.06% 那样 0.05% 大家 0.05% 您 0.05% 那里 0.05% 任何 0.04% 哪儿 0.04% 这种 0.04% 其他 0.04% 哪里 0.04% 别人 0.03% 如何 0.03% 那儿 0.03% 每 0.03% 多少 0.03% 它们 0.03% 有人 0.03% 怎样 0.03% 该 0.03% 她们 0.03% 有些 0.03% 每个 0.03% 另 0.03% 如此 0.02% 此 0.02% 怎么办 0.02% 那边 0.02% 咱们 0.02% 别的 0.02% 这边 0.01% 其中 0.01% 啥 0.01% 每天 0.01% 那种 0.01% 各位 0.01% 本 0.01% 任何人 0.01% 多久 0.01% 这次 0.01% 那时 0.01% 哪个 0.01% 其 0.01% 什么样 0.01% 之一 0.01% 另外 0.01% 某个 0.01% 为何 0.01% 某 0.01% 那天 0.01% 其它 0.01% 某种 0.01% 之类 0.01% 自我 0.01% 彼此 0.01% 每次 0.01% 某些 0.0% 何 0.0% 有的 0.0% 各 0.0% 怎 0.0% 我会 0.0% 某人 0.0% 各种 0.0% 何时 0.0% 每年 0.0% 他人 0.0% 咱 0.0% 你家 0.0% 什么的 0.0% 每周 0.0% 自 0.0% 本地 0.0% 人家 0.0% 本人 0.0%  s  一起 0.07% 身上 0.02% 现场 0.01% 家里 0.01% 身边 0.01% 路上 0.01% 心里 0.01% 手上 0.0% 脸上 0.0% 地上 0.0% 手里 0.0% 街上 0.0% 车上 0.0% 世上 0.0% 城里 0.0% 当地 0.0% 船上 0.0% 网上 0.0% 楼上 0.0% 太空 0.0% 台上 0.0% 嘴里 0.0% 心中 0.0% 地下 0.0% 楼下 0.0% 门口 0.0% 屋里 0.0% 体内 0.0% 墙上 0.0% 手中 0.0% 南方 0.0% 空中 0.0% 隔壁 0.0% 眼前 0.0% 桌上 0.0% 街头 0.0% 眼里 0.0% 幕后 0.0% 深处 0.0% 天上 0.0% 手下 0.0% 海边 0.0% 边境 0.0% 山上 0.0% 路边 0.0% 眼中 0.0% 市中心 0.0% 北方 0.0% 乡下 0.0% 市区 0.0% 海上 0.0% 国内 0.0% 窗外 0.0% 门外 0.0% 窗口 0.0% 途中 0.0% 国外 0.0% 前方 0.0% 西方 0.0% 家中 0.0% 湖边 0.0% 身旁 0.0% 水中 0.0% 此地 0.0% 河里 0.0% 前线 0.0% 树上 0.0% 一块 0.0% 场上 0.0% 河边 0.0% 郊区 0.0% 东方 0.0% 机上 0.0% 西北 0.0% 室内 0.0% 海外 0.0% 门前 0.0% 户外 0.0% 上空 0.0% 水下 0.0% 水上 0.0% 野外 0.0% 心上 0.0% 怀里 0.0% 此处 0.0% 一块儿 0.0% 西南 0.0% 海里 0.0% 肩上 0.0% 东北 0.0% 远处 0.0% 口中 0.0% 耳边 0.0% 东区 0.0% 山里 0.0% 胸前 0.0% 高空 0.0% 中场 0.0% 岸边 0.0% 心头 0.0%  Times  现在 0.26% 今天 0.07% 今晚 0.04% 明天 0.03% 晚上 0.03% 当时 0.02% 年 0.02% 点 0.02% 刚才 0.02% 过去 0.02% 最近 0.02% 昨晚 0.02% 早上 0.01% 昨天 0.01% 未来 0.01% 下午 0.01% 目前 0.01% 月 0.01% 后来 0.01% 周末 0.01% 下次 0.01% 圣诞 0.01% 分 0.01% 去年 0.01% 今年 0.01% 日 0.01% 秒 0.0% 上次 0.0% 圣诞节 0.0% 上周 0.0% 那天 0.0% 夜晚 0.0% 夏天 0.0% 早晨 0.0% 一分 0.0% 将来 0.0% 当初 0.0% 周五 0.0% 一整天 0.0% 午夜 0.0% 凌晨 0.0% 小时候 0.0% 明早 0.0% 周六 0.0% 明晚 0.0% 平时 0.0% 中午 0.0% 明年 0.0% 上午 0.0% 假期 0.0% 白天 0.0% 如今 0.0% 一时 0.0% 感恩节 0.0% 星期五 0.0% 半夜 0.0% 星期六 0.0% 现代 0.0% 星期天 0.0% 周日 0.0% 新年 0.0% 春天 0.0% 当晚 0.0% 冬天 0.0% 当年 0.0% 从前 0.0% 童年 0.0% 星期一 0.0% 周二 0.0% 三点 0.0% 瞬间 0.0% 一秒 0.0% 周四 0.0% 往常 0.0% 今日 0.0% 一早 0.0% 以往 0.0% 八点 0.0% 暑假 0.0% 当天 0.0% 今后 0.0% 夜里 0.0% 情人节 0.0% 一点 0.0% 往后 0.0% 星期二 0.0% 会上 0.0% 周一 0.0% 星期三 0.0% 六点 0.0% 酒后 0.0% 那年 0.0% 星期四 0.0% 四分 0.0% 上个月 0.0% 秋天 0.0% 九点 0.0% 眼前 0.0% 黎明 0.0% 今夜 0.0%  tg  晚 0.02% 早 0.01% 夜 0.01% 今 0.0% 现 0.0% 清 0.0% 朝 0.0% 夏 0.0% 汉 0.0% 明 0.0% 古 0.0% 唐 0.0% 春 0.0% 冬 0.0% 昔 0.0% 昏 0.0% 楚 0.0% 秋 0.0% 午 0.0% 夕 0.0% 晨 0.0% 宵 0.0% 商 0.0% 宋 0.0% 旦 0.0% 暮 0.0% 泰 0.0% 秦 0.0% 魏 0.0% 昨 0.0% 元 0.0% 昼 0.0% 晓 0.0% 齐 0.0% 吴 0.0% 晋 0.0% 辽 0.0% 梁 0.0% 周 0.0% 晌 0.0% 暑 0.0% 殷 0.0% 郑 0.0% 金 0.0% 隋 0.0%  u  的 5.02% 了 0.87% 着 0.3% 过 0.26% 得 0.2% 一样 0.06% 所 0.05% 之 0.05% 地 0.04% 等 0.02% 连 0.02% 来说 0.02% 等等 0.02% 似的 0.01% 为止 0.01% 来 0.0% 般 0.0% 的话 0.0% 而言 0.0% 不过 0.0% 极了 0.0% 一般 0.0% 样 0.0% 与否 0.0% 给 0.0% 起见 0.0% 在内 0.0% 来讲 0.0% 来看 0.0% 来着 0.0% 而已 0.0% 可言 0.0% 说来 0.0% 似 0.0% 乎 0.0% 而外 0.0% 开外 0.0% 其 0.0% 热心 0.0% 也 0.0% 一个样 0.0% 看 0.0% 者 0.0% 云云 0.0% 而 0.0%  Verbs  是 2.83% 有 0.86% 会 0.79% 要 0.71% 说 0.68% 想 0.63% 知道 0.59% 来 0.51% 能 0.5% 去 0.49% 到 0.4% 让 0.37% 做 0.36% 看 0.31% 可以 0.24% 没有 0.22% 没 0.21% 走 0.19% 告诉 0.18% 听 0.16% 谢谢 0.15% 觉得 0.15% 找 0.14% 喜欢 0.14% 是的 0.13% 出 0.13% 需要 0.13% 干 0.12% 死 0.12% 得 0.12% 可 0.12% 像 0.12% 可能 0.11% 应该 0.11% 起来 0.11% 还有 0.11% 上 0.1% 叫 0.1% 拿 0.1% 开始 0.1% 错 0.09% 打 0.09% 带 0.09% 请 0.09% 帮 0.09% 爱 0.09% 见 0.09% 吃 0.08% 开 0.08% 看到 0.08% 用 0.08% 等 0.08% 下 0.08% 相信 0.08% 认为 0.08% 该 0.07% 希望 0.07% 看看 0.07% 就是 0.07% 回 0.07% 明白 0.07% 杀 0.07% 行 0.07% 回来 0.07% 发生 0.07% 找到 0.07% 过 0.06% 准备 0.06% 出来 0.06% 对不起 0.06% 问 0.06% 离开 0.06% 住 0.06% 发现 0.06% 放 0.06% 为 0.06% 搞 0.05% 进 0.05% 以为 0.05% 给 0.05% 过来 0.05% 掉 0.05% 买 0.05% 坐 0.04% 起 0.04% 记得 0.04% 写 0.04% 穿 0.04% 弄 0.04% 算 0.04% 继续 0.04% 送 0.04% 玩 0.04% 担心 0.04% 认识 0.04% 下来 0.04% 跑 0.04% 成 0.04% 够 0.04% 跟 0.04%  vn  工作 0.08% 生活 0.04% 比赛 0.03% 行动 0.02% 表演 0.01% 有关 0.01% 犯罪 0.01% 活动 0.01% 选择 0.01% 调查 0.01% 帮助 0.01% 表现 0.01% 训练 0.01% 合作 0.01% 爱 0.01% 测试 0.01% 服务 0.01% 研究 0.0% 进展 0.0% 反应 0.0% 保护 0.0% 检查 0.0% 挑战 0.0% 影响 0.0% 运动 0.0% 准备 0.0% 治疗 0.0% 感受 0.0% 联系 0.0% 爆炸 0.0% 变化 0.0% 设计 0.0% 威胁 0.0% 控制 0.0% 赛 0.0% 演出 0.0% 谈话 0.0% 谋杀 0.0% 教育 0.0% 同性恋 0.0% 投票 0.0% 袭击 0.0% 监控 0.0% 大赛 0.0% 信任 0.0% 移动 0.0% 管理 0.0% 伤害 0.0% 胜利 0.0% 决赛 0.0% 战斗 0.0% 审判 0.0% 飞行 0.0% 攻击 0.0% 分析 0.0% 存在 0.0% 交流 0.0% 交易 0.0% 竞争 0.0% 发展 0.0% 支持 0.0% 旅行 0.0% 解释 0.0% 试验 0.0% 惩罚 0.0% 信仰 0.0% 广播 0.0% 死亡 0.0% 考试 0.0% 主管 0.0% 演讲 0.0% 承诺 0.0% 进步 0.0% 检测 0.0% 实验 0.0% 报警 0.0% 娱乐 0.0% 投资 0.0% 聚会 0.0% 冲突 0.0% 结婚 0.0% 录音 0.0% 斗争 0.0% 委托 0.0% 欢迎 0.0% 出口 0.0% 奖励 0.0% 竞选 0.0% 误会 0.0% 到来 0.0% 回忆 0.0% 交往 0.0% 咨询 0.0% 联络 0.0% 安排 0.0% 游泳 0.0% 指控 0.0% 杀人 0.0% 诉讼 0.0% 谈判 0.0%  y  了 1.94% 吗 0.74% 吧 0.58% 啊 0.38% 呢 0.23% 么 0.12% 呃 0.07% 嘛 0.05% 噢 0.05% 啦 0.04% 呀 0.03% 哇 0.02% 而已 0.02% 极了 0.02% 耶 0.01% 哪 0.01% 唔 0.01% 呐 0.0% 罢了 0.0% 咯 0.0% 尔 0.0% 喽 0.0% 哟 0.0% 来 0.0% 兮 0.0% 来着 0.0% 着呢 0.0% 呗 0.0% 哩 0.0% 者 0.0% 也好 0.0% 呵 0.0% 就是了 0.0% 耳 0.0% 乎 0.0% 咧 0.0% 呕 0.0% 也 0.0% 啵 0.0% 夫 0.0% 也罢 0.0% 嘞 0.0% 否 0.0% 哉 0.0% 矣 0.0% 不成 0.0% 焉 0.0% 罢 0.0% 便了 0.0% 则已 0.0% 邪 0.0% 得了 0.0% 煞 0.0% 着哪 0.0%  z  正好 0.01% 最佳 0.0% 小小的 0.0% 无比 0.0% 永恒 0.0% 小小 0.0% 十足 0.0% 非凡 0.0% 依旧 0.0% 活生生 0.0% 好好 0.0% 血腥 0.0% 冰冷 0.0% 透顶 0.0% 闪闪 0.0% 满满 0.0% 重重 0.0% 轻轻 0.0% 半死 0.0% 痴呆 0.0% 火热 0.0% 漫漫 0.0% 忽悠 0.0% 深深 0.0% 无穷 0.0% 醉醺醺 0.0% 安然 0.0% 漆黑 0.0% 长长的 0.0% 飞快 0.0% 实实在在 0.0% 老老实实 0.0% 傻乎乎 0.0% 毛茸茸 0.0% 眼睁睁 0.0% 急速 0.0% 清清楚楚 0.0% 乱糟糟 0.0% 无瑕 0.0% 不祥 0.0% 熊熊 0.0% 不朽 0.0% 疯疯癫癫 0.0% 短短 0.0% 赤裸裸 0.0% 高高的 0.0% 快捷 0.0% 孤零零 0.0% 干干净净 0.0% 茫茫 0.0% 短短的 0.0% 随随便便 0.0% 优良 0.0% 光光 0.0% 笔直 0.0% 假惺惺 0.0% 冲天 0.0% 平平 0.0% 匆匆 0.0% 哭哭啼啼 0.0% 汪汪 0.0% 空荡荡 0.0% 空空 0.0% 舒舒服服 0.0% 无恙 0.0% 辛辛苦苦 0.0% 舒缓 0.0% 血淋淋 0.0% 冰凉 0.0% 垂危 0.0% 多变 0.0% 无边 0.0% 死死的 0.0% 滚滚 0.0% 热腾腾 0.0% 多多 0.0% 灰暗 0.0% 不凡 0.0% 滚烫 0.0% 静静地 0.0% 静静的 0.0% 普普通通 0.0% 斑斑 0.0% 安安静静 0.0% 累累 0.0% 飘飘然 0.0% 区区 0.0% 简简单单 0.0% 亮晶晶 0.0% 奔放 0.0% 久远 0.0% 沉寂 0.0% 臭烘烘 0.0% 悄悄的 0.0% 湿漉漉 0.0% 特异 0.0% 马马虎虎 0.0% 依然 0.0% 冷冰冰 0.0% 漂漂亮亮 0.0%  ","date":"2022-04-06T00:00:00Z","image":"https://slc.is/images/chinese.webp","permalink":"https://slc.is/archive/chinese/","title":"Chinese Word List"},{"content":"On 28 March 2022, a reboot of Place was announced. It began on 1 April 2022, and lasted for four days, including two expansions across the experiment. As of Sunday night, 3 April, nearly 72 million tiles were placed by over 6 million users, at a pace of more than 2.5 million tiles placed per hour; it was a sixfold increase in the number of users on Reddit between the two experiments, including a 4.5-fold increase in tiles being placed. Unlike in 2017, individual subreddits immediately began to coordinate pixel art, and large communities were formed on Discord and Twitch in attempts to create, defend, and destroy territory. Different communities collaborated and formed alliances through Discord as well as subreddits. Large streamers on Twitch also participated by instructing thousands (in some cases hundreds of thousands) of their viewers to mark their logos and symbols. On both the second and third days, Reddit doubled the canvas size and expanded the color palette. On the final day, before the 2022 Place reboot ended, users were suddenly restricted to placing white pixels; therefore, the entire canvas was gradually filled with a white void, returning it to its original blank state.\nThere were many griefs and reprisals from various factions, with Twitch streamer xQcOW (a.k.a. Félix Lengyel) being particularly impactful (at one point peaking with more than 233,000 live concurrent viewers, a personal record). He received death threats for griefing, saying that he had received more death threats in a single hour than he had received in six years of streaming.\nPlace was immediately used to express support for Ukraine in the ongoing Russo-Ukrainian War. Ukrainian president Volodymyr Zelenskyy was depicted with sunglasses, and it was suspected that Russian bots were used in a vain attempt to deface Zelenskyy\u0026rsquo;s visage, although this attack was thwarted.\nReferences to popular culture and Internet memes were commonly visible. Similar to 2017, much of the artwork was nationalistic. These often combined flags with their country\u0026rsquo;s landmarks, celebrities, technology, or popular exports. This was particularly evident in the case of France, the United States, and Germany, while Dutch and Turkish Redditors collaborated to make real life paintings and a mural of Barış Manço. A flag of Canada was the subject of humor with regards to the difficulties of the design of the maple leaf.\n2022 also saw the return of the Blue Corner, the void, the rainbow road, LGBT flags, and the green lattice (although all in diminished capacity). There was another prominent promotion for the 2007 video game osu!.\nThe experiment was praised for creating a sense of collectivism at a time when the Internet was to a great extent fractured and polarized. However, censorship and admin abuse were noted, with one piece of art depicting a scantily clad woman, encouraged by Twitch streamer xQc, being censored. Bot usage was also again criticized. The Washington Post compared Place to The Million Dollar Homepage, a one-million-pixel website where each pixel was sold for a dollar in 2005.\n Wikipedia  ","date":"2022-04-05T00:00:00Z","image":"https://slc.is/images/place.png","permalink":"https://slc.is/archive/place/","title":"r/place"},{"content":"Have you ever wanted to know what the most mean color is? Red might come to mind — a fiery and belligerent color. But I\u0026rsquo;ll do one better! I\u0026rsquo;ll give you the color vector that\u0026rsquo;s closest to every other color vector.\nHere, the most average and mean color can be determined with word2vec and vector averaging.\nProcess  Load the word2vec model Load the list of colors Sum the vectors of each color together Divide by the number of colors Find the color vector with the largest cosine similarity to that vector  Python 1  pip install gensim   1 2  import numpy import gensim.downloader   1 2 3 4 5 6 7 8 9 10 11 12  queen_values = {} for name in gensim.downloader.info()[\u0026#39;models\u0026#39;].keys(): try: model = gensim.downloader.load(name) t = model.most_similar(positive=[\u0026#39;king\u0026#39;, \u0026#39;woman\u0026#39;], negative=[\u0026#39;man\u0026#39;]) for n, v in t: if n == \u0026#39;queen\u0026#39;: queen_values[name] = v print(t[0]) except: pass   ('queen', 0.7786749005317688) ('queen', 0.7118193507194519) ('queen', 0.8523604273796082) ('queen', 0.7698540687561035) ('queen', 0.6978678107261658) ('queen', 0.6713277101516724) ('meets', 0.8841924071311951) ('prince', 0.759779691696167) ('queen', 0.7052316069602966) ('queen', 0.6820898056030273)  1 2 3  best_model = sorted(queen_values, key=queen_values.get, reverse=True)[0] print(\u0026#39;\\n\u0026#39;, best_model) model = gensim.downloader.load(best_model)    glove-wiki-gigaword-50  1 2 3 4 5 6 7 8 9 10  colors = [ \u0026#39;white\u0026#39;, \u0026#39;black\u0026#39;, \u0026#39;silver\u0026#39;, \u0026#39;red\u0026#39;, \u0026#39;maroon\u0026#39;, \u0026#39;purple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;brown\u0026#39;, \u0026#39;beige\u0026#39;, \u0026#39;yellow\u0026#39;, \u0026#39;gold\u0026#39;, \u0026#39;tan\u0026#39;, \u0026#39;green\u0026#39;, \u0026#39;lime\u0026#39;, \u0026#39;olive\u0026#39;, \u0026#39;blue\u0026#39;, \u0026#39;cyan\u0026#39;, \u0026#39;teal\u0026#39;, \u0026#39;indigo\u0026#39;, \u0026#39;lavender\u0026#39;, \u0026#39;pink\u0026#39;, \u0026#39;violet\u0026#39;, \u0026#39;magenta\u0026#39;, \u0026#39;fuchsia\u0026#39;, ]   1 2 3 4 5 6 7 8  # start by averaging grays avg_vector = (model[\u0026#39;gray\u0026#39;] + model[\u0026#39;grey\u0026#39;]) / 2 for color in colors: avg_vector += model[color] # divide by the number of colors avg_vector /= (len(colors) + 1)   1 2 3 4 5 6  avg_colors = {} for color in colors: sim = numpy.dot(avg_vector, model[color]) / \\ (numpy.linalg.norm(avg_vector) * numpy.linalg.norm(model[color])) avg_colors[color] = sim   1 2  for color in sorted(avg_colors, key=avg_colors.get, reverse=True): print(color, \u0026#39;\\t\\t\u0026#39;, avg_colors[color])   purple\t0.92791396 pink\t0.9113098 blue\t0.9093884 yellow\t0.88690674 red\t0.872676 green\t0.8654766 orange\t0.84672266 black\t0.83403736 white\t0.8287787 lavender\t0.81729794 maroon\t0.7757962 fuchsia\t0.7409902 brown\t0.7358376 olive\t0.73582804 magenta\t0.68170786 violet\t0.6786235 silver\t0.6677471 beige\t0.66110957 lime\t0.6299113 indigo\t0.5789356 gold\t0.56747013 tan\t0.5436225 teal\t0.517831 cyan\t0.5167587  Conclusion There isn\u0026rsquo;t any purpose for this post, but it\u0026rsquo;s interesting to know that the meanest color is purple. I mostly wanted to start thinking about fun ways to use word2vec. I think I\u0026rsquo;d like to make a tool to assist writers in some way. I\u0026rsquo;m not sure what I\u0026rsquo;ll do with it, but I\u0026rsquo;m sure it\u0026rsquo;ll be fun.\n","date":"2022-03-24T00:00:00Z","image":"https://slc.is/images/purple.webp","permalink":"https://slc.is/archive/meancolor/","title":"The Meanest Color"},{"content":"This is an extreme guide to generating a PGP key. A simple tutorial will suffice; however, this will help generate the most secure key possible.\nQuantum Background The NIST compared the security of RSA and ECC keys and concluded that, with sufficient lengths in key complexity, either standard will suffice.\nShor\u0026rsquo;s algorithm factors coprime numbers, thus is able to recreate the private key to any RSA-generated public key. This NIST paper, however, asserts that Grover\u0026rsquo;s algorithm can be used to recreate the private key to any ECC-generated public key. While true, this is the same as a brute-force solution since Grover\u0026rsquo;s search would still need $\\sqrt{N}$ qubits to find the private key. Shor\u0026rsquo;s algorithm has a complexity of around $O(\\log{(N)}^3)$ while Grover\u0026rsquo;s has a complexity of $O(\\sqrt{N})$.\nConsidering the difference in algorithmic complexity between Shor\u0026rsquo;s and Grover\u0026rsquo;s algorithms, Shor\u0026rsquo;s poses a more significant threat to RSA encryption than Grover\u0026rsquo;s does to Ed25519. Because of this, I recommend using Ed25519 for a PGP key pair. There are some unsupported theories that elliptic curve cryptography is not secure, but no evidence has been provided for this whatsoever.\nTruly Random Key Seeds Since this post is already looking ahead many decades, the next recommendation will be seeding more entropy into the PRNG that is used to generate the PGP key pair. The elliptic curve generation will pick a random slope for a line to intersect the elliptic curve.\nIn theory, unless your computer is using a truly random source of entropy, the slope of the line could be rederived and the private key could be recreated. This is absurdly unlikely, but the solution is easily implemented, and the time it takes to generate the private key is negligible considering the duration you\u0026rsquo;ll use the key.\nUsing a true random source of entropy could be counting the number of times a geiger counter clicks in a given time frame, or using a hardware random source of entropy like the OneRNG V3. I already have a OneRNG USB, so I\u0026rsquo;ll seed my random numbers with that.\nGenerating a PGP Key Pair First, install GnuPG. This is a free software that can be used to generate PGP keys. It\u0026rsquo;s best to use an open source and offline tool to generate keys since websites and servers could use a variety of methods to store or recreate your private key. Additionally, using a device you know is secure and private is a necessity. A simple way to handle trust is to use a live USB, then assume that there\u0026rsquo;s no hardware-level surveillance on your device.\nOn the download page, it supports common operating systems like Windows, MacOS, and Linux, as well as other platforms.\nSeed the PRNG Find what entropy source GnuPG uses on your operating system. On Linux and MacOS, for example, it\u0026rsquo;s /dev/random. To add entropy to the PRNG, use something like the following command:\n1  rngd -r /path/to/true/randomness   Run GnuPG Once you have installed GnuPG, run gpg --full-generate-key to generate a key pair.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  ~$ gpg --full-generate-key gpg (GnuPG) 2.3.4; Copyright (C) 2021 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Please select what kind of key you want: (1) RSA and RSA (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) (9) ECC (sign and encrypt) *default* (10) ECC (sign only) (14) Existing key from card Your selection? 9 Please select which elliptic curve you want: (1) Curve 25519 *default* (4) NIST P-384 (6) Brainpool P-256 Your selection? 1 Please specify how long the key should be valid. 0 = key does not expire \u0026lt;n\u0026gt; = key expires in n days \u0026lt;n\u0026gt;w = key expires in n weeks \u0026lt;n\u0026gt;m = key expires in n months \u0026lt;n\u0026gt;y = key expires in n years Key is valid for? (0) 0 Key does not expire at all Is this correct? (y/N) y GnuPG needs to construct a user ID to identify your key. Real name: name Email address: name@example.org Comment: hello, world You selected this USER-ID: \u0026#34;name (hello, world) \u0026lt;name@example.org\u0026gt;\u0026#34; Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. gpg: directory \u0026#39;~/name/.gnupg/openpgp-revocs.d\u0026#39; created gpg: revocation certificate stored as \u0026#39;~/name/.gnupg/openpgp-revocs.d/ABCDEFGHIJKLMNOPQRSTUVWXYANDZ01223456789.rev\u0026#39; public and secret key created and signed. pub ed25519 2022-03-24 [SC] ABCDEFGHIJKLMNOPQRSTUVWXYANDZ01223456789 uid name (hello, world) \u0026lt;name@example.org\u0026gt; sub cv25519 2022-03-24 [E]   It\u0026rsquo;s reassuring to see that the recommended settings are what we decided on too! Before moving on, confirm that you now have a PGP key pair. Run --list-keys to view the generated key information.\n1 2 3 4 5 6 7 8 9 10  ~$ gpg --list-keys gpg: checking the trustdb gpg: marginals needed: 3 completes needed: 1 trust model: pgp gpg: depth: 0 valid: 1 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 1u ~/name/.gnupg/pubring.kbx -------------------------------- pub ed25519 2022-03-24 [SC] ABCDEFGHIJKLMNOPQRSTUVWXYANDZ01223456789 uid [ultimate] name (hello, world) \u0026lt;name@example.org\u0026gt; sub cv25519 2022-03-24 [E]   The KEY-ID is the 40 character long fingerprint for the key pair. That ID will be used to specify the key when using it.\nDistributing your public key You might\u0026rsquo;ve seen people link their public key when sharing their email or other contact services. You can distribute your public key in any way you\u0026rsquo;d like, but a good way to do this is to use a PGP key server.\nThere are a few key servers out there, but the most popular are:\n pgp.mit.edu keyserver.ubuntu.com keybase.io keys.openpgp.org keys.mailvelope.com   Key servers use pooling to distribute keys, so you can tend to upload a key once and have it distributed to many people.\n By running gpg --send-keys on your key pair, you can export your public key.\n1  gpg --send-keys ABCDEFGHIJKLMNOPQRSTUVWXYANDZ01223456789   This will export your public key to keys.openpgp.org. The other sites also have an upload pages, so feel free to upload there as well.\nTo easily copy your public key, you can use gpg --export --armor. The --armor flag will export the key in ASCII armored format.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  ~$ gpg --export --armor ABCDEFGHIJKLMNOPQRSTUVWXYANDZ01223456789 -----BEGIN PGP PUBLIC KEY BLOCK----- xjMEYkAMlhYJKwYBBAHaRw8BAQdAija76hmp8YHmr0zHw+Qv1nMNsrqcsRQW cqSlqOEoHCrNHVNwZW5jZXIgQ2h1cmNoaWxsIDxtZUBzbGMuaXM+wqoEExYK ADsWIQQQICP7jXDvYysbVVUKmHynkTkZlQUCYkAMlgIbAwULCQgHAgMiAgEG FQoJCAsCAxYCAQIeBwIXgAAhCRAKmHynkTkZlRYhBBAgI/uNcO9jKxtVVQqY fKeRORmVyFAA/3tWetkYc5XKA8yDYyAeZk8cI0Cy7+1Afm/p2mQQnzXvAQCq QzdsI4owKGbHudz/DKsVKkWDCZ1yfg0FRq52qMnGAM0jU3BlbmNlciBDaHVy Y2hpbGwgPHNwZW5jZUBkdWNrLmNvbT7CqgQTFgoAOxYhBBAgI/uNcO9jKxtV VQqYfKeRORmVBQJiQBKFAhsDBQsJCAcCAyICAQYVCgkICwIDFgIBAh4HAheA ACEJEAqYfKeRORmVFiEEECAj+41w72MrG1VVCph8p5E5GZX5vwEAlCwXoyAp 3bjz6x+rH1N7lqB/oIW4uPwc2bEKu43+POQA/1iqNPNTHjNsewlF19pGLljA xn946DQzWw02ulFqz5sKzjgEYkAMlhIKKwYBBAGXVQEFAQEHQNfziQppiMhw ieGfPpIMopxsvTe/scnI6G7WhoMUPbNEAwEIB8KPBBgWCgAgFiEEECAj+41w 72MrG1VVCph8p5E5GZUFAmJADJYCGwwAIQkQCph8p5E5GZUWIQQQICP7jXDv YysbVVUKmHynkTkZlf+MAQCQByuimb5r1gEPoPQ0+dg0GQP16WYE/EF4WhC3 kJ8QuQD+OW350m6xUU9djl7gmlnBeoNZB7EyoPuGs301bL1v6A8= =QfAK -----END PGP PUBLIC KEY BLOCK-----   Encrypting and Decrypting Data To encrypt, run --encrypt.\n1  gpg --encrypt --recipient ABCDEFGHIJKLMNOPQRSTUVWXYANDZ01223456789 /path/to/file   That will output a file named /path/to/file.gpg. Only you can decrypt that file with your private key. To do that use --decrypt.\n1  gpg --decrypt --recipient ABCDEFGHIJKLMNOPQRSTUVWXYANDZ01223456789 /path/to/file.gpg \u0026gt; /path/to/file   Backing up your private key To backup your private key, run --export-secret-keys.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  ~$ gpg --export-secret-key --armor ABCDEFGHIJKLMNOPQRSTUVWXYANDZ01223456789 -----BEGIN PGP PRIVATE KEY BLOCK----- lFgEYjw1xhYJKwYBBAHaRw8BAQdAwl9GSoOR4E7wUpe1A+Evd+ViiavBUvpvw4nf JLVtm3EAAQCTHWqtqmI1D6ODctaR3UGOLLsGZjUe1WTPP5BDQkVC9w5DtCZuYW1l ciAoaGVsbG8sIHdvcmwpIDxuYW1lQGV4YW1wbGUuY29tPoiUBBMWCgA8FiEE6Vs9 vE0RXucZDtSi9KkIHalB430FAmI8NcYCGwMFCwkIBwIDIgIBBhUKCQgLAgQWAgMB Ah4HAheAAAoJEPSpCB2pQeN967EBANgog1cMEPpNYjXTZzSiOFSK4BmlwV1vghTB 0xq7cLv4APsEmzZK8djumlIAD1Ur0/tgoXVk3Mt6TFibmOpMec2IA5xdBGI8NcYS CisGAQQBl1UBBQEBB0BAsR6gXGOwPgWrfmltMAh7EIZ5J8GYE206qsVhwXzhdgMB CAcAAP9G0xraBqKnhlP5pkjuaxl/qOS+5m4NtJZm4YeJ/o91qBMCiHgEGBYKACAW IQTpWz28TRFe5xkO1KL0qQgdqUHjfQUCYjw1xgIbDAAKCRD0qQgdqUHjfR1RAP9R Lm53gMSLaAAyonnsV49TSK8Lunv9ochw4LlmDc0/wQD8CUO687SXXpAVrJCvcbqu aXfYuB1XxWxcgI5phcv/VAw= =LAxH -----END PGP PRIVATE KEY BLOCK-----   Again, you can pipe this into a file or copy it into a notebook.\nConclusion PGP key generation can be as simple (from generating and managing keys from within Mailvelope) to as complex as you\u0026rsquo;d like. The benefit with more engaged generation is you only need to do it once. After the first time, you can use the same key for any communication. I hope this tutorial is helpful in getting started with or improving your PGP keys.\n","date":"2022-03-23T00:00:00Z","image":"https://slc.is/images/pgp.webp","permalink":"https://slc.is/archive/pgp/","title":"Generating a PGP Key"},{"content":"I\u0026rsquo;m working on an interpreted assembly-like language called Bee Assembly, and the editor\u0026rsquo;s background will change from a light or dark color depending on the user\u0026rsquo;s preference. It uses Simple.css to style the page, so I wanted to avoid adding additional CSS rules. Instead, I opted to find the best red, green, and blue values to maximize the contrast between the white and black backgrounds, and the text. I also found the average gray value. If others want to compute more colors, I\u0026rsquo;ll add them to the list below.\nIn the browser\u0026rsquo;s developer tools, you can hover over elements with the selector and see the contrast rating under Accessability. I simply adjusted the color values to minimize the difference between contrasts over white and black backgrounds.\n   Color Value Contrast     Red (Communist) #ec0000 4.575   Green (Almost Not Green Anymore) #008900 4.575   Blue (Historical Baby Powder) #5f5fff 4.575   Gray (Sonic Silver) #757575 4.575    Interestingly, the average contrast of gray isn\u0026rsquo;t the average of #000000 and #ffffff. I was expecting rgb(255 / 2, 255 / 2, 255 / 2), so #7f7f7f or #808080, but it\u0026rsquo;s rgb(117, 117, 117). Also, blue required adding red and green to reduce the contrast difference since it\u0026rsquo;s practically unreadable without. Red and green could carry their own without mixing. I\u0026rsquo;m curious why these things occur and how they\u0026rsquo;re related.\nI also found a fun site called COLORNAMES that aims to name every hex color. I used it to find the top names for these colors. As of writing this post, 2,896,184 colors have been named, so only $256^3-2,896,184=13,881,032$ are left to go! I took this opportunity to add another color to the list 😉. Should be finished by 2043, so act quick!\nBack on topic, I figured these colors might be useful for some people who just want a single coloring scheme for their website regardless of background colors. Obviously, if the site isn\u0026rsquo;t using a light or dark background, it won\u0026rsquo;t be a good idea to use this, though.\n","date":"2022-03-17T00:00:00Z","image":"https://slc.is/images/rgb.webp","permalink":"https://slc.is/archive/averagergb/","title":"RGB for Average Contrast"},{"content":"In a previous post comparing quantum and avalanche diode methods of true random number generation, an interesting pattern emerged. The quantum random numbers would pass more STS tests than avalanche diode random numbers. Seemingly, the quantum RNG converges to a mean before the diode RNG.\nThis should not be the case since both methods produce true random numbers, so this post will be exploring if this is actually occurring and why.\nCode We\u0026rsquo;ll be using C to do this analysis since it\u0026rsquo;s fast enough for the scale I need.\nThe first task will be opening a file of random data by variable amounts. The fread command takes a filename and number of bytes to read as arguments, so that\u0026rsquo;ll work well.\nSpecifically, the file (let\u0026rsquo;s call it random) needs to be read in incrementing amounts, so the code will look like this:\n1 2 3 4 5 6 7 8 9 10 11  #define MAX_READ 5 #define FILE_NAME \u0026#34;random\u0026#34;  … FILE * stream = fopen(FILE_NAME, \u0026#34;r\u0026#34;); for (unsigned long bytes = 0; bytes \u0026lt; MAX_READ; bytes++) { char buffer[bytes]; fread(\u0026amp;buffer, sizeof(char), bytes, stream); }   This is storing some number of bytes in a buffer array. Now we can iterate through that array to determine the mean. Keep in mind that the theoretical mean is 0.5, so this is eventually going to compare the rates at which quantum and avalanche diode RNGs converge to the theoretical mean.\nWe\u0026rsquo;re iterating through 8 bits at a time, so to find each binary mean, we\u0026rsquo;ll count the number of ones in binary and divide by 8.\n1 2 3 4 5  static inline float binaryMean(char byte) { // https://stackoverflow.com/a/698183 \treturn (byte * 01001001001ULL \u0026amp; 042104210421ULL) % 017 / 8.0; }   The remainder is just reading multiple files and parsing the data as a CSV.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  #include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdlib.h\u0026gt;#define MAX_READ 1000  long double array[2][MAX_READ]; static inline float binaryMean(unsigned char byte) { return (byte * 01001001001ULL \u0026amp; 042104210421ULL) % 017 / 8.0; } void analyzeFile(const char *filename, const char filenum) { FILE *stream = fopen(filename, \u0026#34;r\u0026#34;); for (unsigned long bytes = 1; bytes \u0026lt;= MAX_READ; bytes++) { char buffer[bytes]; fread(\u0026amp;buffer, sizeof(char), bytes, stream); long double mean = 0; for (unsigned long i = 0; i \u0026lt; bytes; i++) { mean += binaryMean(buffer[i]); } array[filenum][bytes - 1] = mean / bytes; } fclose(stream); } int main() { analyzeFile(\u0026#34;../../randomReports/quantum\u0026#34;, 0); analyzeFile(\u0026#34;../../randomReports/avalanche\u0026#34;, 1); printf(\u0026#34;Theoretical Mean,Quantum Mean,Avalanche Diode Mean\\n\u0026#34;); for (unsigned long line = 0; line \u0026lt; MAX_READ; line++) { printf(\u0026#34;0.5,%Lf,%Lf\\n\u0026#34;, array[0][line], array[1][line]); } return 0; }   The astute among us 🔴 will notice that I\u0026rsquo;m printing the data to stout; however, I\u0026rsquo;ll actually pull a *nix and piping the output to gnuplot.\n1  gcc -c -o main.o main.c \u0026amp;\u0026amp; gcc ./main.o -o main \u0026amp;\u0026amp; ./main | cat \u0026gt; /tmp/gnuplotdata.csv \u0026amp;\u0026amp; gnuplot -p -e \u0026#34;set title \u0026#39;Quantum vs. Avalanche\u0026#39;;set xlabel \u0026#39;Average Length\u0026#39;;set ylabel \u0026#39;Average\u0026#39;;set datafile separator \u0026#39;,\u0026#39;;plot for [col=1:3] \u0026#39;/tmp/gnuplotdata.csv\u0026#39; using col with lines title columnheader;pause -1\u0026#34;   That\u0026rsquo;s sus but why have pipes if you never use them? Anyways, we can now begin comparing convergence.\nAnalysis This is the plot outputted by gnuplot and it looks like both RNGs converge to 0.5 at equal rates.\n The differing rates to randomness is deeper than approaching the mean.\n I\u0026rsquo;ll now be using the ent tool for statistical testing.\n1  dd if=../../randomReports/randomData bs=104857601 count=8 iflag=fullblock 2\u0026gt;/dev/null | ent -b   Entropy = 1.000000 bits per bit.\nOptimum compression would reduce the size of this 838860800 bit file by 0 percent.\nChi square distribution for 838860800 samples is 1.41, and randomly would exceed this value 23.50 percent of the times.\nArithmetic mean value of data bits is 0.5000 (0.5 = random).\nMonte Carlo value for Pi is 3.141312452 (error 0.01 percent).\nSerial correlation coefficient is -0.000014 (totally uncorrelated = 0.0).\nEntropy = 1.000000 bits per bit.\nOptimum compression would reduce the size of this 838860800 bit file by 0 percent.\nChi square distribution for 838860800 samples is 3.09, and randomly would exceed this value 7.88 percent of the times.\nArithmetic mean value of data bits is 0.5000 (0.5 = random).\nMonte Carlo value for Pi is 3.141780515 (error 0.01 percent).\nSerial correlation coefficient is -0.000027 (totally uncorrelated = 0.0).\nEntropy = 1.000000 bits per bit.\nOptimum compression would reduce the size of this 838860800 bit file by 0 percent.\nChi square distribution for 838860800 samples is 0.62, and randomly would exceed this value 43.12 percent of the times.\nArithmetic mean value of data bits is 0.5000 (0.5 = random).\nMonte Carlo value for Pi is 3.141913953 (error 0.01 percent).\nSerial correlation coefficient is 0.000048 (totally uncorrelated = 0.0).\nWhen applied to all three files, these are the results we get:\n   Type Chi Square Monte Carlo Difference Serial Correlation Coefficient     Quantum 1.41 0.000280202 -0.000014   Avalanche Diode 3.09 -0.000187861 -0.000027   Pseudorandom Generator 0.62 -0.000321299 0.000048    We know that the PRNGis the least random, so if there are any tests that the PRNG does best, that test can not be used.\nUnsurprisingly, the PRNG performs worst in every test. Avalanche diode outperforms quantum in Chi Square and estimating Pi. Quantum only outperformed Avalanche diode in Serial Correlation Coefficient. Since the goal is to observe convergence of randomness, serial correlation makes the most sense to use.\nWhat we\u0026rsquo;ll do now is observe the serial correlation coefficients of quantum and avalanche diode as the number of trials increases.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  #include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdlib.h\u0026gt;#define MAX_READ 2500  long double array[2][MAX_READ]; void analyzeFile(const char *filename, const char filenum) { FILE *f; // I increased the array sizes because a memory  // leak and I didn\u0026#39;t care to track it down  char output[1035]; char path[1000]; snprintf(path, sizeof(path), \u0026#34;%s%s%s\u0026#34;, \u0026#34;dd if=\u0026#34;, filename, \u0026#34; bs=\u0026#34;); for (unsigned long bytes = 1; bytes \u0026lt;= MAX_READ; bytes++) { char byteString[21]; snprintf(byteString, 21, \u0026#34;%lu\u0026#34;, bytes); char command[2560]; snprintf(command, sizeof(command), \u0026#34;%s%s%s\u0026#34;, path, byteString, \u0026#34; count=8 iflag=fullblock 2\u0026gt;/dev/null | ent -b | tail \u0026#34; \u0026#34;-1 | cut -c 35-43 | xargs\u0026#34;); f = popen(command, \u0026#34;r\u0026#34;); while (fgets(output, sizeof(output), f) != NULL) { array[filenum][bytes - 1] = strtold(output, NULL); } } } int main() { analyzeFile(\u0026#34;../../randomReports/quantum\u0026#34;, 0); analyzeFile(\u0026#34;../../randomReports/avalanche\u0026#34;, 1); printf(\u0026#34;Theoretical Coefficient,Quantum Coefficient,Avalanche Diode \u0026#34; \u0026#34;Coefficient\\n\u0026#34;); for (unsigned long line = 0; line \u0026lt; MAX_READ; line++) { printf(\u0026#34;0,%Lf,%Lf\\n\u0026#34;, array[0][line], array[1][line]); } return 0; }   Now, much like before, we\u0026rsquo;ll pipe this output into gnuplot.\n1  gcc -c -o main.o main.c \u0026amp;\u0026amp; gcc ./main.o -o main \u0026amp;\u0026amp; ./main | cat \u0026gt; /tmp/gnuplotdata.csv \u0026amp;\u0026amp; gnuplot -p -e \u0026#34;set title \u0026#39;Quantum vs. Avalanche\u0026#39;;set xlabel \u0026#39;Size (Bytes)\u0026#39;;set ylabel \u0026#39;Serial Correlation Coefficient\u0026#39;;set datafile separator \u0026#39;,\u0026#39;;plot for [col=1:3] \u0026#39;/tmp/gnuplotdata.csv\u0026#39; using col with lines title columnheader;pause -1\u0026#34;   Well, this is interesting.\nExplanation I have a couple theories for why these two methods of TRNGapproach correlation coefficients of 0 at different rates.\n Partial Measurements  In a more complexsystem, there are more opportunities to be entangled with the environment which might increase correlation between measurements.   Faulty Hardware  The hardware might have some issue which causes data correlation    Obviously, the first explanation is more flashy, so I\u0026rsquo;m hoping something along those lines is occurring. With the avalanche diode method, electrons will be entangled with the enclosure which is weakly entangled with everything around it. This additional entanglement could reduce the randomness of the sequence. Quantum methods of generation should, therefore, have varying rates of discorrelation based on their amounts of interaction with the environment.\nI\u0026rsquo;ll try to compare these rates with more precise avalanche diode machines and superconducting, photonic, nuclear magnetic resonance, dot, and other quantum methods.\n","date":"2022-02-04T00:00:00Z","image":"https://slc.is/images/randomCoefficients.webp","permalink":"https://slc.is/archive/degrees-of-randomness-and-the-law-of-large-numbers/","title":"Degrees of Randomness and the Law of Large Numbers"},{"content":"I\u0026rsquo;ve been using my old Game Boy Color a lot more now that I\u0026rsquo;m programming a GB game, so I wanted to clean up the handheld! This tutorial is the culmination of a few YouTube videos from The Retro Future and Odd Tinkering. I liked a lot of their tips, so I decided to add them and my own to this post.\nTools:  Tri-Point Y1 Screwdriver Phillips Head Screwdriver Cotton Swab Tooth Brush 99% Isopropyl Alcohol  The higher percentage, the faster the evaporation   Vinegar  Disassembly  Unscrew the 4 Tri-Wing screws on the back of the GBC1.5. Unscrew 2 more screws under the batteries Remove the back plate Unscrew the 3 Phillips screws holding the motherboard Disconnect the screen\u0026rsquo;s ribbon cable from the top of the motherboard Lift the motherboard out of the casing Slide the IRcover and power switch slider out of the case Remove the buttons and membranes  D-pad A + B Start + Select   Lift the screen out of the case  It comes loose by flexing the chassis back and forth   On the back plate, unscrew the 4 Phillips screws holding the cartridge slot Slide the metal battery contact out of the case  Cleaning Motherboard:\n Dip the cotton swabs in isopropyl alcohol  If the board is really dirty, use the tooth brush to scrub with the alcohol   Clean everything on the motherboard with the swabs  Focus on the metal connectors Thoroughly clean all button contacts   Clean the surface of the speaker Dab alcohol around the volume dial and power switch  Actuate them to spread the alcohol inside   Use alcohol to clean the headphone jack Swab the battery terminal with alcohol  Case:\n Prepare a hot soapy water to submerge the case Wash and brush the plastic in the water Clean the speaker holes Scrub the plastic screen protector  Buttons:\n Wash the buttons and their rubber membranes in the water  Use a toothbrush to clean   Also clean the IR cover  Battery Contact:\n Let the metal battery contact sit in vinegar until it shines like new  Reassemble  Read the Disassembly section backwards 😂 Screw in a sequence that evenly distributes the force  Enjoy Now that the GBC is all cleaned up, it should last a few more decades!\n","date":"2022-01-23T00:00:00Z","image":"https://slc.is/images/gbc2.webp","permalink":"https://slc.is/archive/deep-cleaning-a-game-boy-color/","title":"Deep Cleaning a Game Boy Color"},{"content":"I combed the web for Top 100 lists for the *NES and GB* and combined them to record the most beloved 975 games. This master table is helpful when making ROM libraries or finding something tried, true, and new to play.\nHere is the unfiltered data on Google Sheets. The raw tab has most lists in order, but some lists went from 100-91, 90-81, …, 10-1, so it\u0026rsquo;s either in order or very out of order!\nPlease enjoy the list and let me know if there\u0026rsquo;s something to change! 😊\n   NES SNES GB GBC GBA     1942 Actraiser Adventure Island Aladdin Activision Anthology   A Boy And His Blob: Trouble On Blobolonia Addams Family Adventure Island Ii Alice In Wonderland Advance Guardian Heroes   Abradox Adventures Of Batman \u0026amp; Robin, The Adventures Of Lolo Alone In The Dark: The New Nightmare Advance Wars   Addams Family Aero Fighters Alleyway Asmik-Kun World 2 Advance Wars 2: Black Hole Rising   Adventure Island Aerobiz Supersonic Amazing Spider-Man, The Astérix: Search For Dogmatix Altered Beast: Guardian Of The Realms   Adventure Island 3 Aladdin Arcade Classic No. 3: Galaga \u0026amp; Galaxian Azure Dreams Astro Boy: Omega Factor   Adventure Island 4 Alien 3 Asmik-Kun World 2 Batman Beyond: Return Of The Joker Banjo-Kazooie: Grunty\u0026rsquo;s Revenge   Adventures Of Lolo Aliens Vs Predator Asteroids Batman: Chaos In Gotham Baseball Advance   Adventures Of Lolo 3 Animaniacs Atomic Punk Bionic Commando: Elite Forces Blender Bros.   Arkanoid Arcana Avenging Spirit Blade Blue Angelo: Angels From The Shrine   Astyanax Arkanoid 2 Balloon Kid Blaster Master: Enemy Below Boktai 2: Solar Boy Django   Balloon Fight Axelay Bart Simpson\u0026rsquo;s Escape From Camp Deadly Bomberman Boktai: The Sun Is In Your Hand   Baseball Stars Batman Returns Baseball Bomberman 3 Bomberman Max   Base Wars Battle Toads \u0026amp; Double Dragon Bases Loaded Bomberman Max: Blue Champion Bomberman Max 2   Batman Battletoads In Battlemaniacs Batman - Return Of The Joker Bomberman Max: Red Challenger Bomberman Tournament   Batman Returns Biker Mice From Mars Batman - The Animated Series Bomberman Quest Boulder Dash Ex   Batman: Return Of The Joker Blackthorne Batman Forever Boxxle Breath Of Fire   Batman: The Video Game Breath Of Fire Batman: The Video Game Bubble Bobble Breath Of Fire Ii   Battle Chess Breath Of Fire Ii Battle Arena Toshinden Bubble Ghost Broken Sword: The Shadow Of The Templars   Battle Of Olympus Bust A Move Battletoads Burai Fighter Deluxe Bubble Bobble Old \u0026amp; New   Battletoads Captain Commando Battletoads In Ragnarok\u0026rsquo;S World Burgertime Deluxe Car Battler Joe   Battletoads \u0026amp; Double Dragon: The Ultimate Team Castlevania: Dracula X Battletoads-Double Dragon Bust-A-Move 4 Castlevania Double Pack   Bionic Commando Chrono Trigger Bionic Commando Classic Bubble Bobble Castlevania: Aria Of Sorrow   Blades Of Steel Clay Fighter Blaster Master Boy Conker\u0026rsquo;S Pocket Tales Castlevania: Circle Of The Moon   Blaster Master Congo’S Caper Bomberman Cosmo Tank Castlevania: Harmony Of Dissonance   Bomberman Contra 3 Bonk’S Adventure Croc Chuchu Rocket!   Bomberman Ii Cool Spot Bonk’S Revenge Croc 2 Classic Nes Series: Super Mario Bros.   Bubble Bobble Cybernator Booby Boys Crystalis Classic Nes Series: The Legend Of Zelda   Bucky O\u0026rsquo;Hare Darius Twin Bubble Bobble Daikatana Classic Nes Series: Zelda Ii - The Adventure Of Link   Bugs Bunny Birthday Death And Return Of Superman Bugs Bunny Crazy Castle 2, The Donald Duck: Goin\u0026rsquo; Quackers Colin Mcrae Rally 2.0   Bugs Bunny Crazy Castle Demon\u0026rsquo;s Crest Bugs Bunny Crazy Castle, The Donkey Kong Country Columns Crown   Captain Tsubasa Vol. Ii: Super Striker Donkey Kong Country Bust-A-Move 2 - Arcade Edition Dragon Ball Z: Legendary Super Warriors Contra Advance: The Alien Wars Ex   Casino Kid Donkey Kong Country 2: Diddy\u0026rsquo;s Kong Quest Captain Tsubasa Dragon Warrior I \u0026amp; Ii Crash Bandicoot 2: N-Tranced   Castlevania Donkey Kong Country 3: Dixie Kong\u0026rsquo;s Double Trouble! Casper Dragon Warrior Iii Crash Bandicoot: The Huge Adventure   Castlevania 2 Doom Castlevania - Legends Dragon Warrior Monsters Custom Robo Gx   Castlevania 3 Dragon Quest I \u0026amp; Ii Castlevania Ii - Belmont\u0026rsquo;s Revenge Dragon Warrior Monsters 2: Tara\u0026rsquo;s Adventure \u0026amp; Cobi\u0026rsquo;S Journey Dancing Sword: Senkou   Caveman Games Dragon Quest Iii Castlevania Legends Dragon\u0026rsquo;s Lair Darius R   Chip \u0026lsquo;N Dale: Rescue Rangers Dragon Quest V Castlevania: The Adventure Duke Nukem Dave Mirra Freestyle Bmx 2   Chip \u0026lsquo;N Dale: Rescue Rangers 2 Dragon Quest Vi Catrap Earthworm Jim: Menace 2 The Galaxy Demikids: Dark Version   Clash At Demonhead Dragon View Chase Hq Elevat Digimon Racing   Clu Clu Land Drakkhen Contra - The Alien Wars Elevator Action Disney\u0026rsquo;s Lilo \u0026amp; Stitch   Cobra Triangle E.V.O.: Search For Eden Darkwing Duck Final Fantasy Adventure Dk: King Of Swing   Commando Earthbound Dexterity Frogger Dokapon   Contra Earthworm Jim Dig Dug Frogger 2 Donkey Kong Country   Contra Force Earthworm Jim 2 Donkey Kong Galaga: Destination Earth Donkey Kong Country 2   Crystalis F-Zero Donkey Kong Land Game \u0026amp; Watch Gallery 2 Donkey Kong Country 3   Darkwing Duck Fatal Fury 2 Donkey Kong Land 2 Game \u0026amp; Watch Gallery 3 Doom   Defender Of The Crown Fatal Fury Special Donkey Kong Land Iii Genjin Land: Viva! Chikkun Oukoku Doom Ii   Demon Sword Final Fantasy 2 Double Dragon Gex 3: Deep Cover Gecko Double Dragon Advance   Donkey Kong Final Fantasy 3 Double Dragon 3: The Arcade Game Gex: Enter The Gecko Dragon Ball Z: Buu\u0026rsquo;s Fury   Donkey Kong 3 Final Fantasy Iv Double Dragon Ii Ghosts \u0026lsquo;N Goblins Dragon Ball Z: Supersonic Warriors   Donkey Kong Classics Final Fantasy V Dr. Mario Grand Theft Auto Dragon Ball Z: The Legacy Of Goku   Donkey Kong Jr. Final Fantasy Vi Dragon Ball Z - Gokuu Hishouden Grand Theft Auto 2 Dragon Ball Z: The Legacy Of Goku Ii   Double Dragon Final Fantasy: Mystic Quest Dragon\u0026rsquo;s Lair - The Legend Hammerin\u0026rsquo; Harry: Ghost Building Company Dragon Ball: Advanced Adventure   Double Dragon 2 Final Fight DuckTales Hamtaro: Ham-Hams Unite! Drill Dozer   Double Dragon 3 - The Sacred Stones Final Fight 2 Ducktales 2 Harry Potter And The Chamber Of Secrets Duke Nukem Advance   Double Dribble Final Fight 3 Earthworm Jim Harry Potter And The Sorcerer\u0026rsquo;s Stone Ecks Vs. Sever   Dr. Mario Flashback: The Quest For Identity Elevator Action Harvest Moon Elevator Action Old \u0026amp; New   Dragon Warrior Goof Troop F-1 Race Harvest Moon 2 F-Zero Climax   Dragon Warrior Ii Gradius 3 Faceball 2000 Harvest Moon 3 F-Zero: Gp Legend   Dragon Warrior Iii Hagane: The Final Conflict Final Fantasy Adventure Heiankyo Alien F-Zero: Maximum Velocity   Dragon Warrior Iv Harvest Moon Final Fantasy Legend Ii Heroes Of Might And Magic Final Fantasy I \u0026amp; Ii: Dawn Of Souls   Duck Hunt Illusion Of Gaia Final Fantasy Legend Iii Heroes Of Might And Magic Ii Final Fantasy Iv Advance   DuckTales Indiana Jones’ Greatest Adventures Flipull Ikari No Yousai 2 Final Fantasy Tactics Advance   DuckTales 2 International Superstar Soccer Fortified Zone Inspector Gadget: Operation Madkactus Final Fantasy V Advance   Déjà Vu International Superstar Soccer Deluxe Game Boy Camera Joe \u0026amp; Mac: Caveman Ninja Final Fantasy Vi Advance   Earthbound Beginnings Joe \u0026amp; Mac Gargoyle\u0026rsquo;s Quest Kaeru No Tame Ni Kane Wa Naru Final Fight One   Earthbound Zero Joe \u0026amp; Mac 2: Lost In The Tropics Gauntlet Ii Kirby Tilt \u0026lsquo;N\u0026rsquo; Tumble Fire Emblem: The Binding Blade   ExciteBike Jungle Strike Genjin Konami Gb Collection Vol.1 Fire Emblem: The Sacred Stones   Famicom Wars Jurassic Park Genjin Land: Viva! Chikkun Ōkoku Kung-Fu Master Fire Pro Wrestling   Faxanadu Ken Griffey Jr. Presents Major League Baseball Ghostbusters Ii Kwirk Futari Wa Precure: Arienai! Yume No Kuni Wa Daimeikyuu   Fester\u0026rsquo;S Quest Ken Griffey, Jr.\u0026rsquo;s Winning Run Go! Go! Tank Legend Of The River King Gadget Racers   Final Fantasy Killer Instinct Godzilla Legend Of The River King 2 Gekido Advance: Kintaro\u0026rsquo;s Revenge   Final Fantasy Ii King Of Dragons Golf Legend Of Zelda, The: Link\u0026rsquo;s Awakening DX Goemon: New Age Shutsudou!   Final Fantasy Iii Kirby Super Star Gradius: The Interstellar Assault Legend Of Zelda, The: Oracle Of Ages Golden Sun   Fire Emblem Gaiden Kirby\u0026rsquo;s Avalanche Great Greed Legend Of Zelda, The: Oracle Of Seasons Golden Sun: The Lost Age   Fire Emblem: Shadow Dragon And The Blade Of Light Kirby\u0026rsquo;s Dream Course Hammerin’ Harry: Ghost Building Company Little Magic Grand Theft Auto Advance   Friday The 13Th Kirby\u0026rsquo;s Dream Land 3 Harvest Moon Lock ‘N’ Chase Gt Advance Championship Racing   Galaga: Demons Of Death Knights Of The Round Hudson Hawk Looney Tunes Gunstar Super Heroes   Gargoyle\u0026rsquo;s Quest 2 Krusty’S Fun House Hyper Lode Runner Lufia: The Legend Returns Guru Logic Champ   Ghosts \u0026amp; Goblins Legend Of The Mystical Ninja Ikari No Yōsai 2 Magi Nation Harvest Moon: Friends Of Mineral Town   Golgo 13 Legend Of Zelda - Link To The Past James Bond 007 Magical Chase Harvest Moon: More Friends Of Mineral Town   Goonies 2 Lemmings Joe And Mac Mario Golf Karnaaj Rally   Gradius Lion King Jurassic Park Mario Tennis Kingdom Hearts: Chain Of Memories   Guardian Legend Looney Tunes B-Ball Jurassic Park Part 2: The Chaos Continues Mario’S Picross Kirby \u0026amp; The Amazing Mirror   Gun.Smoke Lufia \u0026amp; The Fortress Of Doom Kaeru No Tame Ni Kane Wa Naru Maru\u0026rsquo;s Mission Kirby: Nightmare In Dream Land   Hogans Alley Lufia Ii: Rise Of The Sinistrals Kid Dracula Mega Man Xtreme 2 Klonoa 2: Dream Champ Tournament   Ice Climber Madden 95 Kid Icarus - Of Myths And Monsters Mega Man Xtreme Klonoa: Empire Of Dreams   Ice Hockey Madden Nfl \u0026lsquo;94 Killer Instinct Mercenary Force Konami Krazy Racers   Ikari Warriors Magical Quest Starring Mickey Mouse Kirby\u0026rsquo;s Block Ball Metal Gear Solid Kururin Paradise   Ironsword: Wizards \u0026amp; Warriors Ii Mario Paint Kirby\u0026rsquo;s Dream Land Metal Walker Legend Of Zelda, The: A Link To The Past \u0026amp; Four Swords   Jackal Marvel Super Heroes In War Of The Gems Kirby\u0026rsquo;s Dream Land 2 Mickey’S Dangerous Chase Legend Of Zelda, The: The Minish Cap   Jackie Chan Mega Man 7 Kirby\u0026rsquo;s Pinball Land Mole Mania Lufia: The Ruins Of Lore   Joe \u0026amp; Mac Mega Man X Kirby\u0026rsquo;s Star Stacker Mortal Kombat 4 Lunar Legend   Journey To Silius Mega Man X2 Legend Of The River King Motocross Maniacs 2 Magical Vacation   Karnov Mega Man X3 Legend Of Zelda, The: Link\u0026rsquo;s Awakening Mr. Driller Mario \u0026amp; Luigi: Superstar Saga   Kickle Cubicle Metal Warriors Lemmings Mr. Nutz Mario Golf: Advance Tour   Kid Icarus Mortal Kombat Madden 97 Nekketsu Kouha Kunio-Kun – Bangai Rantou-Hen Mario Kart: Super Circuit   Kid Niki: Radical Ninja Mortal Kombat 2 Mario \u0026amp; Yoshi Nemesis Mario Party Advance   Kirby\u0026rsquo;s Adventure Mortal Kombat 3 Mario Land 2 Nintendo World Cup Mario Pinball Land   Kiwi Kraze Nba Hangtime Mario\u0026rsquo;s Picross Noobow Mario Tennis: Power Tour   Klax Nba Jam Maru’s Mission Pac-Man: Special Color Edition Mario Vs. Donkey Kong   Kung Fu Nba Jam Tournament Edition Mega Man Ii Perfect Dark Mech Platoon   Legendary Wings Nhl \u0026lsquo;94 Mega Man Iii Pocket Bomberman Medabots Ax: Rokusho/Metabee   Life Force Nhl 96 Mega Man Iv Pokemon Pinball Medal Of Honor Infiltrator   Little Nemo: The Dream Master Ninja Gaiden Trilogy Mega Man V Pokemon Puzzle Challenge Mega Man \u0026amp; Bass   Little Samson Ninja Warrior Mega Man: Dr. Wily\u0026rsquo;s Revenge Pokemon Trading Card Game Mega Man Battle Network   Lode Runner Ogre Battle: The March Of The Black Queen Metroid Ii: Return Of Samus Pokemon Yellow Version: Special Pikachu Edition Mega Man Battle Network 2   Magic Of Scheherazade Out Of This World Mickey Mouse: Magic Wands! Pokemon: Crystal Version Mega Man Battle Network 3: Blue Version   Maniac Mansion Pilotwings Mickey\u0026rsquo;s Dangerous Chase Pokemon: Gold Version Mega Man Battle Network 3: White Version   Mappy Land Pocky \u0026amp; Rocky Micro Machines 2 Pokemon: Silver Version Mega Man Battle Network 4: Blue Moon   Marble Madness Pocky \u0026amp; Rocky 2 Mighty Morphin Power Rangers Pop\u0026rsquo;N Twinbee Mega Man Battle Network 4: Red Sun   Mario Bros. Populous Missile Command Power Quest Mega Man Battle Network 5: Team Colonel   Mario Is Missing! Prehistorik Man Mole Mania Project S-11 Mega Man Battle Network 6: Cybeast Falzar   Mega Man Primal Rage Mortal Kombat Qix Mega Man Battle Network 6: Cybeast Gregar   Mega Man 2 Prince Of Persia Mortal Kombat 2 Quarth Mega Man Zero   Mega Man 3 R-Type Iii: The Third Lightning Mortal Kombat 3 R-Type Dx Mega Man Zero 2   Mega Man 4 Ranma 1/2: Hard Battle Motocross Maniacs Radar Mission Mega Man Zero 3   Mega Man 5 Robotrek Mr. Do! Rayman Mega Man Zero 4   Mega Man 6 Rock N\u0026rsquo; Roll Racing Ms. Pac-Man Rayman 2 Metal Slug Advance   Metal Gear Romance Of The Three Kingdoms 3 Mystical Ninja Starring Goemon Resident Evil Gaiden Metalgun Slinger   Metal Storm Secret Of Evermore Ninja Gaiden Shadow Return Of The Ninja Metroid Fusion   Metroid Secret Of Mana Ninja Spirit Revelations: The Demon Slayer Metroid: Zero Mission   Mickey Mousecapade Seiken Densetsu 3 Ninja Taro Revenge Of The ‘Gator Mobile Suit Gundam Seed: Battle Assault   Micro Machines Shadowrun Noobow Shadowgate Classic Monster Rancher Advance   Mike Tyson\u0026rsquo;s Punch-Out!! Shaq Fu Operation C Shantae Monster Rancher Advance 2   Ms. Pac-Man Shin Megami Tensei Pac-Man Simpsons, The: Night Of The Living Treehouse Of Horror Mortal Kombat: Deadly Alliance   Ninja Gaiden Sid Meier’S Civilization Paperboy Space Invaders Mother 3   Ninja Gaiden 2: The Dark Sword Of Chaos Side Pocket Parodius Space Invaders X Moto Racer Advance   Ninja Gaiden 3: The Ancient Ship Of Doom Simcity Picross 2 Spawn Motocross Maniacs Advance   North \u0026amp; South Simcity 2000 Pinball - Revenge Of The Gator Speedy Gonzales Mr. Driller 2   Pac-Man (Namco) Soul Blazer Pocket Bomberman Spider-Man Namco Museum   Paper Boy Sparkster Pokemon: Blue Version Spider-Man 2: The Sinister Six Ninja Five-0   Pinball Spider-Man And Venom: Maximum Carnage Pokemon: Red Version Spongebob Squarepants: Legend Of The Lost Spatula Oriental Blue: Ao No Tengai   Pirates Spiderman Vs Venom Pokemon: Yellow Version - Special Pikachu Edition Spud\u0026rsquo;s Adventure Pac-Man Collection   Power Blade Star Fox Pokémon Pinball Star Trek: 25th Anniversary Pocky \u0026amp; Rocky With Becky   Prince Of Persia Star Fox 2 Popeye 2 Star Trek: The Next Generation Pokemon Firered Version   Pro Wrestling Star Ocean Pop’N Twinbee Star Wars Episode I: Obi-Wan\u0026rsquo;s Adventures Pokemon Leafgreen Version   Punch-Out!! Street Fighter Alpha 2 Primal Rage Star Wars Episode I: Racer Pokemon Mystery Dungeon: Red Rescue Team   Q-Bert Street Fighter Ii Prince Of Persia Star Wars: Yoda Stories Pokemon Pinball: Ruby \u0026amp; Sapphire   Qix Street Fighter Ii Turbo Q Billion Street Fighter Alpha: Warriors\u0026rsquo; Dreams Pokemon Ruby Version   R.C. Pro-Am Street Fighter Ii: Hyper Fighting Qix Super Mario Bros. Deluxe Pokemon: Emerald Version   Rad Racer Street Fighter Ii: The World Warrior R-Type Survival Kids Pokemon: Sapphire Version   Rampage Strike Gunner S.T.G Ring Rage Teenage Mutant Ninja Turtles Iii: Radical Rescue Puyo Pop   R.B.I. Baseball Stunt Race Fx Rolan’S Curse Tennis Racing Gears Advance   Ring King Sunset Riders Rolan’S Curse Ii Tetris Dx Rave Master: Special Attack Force!   River City Ransom Super Adventure Island Samurai Shodown The King Of Fighters \u0026lsquo;95 Rayman 3   Robin Hood Super Bomberman Serpent The King Of Fighters ’96 Rayman Advance   Robocop Super Bomberman 2 Shanghai The Smurfs Road Trip: Shifting Gears   Romance Of The Three Kingdoms Super Bonk Snow Bros. Jr The Sword Of Hope Robopon 2: Cross/Ring Version   Rush N Attack  SolarStriker Toki Tori Rock \u0026lsquo;N Roll Racing   Rygar Super Castlevania Iv Solomon’S Club Tomb Raider Samurai Deeper Kyo   Section Z Super Double Dragon Space Invaders Tomb Raider: Curse Of The Sword Shining Force: Resurrection Of The Dark Dragon   Shadowgate Super Ghouls \u0026lsquo;N Ghosts Spider-Man 2 Tony Hawk\u0026rsquo;s Pro Skater 2 Shining Soul   Silver Surfer Super Mario All-Stars Spider-Man 3: Invasion Of The Spider-Slayers Top Gear Pocket 2 Shining Soul Ii   Simpsons, The: Bart Vs. The Space Mutants Super Mario All-Stars + Super Mario World Spider-Man And The X-Men In Arcade\u0026rsquo;s Revenge Warlocked Sigma Star Saga   Skate Or Die 2: The Search For Double Trouble Super Mario Kart Star Trek - Generations - Beyond The Nexus Wendy: Every Witch Way Sonic Advance   Snake Rattle \u0026lsquo;N\u0026rsquo; Roll Super Mario Rpg: Legend Of The Seven Stars Star Wars World Heroes 2 Jet Sonic Advance 2   Snake’S Revenge Super Mario World Star Wars: The Empire Strikes Back X-Men: Mutant Academy Sonic Advance 3   Solomon’S Key Super Mario World 2 Street Fighter 2 X-Men: Mutant Wars Sonic Battle   Solstice Super Metroid Street Racer X-Men: Wolverine\u0026rsquo;s Rage Sonic The Hedgehog: Genesis   Spiritual Warfare Super Offroad Super Mario Land Yu-Gi-Oh! Dark Duel Stories Spider-Man: Mysterio\u0026rsquo;s Menace   Spy Hunter Super Punch-Out!! Super Mario Land 2: 6 Golden Coins  Spyro 2: Season Of Flame   Startropics Super R-Type Super R.C. Pro-Am  Street Fighter Alpha 3   Startropics Ii: Zoda’S Revenge Super Star Wars Super Star Wars: Return Of The Jedi  Summon Night: Swordcraft Story   Stinger Super Star Wars: Return Of The Jedi Superman  Summon Night: Swordcraft Story 2   Strider Super Star Wars: The Empire Strikes Back Sword Of Hope Ii, The  Super Dodge Ball Advance   Super C Super Street Fighter Ii Sword Of Hope, The  Super Mario Advance   Super Dodge Ball Super Tennis T2 - The Arcade Game  Super Mario Advance 2: Super Mario World   Super Mario Bros. Super Turrican 2 Tail ‘Gator  Super Mario Advance 3: Yoshi\u0026rsquo;s Island   Super Mario Bros. 2 Tales Of Phantasia Tamagotchi  Super Mario Advance 4: Super Mario Bros. 3   Super Mario Bros. 3 Tecmo Super Bowl Tarzan  Super Mario World: Super Mario Advance 2   Super Cars Teenage Mutant Ninja Turtles - Tournament Fighters Tecmo Bowl  Super Monkey Ball Jr.   TaleSpin Teenage Mutant Ninja Turtles Iv - Turtles In Time Teenage Mutant Ninja Turtles Ii: Back From The Sewers  Super Puzzle Fighter Ii   Tecmo Bowl Terranigma Teenage Mutant Ninja Turtles Iii - Radical Rescue  Super Robot Taisen Original Generation   Tecmo Super Bowl Tetris \u0026amp; Dr. Mario Teenage Mutant Ninja Turtles: Fall Of The Foot Clan  Super Robot Taisen: Original Generation 2   Tecmo World Wrestling Tetris Attack Tennis  Super Street Fighter Ii: Turbo Revival   Teenage Mutant Ninja Turtles The King Of Dragons Tetris  Sword Of Mana   Teenage Mutant Ninja Turtles Ii: The Arcade Game The Lost Vikings Tetris 2  Tactics Ogre: The Knight Of Lodis   Teenage Mutant Ninja Turtles Iii: The Manhattan Project The Simpsons: Bart’S Nightmare Tetris Attack  Tak And The Power Of Juju   Tetris (Nintendo) Tiny Toon Adventures: Buster Busts Loose! Tetris Blast  Tang Tang   Tetris (Tengen) Tiny Toon Adventures: Wacky Sports Challenge Tetris Plus  Tekken Advance   Tetris 2 Top Gear The Addams Family - Pugsley\u0026rsquo;s Scavenger Hunt  Tetris Worlds   The Legend Of Zelda Top Gear 2 The Final Fantasy Legend  The King Of Fighters Ex2: Howling Blood   The Three Stooges Top Gear 3000 The Kick Boxing  The King Of Fighters Ex: Neo Blood   Tiny Toon Adventures Toy Story The King Of Fighters \u0026lsquo;95  The Legend Of Zelda: A Link To The Past   Tombs \u0026amp; Treasure Ultimate Fighter The Little Mermaid  The Legend Of Zelda: The Minish Cap   Ufouria: The Saga Ultimate Mortal Kombat 3 The Ren \u0026amp; Stimpy Show - Space Cadet Adventures  The Pinball Of The Dead   Ultima Iv Un Squadron The Simpsons - Bart \u0026amp; The Beanstalk  Tmnt   Vice: Project Doom Uncharted Waters 2: New Horizons The Smurfs  Tony Hawk\u0026rsquo;s Pro Skater 2   Wario\u0026rsquo;s Woods Uniracers Tiny Toon Adventures 2  Tony Hawk\u0026rsquo;s Pro Skater 3   Willow Wario\u0026rsquo;s Woods Tiny Toon Adventures: Babs\u0026rsquo; Big Break  Tony Hawk\u0026rsquo;s Pro Skater 4   Wizards \u0026amp; Warriors Wild Guns Trax  Tony Hawk\u0026rsquo;s Underground   Wizards \u0026amp; Warriors 2 Wolfenstein 3D Trip World  Toy Robo Force   Wrath Of The Black Manta X-Men: Mutant Apocalypse Turok - Battle Of The Bionosaurs  Ultimate Brain Games   Yo! Noid Yoshi\u0026rsquo;s Cookie Ultra Golf  Ultimate Muscle: The Kinnikuman Legacy - The Path Of The Superhero   Yoshi Yoshi\u0026rsquo;s Safari Uno 2 - Small World  V-Rally 3   Zelda 2 Zero The Kamikaze Squirrel Wario Blast Featuring Bomberman!  Virtua Tennis   Zombie Nation Zombies Ate My Neighbors Wario Land 3  Wario Land 4     Wario Land Ii  Warioware Twisted!     Wave Race  Warioware, Inc.: Mega Microgame$!     Wcw Main Event  Yoshi Topsy-Turvy     Who Framed Roger Rabbit  Yoshi\u0026rsquo;s Island: Super Mario Advance 3     Worms  Yu-Gi-Oh!: The Eternal Duelist Soul     Yakuman  Zatch Bell! Electric Arena     Yoshi  Zone Of The Enders: The Fist Of Mars     Yoshi\u0026rsquo;s Cookie       Yuu Yuu Hakusho       Zen - Intergalactic Ninja       Zoop      ","date":"2022-01-21T00:00:00Z","image":"https://slc.is/images/bestNintendoGames.webp","permalink":"https://slc.is/archive/comprehensive-lists-of-the-best-retro-nintendo-games/","title":"Comprehensive Lists of the Best Retro Nintendo Games"},{"content":"This post will derive an optimal Wordle-specific guessing strategy. The approach taken will be reducing the set of possible words a maximum amount for each guess; however, it doesn\u0026rsquo;t make sense to keep reducing the set of words until the final guess, so we\u0026rsquo;re reintroduced to our old friend, the explore-exploit tradeoff.\nThe first question we need to answer is, given six guesses, how many should be exploring which consonants and vowels are and aren\u0026rsquo;t present, and how many should exploit that knowledge to guess the word? These two options aren\u0026rsquo;t completely exclusive, but a common problem I see in my own family, is exploring after only the first word and getting stuck in a rut of limited guesses.\nThis can be interpreted as an optimization problem: How many guesses maximize the exploration and exploitation value? Meaning, how many guesses should explore the possible letter combinations and how many should use that to guess the word.\nTaking inspiration from the Secretary Problem, let\u0026rsquo;s \u0026ldquo;reject\u0026rdquo; the first $\\frac{N}{e}$ choices and \u0026ldquo;accept\u0026rdquo; the next best. Simply, let\u0026rsquo;s not consider the first $\\frac{6}{e} \\approx 2$ guesses toward our exploitation and then try guessing afterwards.\nAnother option is to maximize the gradient (MLpeople get hyped) over word-set size as the exploitation strategy. This would mean that you\u0026rsquo;d stop exploring letters after each following step stops reducing the set size as much.\nThis is hand-wavy because I mostly want to dive into the CS, but even this can be calculated… I\u0026rsquo;ll maybe do that as well. Instead, I\u0026rsquo;ll see when the letter frequencies plateau and conclude that guessing letters past that point just offer diminishing returns.\nHere\u0026rsquo;s the list of all wordle words as of writing this, though I doubt it\u0026rsquo;ll change much. It might be helpful to have in case you want to run your own tests or follow along.\nWe\u0026rsquo;ll begin by importing commonly-used packages since it should be highly accessible for anyone. Matplotlib isn\u0026rsquo;t necessary since I show the image, so if you don\u0026rsquo;t have it installed, don\u0026rsquo;t worry.\n1 2  from matplotlib import pyplot as plt from itertools import permutations   Now, we just define some helper functions that iterate through the Wordle words and keep track of different patterns.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  def letter_distribution(words): d = {} for word in words: for letter in word: d[letter] = d.get(letter, 0) + 1 return d def letter_placement(words): d = {0: {}, 1: {}, 2: {}, 3: {}, 4: {}} for word in words: for i, letter in enumerate(word): d[i][letter] = d[i].get(letter, 0) + 1 return d def score_placement(word, letter_places): score = 0 for i, letter in enumerate(word): score += letter_places[i][letter] return score def subset_from_letters(word : str, words : set) -\u0026gt; set: return set(wordle for wordle in words \\ if set(wordle).issubset(word))   Let\u0026rsquo;s open the wordles.txt file and make words a set of all the possible five-letter words.\n1 2 3  # map\u0026#39;s lambda takes the first 5 characters of each line # in wordles.txt, removing the \\n character words = set(map(lambda x: x[:5], open(\u0026#34;wordles.txt\u0026#34;, \u0026#34;r\u0026#34;)))   To begin determining the best starting word(s), we look at the letter frequencies.\n1 2 3 4 5  letter_dist = letter_distribution(words) dist = sorted(letter_dist.items(), key=lambda x: x[1], reverse=True) plt.bar([x[0] for x in dist], [y[1] for y in dist]) plt.show()      Letter Count     s 6665   e 6662   a 5990   o 4438   r 4158   i 3759   l 3371   t 3295   n 2952   u 2511   d 2453   y 2074   c 2028   p 2019   m 1976   h 1760   g 1644   b 1627   k 1505   f 1115   w 1039   v 694   z 434   j 291   x 288   q 112    Unsurprisingly, the vowels (e, a, o, …, i, u, y?) are highly ranked. What\u0026rsquo;s interesting is that s occurs more than e. Regardless, let\u0026rsquo;s maximize the letters possible on the first guess and search for which words can be made with \u0026ldquo;seaor\u0026rdquo;. While we\u0026rsquo;re at it, let\u0026rsquo;s see what the second and third words are following that same strategy.\n1 2 3 4 5 6 7 8  print(set(word for word in subset_from_letters(\u0026#34;seaor\u0026#34;, words) \\ if len(set(word)) == 5)) print(set(word for word in subset_from_letters(\u0026#34;iltnu\u0026#34;, words) \\ if len(set(word)) == 5)) print(set(word for word in subset_from_letters(\u0026#34;dycpm\u0026#34;, words) \\ if len(set(word)) == 5))    {\u0026lsquo;aeros\u0026rsquo;, \u0026lsquo;arose\u0026rsquo;, \u0026lsquo;soare\u0026rsquo;} {\u0026lsquo;unlit\u0026rsquo;, \u0026lsquo;until\u0026rsquo;} {}\n Well, we have three choices for the best first word: aeros, arose, and soare. And luckily there are even some second choices: unlit, until.\nWhat we can do now is compare these options to determine the best. \u0026ldquo;How will one be better than another with the same letters?\u0026rdquo; you might ask. Well, we can now consider letter position. This is moving more toward exploitation.\n1 2 3 4 5 6 7 8 9 10  letter_places = letter_placement(words) first = {\u0026#39;aeros\u0026#39;, \u0026#39;soare\u0026#39;, \u0026#39;arose\u0026#39;} second = {\u0026#39;unlit\u0026#39;, \u0026#39;until\u0026#39;} for word in first: print(word, score_placement(word, letter_places)) for word in second: print(word, score_placement(word, letter_places))      Word Score     aeros 8219   soare 7138   arose 4708       unlit 2989   until 2506    As we can see, aeros is the best of the three options for our first word. As for our second choice, unlit is the better than until. All this ranking is doing is seeing if a letter in a certain position is more likely than in a different position.\nIf you look at the letter distribution graph, you\u0026rsquo;ll see that the frequencies level out around y-m. This indicates that searching past that point won\u0026rsquo;t result in too many additional words.\nFor the sake of completion, we\u0026rsquo;ll search for the final word. However, now we\u0026rsquo;ll need to switch the lowest value characters around until a new second and third word can be arranged.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  exploit_count = 3 letters = \u0026#39;\u0026#39;.join([letter for letter, count in dist[:exploit_count * 5]]) for word in permutations(letters): first = set(w for w in subset_from_letters(word[:5], words) \\ if len(set(w)) == 5) second = set(w for w in subset_from_letters(word[5:10], words) \\ if len(set(w)) == 5) third = set(w for w in subset_from_letters(word[10:15], words) \\ if len(set(w)) == 5) if first and second and third: print(first, second, third) break    {\u0026lsquo;soare\u0026rsquo;, \u0026lsquo;aeros\u0026rsquo;, \u0026lsquo;arose\u0026rsquo;} {\u0026lsquo;clint\u0026rsquo;} {\u0026lsquo;dumpy\u0026rsquo;}\n From this analysis, here\u0026rsquo;s a table to help make the best starting Wordle guesses.\n   Exploration Words       1 AEROS     2 AEROS UNLIT    3 AEROS CLINT DUMPY    Solution It was mentioned in a Hacker News comment that there are actually two lists: one for guessing and another for possible answers. Using this, I updated the best first couple words. I\u0026rsquo;ll also include these, but deriving it is simple with the code above. You can also view updated code as a PDF.\n   Exploration Words       1 ROATE     2 ROATE PULIS    3 ROATE PULIS CHYND    I\u0026rsquo;m sure there are different approaches to determining the best starting word. Some people like the most vowels (in that case use URAEI) while others would prioritize positions (then choose SLATE). I think knocking out the most potential words would help me the most, so that\u0026rsquo;s why I chose this method.\nA benefit of this is that after only two steps of exploration, you have information about ten unique letters. Another step will now put you at fifteen, over half of the alphabet. I hope this comes in handy and you enjoyed the read!\n","date":"2022-01-13T00:00:00Z","image":"https://slc.is/images/wordle.webp","permalink":"https://slc.is/archive/best-wordle-strategy-explore-or-exploit/","title":"Best Wordle Strategy — Explore or Exploit"},{"content":"The Raspberry Pi Pico inspired the release of the Picosystem. I love working with limited hardware as a challenge to improve my programming. I\u0026rsquo;ve had my fair share of 6502 assembly for the NESbut recently enjoyed the new RP2040. The Picosystem uses the RP2040 to run games, so I just had to try it out!\nI began development of Pirate\u0026rsquo;s Folly, a procedurally generated game. I\u0026rsquo;ve laid the groundwork for terrain and item generation; however, enemy placement is still needed. In the GitHub repo, I have a list of completed and planned features. The idea is a blend between One Piece, Minecraft, and No Man\u0026rsquo;s Sky. Pirates competing for treasure is such an entertaining concept since pirates are the most unpredictable and greedy people! To lean on my CS (and not artistic) background, I used Hugo Elias\u0026rsquo; procedural generation webpage for algorithm details. His site is down, so you can view a locally-served PDF. That enabled me to generate over a thousand square kilometers of terrain to explore. So, like Minecraft there is a vast world to explore, but I have a global seed (57) that will show the same world to everyone. In that way, players can share good locations for items or pirates.\nI\u0026rsquo;ll keep this page updated as I proceed. Currently, I\u0026rsquo;m wondering if I want to develop the game for Game Boy with the upcoming release of the Analogue Pocket and GBStudio 3.0.\nTransition to Game Boy Sadly, the Picosystem SDKstopped getting updates after the system release, so I decided to move the game to a more reliable console. Restraining the requirements further, I began using GBDK-2020 to make a GB game!\nI chose to use GBDK-2020 instead of GB Studio because I know how to program C and something like procedural-generation isn\u0026rsquo;t nearly as common as side-scrolling games. When GB Studio abstracts away a lot of the programming aspects, they lower the barrier of entry while compromising expressability.\nA lot of the code from the Picosystem could be reused for Game Boy; however, every 16-bit variable needed to be converted to 8-bit. In addition, float arithmetic isn\u0026rsquo;t supported in GBDK (or on the GB\u0026rsquo;s Z80 processor for that matter). These restrictions ultimately reduced the quality of map generation, but it should still be good enough for exploration.\nProcedural Generation After loads of trial and error, I found that the following formula works very well to provide fast and seeded noise.\n1 2 3 4 5 6 7 8 9  uint8_t noise(uint8_t x, uint8_t y) { // return random number [49, 201]  // derived from perlin noise and 8-bit xorshift  x ^= (y \u0026lt;\u0026lt; 7); x ^= (x \u0026gt;\u0026gt; 5); y ^= (x \u0026lt;\u0026lt; 3); y ^= (y \u0026gt;\u0026gt; 1); return x ^ y * SEED; }   The formula took inspiration from Hugo Elias\u0026rsquo; tutorial, but is closer to Michael Martin\u0026rsquo;s xorshift post. The xorshifts I use differ from common xorshift algorithms in that the function doesn\u0026rsquo;t use its previous output as the next input. Here, noise is a function of x, y, and SEED.\nProfiling    Procedure % Self Cycles Self Cycles Invocations Procedure Cycles     _interpolate_noise 40.7% 100035660 12786 6036/8112/8111.8   _set_bkg_tiles.set_xy_btt 21.6% 53069008 6732 4520/8328/7883.1   _shift_array_left 16.8% 41287680 6718 122880/122880/122880.0   _shift_array_up 9.3% 22786176 336 67816/67816/67816.0   _generate_side 3.8% 9259312 673 167776/189308/180029.8   _terrain 2.0% 4909548 12786 6188/8540/8539.8   _noise 1.5% 3784584 473073 8/8/8.0   _generate_item 1.1% 2608344 12786 212/212/212.0   LABEL_1C6 1.0% 2394684 3501 684/684/684.0   _display_map 0.6% 1595432 6732 155176/158632/157505.6   LABEL_40 0.4% 1100820 3501 1100/1112/1100.0   _set_bkg_tiles 0.4% 1077088 6732 4680/8488/8043.1   _closest 0.2% 562584 12786 44/44/44.0   _update_position 0.1% 298604 2212735    LABEL_A4 0.1% 210060 3501 744/744/744.0   _generate_map_sides 0.1% 182872 6719 167864/551336/550198.1   LABEL_0.call_hl 0.1% 126204 3501 780/792/780.0   _get_terrain 0.0% 117068 1009 68/140/116.0   00106$ 0.0% 110232 2206353    _check_interactions 0.0% 75264 336 264/264/264.0   _joypad 0.0% 67200 336 200/200/200.0   _adjust_position 0.0% 36396 337    LABEL_48.int 0.0% 19500 75 1040/1052/1040.2   _clock 0.0% 13440 336 40/40/40.0   _main 0.0% 0 12778    _check_input 0.0% 0 12778     ","date":"2022-01-11T00:00:00Z","image":"https://slc.is/images/piratesFolly1.webp","permalink":"https://slc.is/archive/pirates-folly/","title":"Pirate's Folly"},{"content":"I\u0026rsquo;ve always been curious about how to repair cars since debugging tends to follow similar thought processes. Today, I finally got my first car, a 1988 Toyota Pickup affectionately known as Lil\u0026rsquo; Mo. I\u0026rsquo;m excited to learn how to work on its famous 22R-Eengine and handle wiring for the electronics.\nMusic is my biggest priority after safety, so having a bangin\u0026rsquo; stereo is a must. After that, the appearance of the truck is important since I tend to get smiles or thumbs up when driving it. Not to mention the four people within a month offering to buy it! After handling these easier fixes, I\u0026rsquo;ll move onto engine work.\nLicense Plate Holders I replaced the old holders with reflective ones. The visibility of the pickup isn\u0026rsquo;t the best, so hopefully this\u0026rsquo;ll decrease the chances of being rear-ended!\nLights I started relatively simple: replace the rear and front lights. They were far too dim, so the updated lights are LED except for the headlights. I did upgrade the headlights so they\u0026rsquo;re bright, still. I do think I\u0026rsquo;ll move to LED headlights just to minimize battery usage.\nThe process was enjoyable since it seems the cars were made to be worked on in the \u0026rsquo;80s. Every screw was easily accessible and, if I were to change the lights a second time, I\u0026rsquo;m sure I could do it in under and hour.\nReflective Tape It seems like most of the upgrades relate to safety. I guess that\u0026rsquo;s to be expected with a car without traction control, ABS, and even airbags. I used red tape on the back, so it looks like a third rear light. Then, I put white tape along the sides to blend into the paint. Finally for the doors, I placed the tape so it\u0026rsquo;s hidden when the door is closed but shows when they\u0026rsquo;re open to other cars.\nI didn\u0026rsquo;t want to detract from the appearance of the truck. It\u0026rsquo;s great having a near-mint condition pickup from the \u0026rsquo;80s in 2022, so I wanted to preserve that aesthetic while bringing its safety more up to modern standards… although it\u0026rsquo;s still a long shot from being called safe.\nStereo The truck has two speakers, and one wouldn\u0026rsquo;t make any sound. After working through every wire from the passenger-side speaker, I figured the issue was in the stereo itself. I picked up a Panasonic at Best Buy and began setting it up. Despite Crutchfield saying I didn\u0026rsquo;t need any fit kit, I actually required one to set the storage and stereo correctly. Once I had a new stereo and fixed a few fuses, I confirmed both old speakers worked, albeit poorly.\nI ordered a universal fit kit for my pickup and some 4\u0026quot; Polk speakers, and waited. Two days later I was able to replace the old speakers and position the stereo and new storage box (the kit came with one) perfectly. The only issue was the new speakers also sounded terrible! The heat sink on the stereo also got way too hot, so the issue was most definitely wiring. Somehow, the previous wiring job was sending negative right and negative left to the left speaker and positive left and positive right to the right one. Additionally, the wiring was set up for four speakers, so the stereo was pushing double the wattage to each speaker.\nAfter sorting that all out with a circuit diagram, the whole system looks OEM, but the Bluetooth streaming and quality is a leap forward thirty years. I drove Lil\u0026rsquo; Mo around and enjoyed the music for quite a bit. Subwoofers are on the list, but I don\u0026rsquo;t need huge diameters. Preferably they can be powered by the stereo so I won\u0026rsquo;t need to do too much wiring.\nWindshield Wipers The current blades are pretty old and the rubber is cracking. I ordered a windshield wiper conversion kit to use more standard of sizes and better blades!\nMud Flaps One of the mud flaps has a chunk of rubber taken out of it, so I\u0026rsquo;ll get a new one ASAP. Actually, the cut-out might\u0026rsquo;ve been to prevent the flap from melting on the exhaust pipe. If that\u0026rsquo;s the case, I\u0026rsquo;ll leave it, but I\u0026rsquo;d like to have new flaps otherwise.\nRims and Wheels The rims are corroded and definitely show 30 years of wear. I\u0026rsquo;m opting for a temporary solution of repainting the rims, but I\u0026rsquo;d like to get larger rims in the near future. The speedometer is fast by around 5 MPH, so larger wheels should bring that error down. Additionally, they\u0026rsquo;ll make it easier to buy performance tires in a more common size.\nIt took around six hours to paint all four wheels. The longest part was definitely cleaning the rims, but the coating looks great. I\u0026rsquo;m getting close to being done with external work!\n","date":"2021-12-19T00:00:00Z","image":"https://slc.is/images/truck.webp","permalink":"https://slc.is/archive/my-first-car/","title":"My First Car"},{"content":"Avalanche breakdown and quantum are two methods for generating true random numbers. Here, we\u0026rsquo;ll compare them for feasibility and quality. The feasibility of a TRNGis how many bits per second it can produce while remaining random. And that leads us into quality which will be determined according to the NIST\u0026rsquo;s STS. We\u0026rsquo;ll also compare these methods against the computer\u0026rsquo;s default RNG as a baseline.\nI\u0026rsquo;m using the Arcetri Team\u0026rsquo;s implementation of the STS. Building it just required running make in the repo.\nWe\u0026rsquo;ll read around 100 MBof random data to perform the tests on. STS defaults to measuring bitsreams of 1 megabit per iteration, so we\u0026rsquo;ll run 800 iterations (8 bits = 1 byte).\nA useful way to record the random numbers and the speed of their generation is with the dd command.\n1 2 3 4 5 6 7  ~# dd if=/path/to/random \\  of=/copy/of/random \\  bs=104857600 \\  count=1 \\  iflag=fullblock 104857600 bytes (105 MB, 100 MiB) copied, X.X s, X B/s    I\u0026rsquo;m also saving the data and reports under a reports directory — so, create that if you need.\n Baseline Reading from random or urandom seems to be a surprisingly controversial subject, but the only nearly-standard difference I found was that urandom (which stands for unblocked random) won\u0026rsquo;t block read access when there isn\u0026rsquo;t enough randomness while random will. I\u0026rsquo;m only looking at the best each method has to offer, so I\u0026rsquo;ll be accessing /dev/random for this data.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  ~# dd if=/dev/random \\  of=reports/random \\  bs=104857600 \\  count=1 \\  iflag=fullblock 104857600 bytes (105 MB, 100 MiB) copied, 0.637875 s, 164 MB/s ~# ./sts -v 1 -i 800 -w reports/ -F r reports/random Testing data from file: reports/random Start of init phase End of init phase Start of iterate phase End of iterate phase Start of assess phase End of assess phase Start of destroy phase End of destroy phase Execution completed! Check the random.txt file for the results   The collapsed details above summarize how many STS random tests the data passed. Running these tests on different data will change the results; however, we\u0026rsquo;re testing 800 iterations of $2^{20}=1,048,576$ bits, so the results are statistically significant.\nThis report is included in the zip linked in the conclusion along with the data used to derive the score.\nA total of 188 tests (some of the 15 tests actually consist of multiple sub-tests) were conducted to evaluate the randomness of 800 bitstreams of 1048576 bits from:\nreports/random   The numerous empirical results of these tests were then interpreted with an examination of the proportion of sequences that pass a statistical test (proportion analysis) and the distribution of p-values to check for uniformity (uniformity analysis). The results were the following:\n187/188 tests passed successfully both the analyses. 1/188 tests did not pass successfully both the analyses.   Here are the results of the single tests:\n  The \u0026ldquo;Frequency\u0026rdquo; test passed both the analyses.\n  The \u0026ldquo;Block Frequency\u0026rdquo; test passed both the analyses.\n  The \u0026ldquo;Cumulative Sums\u0026rdquo; (forward) test passed both the analyses. The \u0026ldquo;Cumulative Sums\u0026rdquo; (backward) test passed both the analyses.\n  The \u0026ldquo;Runs\u0026rdquo; test passed both the analyses.\n  The \u0026ldquo;Longest Run of Ones\u0026rdquo; test passed both the analyses.\n  The \u0026ldquo;Binary Matrix Rank\u0026rdquo; test passed both the analyses.\n  The \u0026ldquo;Discrete Fourier Transform\u0026rdquo; test passed both the analyses.\n  147/148 of the \u0026ldquo;Non-overlapping Template Matching\u0026rdquo; tests passed both the analyses. 1/148 of the \u0026ldquo;Non-overlapping Template Matching\u0026rdquo; tests FAILED the proportion analysis.\n  The \u0026ldquo;Overlapping Template Matching\u0026rdquo; test passed both the analyses.\n  The \u0026ldquo;Maurer\u0026rsquo;s Universal Statistical\u0026rdquo; test passed both the analyses.\n  The \u0026ldquo;Approximate Entropy\u0026rdquo; test passed both the analyses.\n  8/8 of the \u0026ldquo;Random Excursions\u0026rdquo; tests passed both the analyses.\n  18/18 of the \u0026ldquo;Random Excursions Variant\u0026rdquo; tests passed both the analyses.\n  The \u0026ldquo;Serial\u0026rdquo; (first) test passed both the analyses. The \u0026ldquo;Serial\u0026rdquo; (second) test passed both the analyses.\n  The \u0026ldquo;Linear Complexity\u0026rdquo; test passed both the analyses.\n   To begin our comparison, we\u0026rsquo;ll evaluate avalanche breakdown.\nAvalanche Breakdown This step is unique since we need to initialize the avalanche device to be read as a bitstream on *nix.\n1 2 3 4 5  ~# dmesg | grep cdc_acm\\ 1 | tail -1 cdc_acm 1-2.3.2.4.2.4:1.0: ttyACM0: USB ACM device ~# stty raw -echo \u0026lt;/dev/ttyACM0 # put the tty device into raw mode ~# echo cmd0 \u0026gt;/dev/ttyACM0 # put the device into the avalanche/whitening mode ~# echo cmdO \u0026gt;/dev/ttyACM0 # turn on the feed to the USB   Running the command below should dim the LED, indicating a loss in entropy.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  ~# dd if=/dev/ttyACM0 \\  of=reports/avalanche \\  bs=104857600 \\  count=1 \\  iflag=fullblock 104857600 bytes (105 MB, 100 MiB) copied, 1829.86 s, 57.3 kB/s ~# ./sts -v 1 -i 800 -w reports/ -F r reports/avalanche Testing data from file: reports/avalanche Start of init phase End of init phase Start of iterate phase End of iterate phase Start of assess phase End of assess phase Start of destroy phase End of destroy phase Execution completed! Check the avalanche.txt file for the results   A total of 188 tests (some of the 15 tests actually consist of multiple sub-tests) were conducted to evaluate the randomness of 800 bitstreams of 1048576 bits from:\nreports/avalanche   The numerous empirical results of these tests were then interpreted with an examination of the proportion of sequences that pass a statistical test (proportion analysis) and the distribution of p-values to check for uniformity (uniformity analysis). The results were the following:\n183/188 tests passed successfully both the analyses. 5/188 tests did not pass successfully both the analyses.   Here are the results of the single tests:\n  The \u0026ldquo;Frequency\u0026rdquo; test passed both the analyses.\n  The \u0026ldquo;Block Frequency\u0026rdquo; test passed both the analyses.\n  The \u0026ldquo;Cumulative Sums\u0026rdquo; (forward) test passed both the analyses. The \u0026ldquo;Cumulative Sums\u0026rdquo; (backward) test passed both the analyses.\n  The \u0026ldquo;Runs\u0026rdquo; test passed both the analyses.\n  The \u0026ldquo;Longest Run of Ones\u0026rdquo; test FAILED both the analyses.\n  The \u0026ldquo;Binary Matrix Rank\u0026rdquo; test passed both the analyses.\n  The \u0026ldquo;Discrete Fourier Transform\u0026rdquo; test passed both the analyses.\n  146/148 of the \u0026ldquo;Non-overlapping Template Matching\u0026rdquo; tests passed both the analyses. 2/148 of the \u0026ldquo;Non-overlapping Template Matching\u0026rdquo; tests FAILED both the analyses.\n  The \u0026ldquo;Overlapping Template Matching\u0026rdquo; test passed both the analyses.\n  The \u0026ldquo;Maurer\u0026rsquo;s Universal Statistical\u0026rdquo; test passed both the analyses.\n  The \u0026ldquo;Approximate Entropy\u0026rdquo; test passed both the analyses.\n  8/8 of the \u0026ldquo;Random Excursions\u0026rdquo; tests passed both the analyses.\n  18/18 of the \u0026ldquo;Random Excursions Variant\u0026rdquo; tests passed both the analyses.\n  The \u0026ldquo;Serial\u0026rdquo; (first) test FAILED both the analyses. The \u0026ldquo;Serial\u0026rdquo; (second) test FAILED both the analyses.\n  The \u0026ldquo;Linear Complexity\u0026rdquo; test passed both the analyses.\n   Quantum Computer You can either collect your own quantum data or download dumps from ANU. For any reasonable length, just download a pre-collected dump which the bash code will help with.\nCode to Collect Data 1 2 3 4 5 6 7 8 9 10 11  from requests import get from tqdm import trange from os import path p = \u0026#39;reports/quantum\u0026#39; with open(p, \u0026#39;ab\u0026#39;) as f: for i in trange(int(2e6) - path.getsize(p)): bin_str = requests.get(\u0026#39;https://qrng.anu.edu.au/wp-content/plugins/colours-plugin/get_one_binary.php\u0026#39;).text b = int(bin_str, 2) f.write((b).to_bytes(1, byteorder=\u0026#39;big\u0026#39;))   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  ~# # download 100 MB of quantum data from ANU ~# curl -o reports/.quantum \\  \u0026#34;https://cloudstor.aarnet.edu.au/plus/s/9Ik6roa7ACFyWL4/download?path=%2FANU_23Oct2017_5000MB\u0026amp;files=ANU_23Oct2017_100MB_1\u0026#34; % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 100M 100 100M 0 0 5587k 0 0:00:18 0:00:18 --:--:-- 6108k ~# ./sts -v 1 -i 800 -w ./reports/ -F r reports/quantum Testing data from file: reports/quantum Start of init phase End of init phase Start of iterate phase End of iterate phase Start of assess phase End of assess phase Start of destroy phase End of destroy phase Execution completed! Check the quantum.txt file for the results   A total of 188 tests (some of the 15 tests actually consist of multiple sub-tests) were conducted to evaluate the randomness of 800 bitstreams of 1048576 bits from:\nreports/quantum   The numerous empirical results of these tests were then interpreted with an examination of the proportion of sequences that pass a statistical test (proportion analysis) and the distribution of p-values to check for uniformity (uniformity analysis). The results were the following:\n188/188 tests passed successfully both the analyses. 0/188 tests did not pass successfully both the analyses.   Here are the results of the single tests:\n  The \u0026ldquo;Frequency\u0026rdquo; test passed both the analyses.\n  The \u0026ldquo;Block Frequency\u0026rdquo; test passed both the analyses.\n  The \u0026ldquo;Cumulative Sums\u0026rdquo; (forward) test passed both the analyses. The \u0026ldquo;Cumulative Sums\u0026rdquo; (backward) test passed both the analyses.\n  The \u0026ldquo;Runs\u0026rdquo; test passed both the analyses.\n  The \u0026ldquo;Longest Run of Ones\u0026rdquo; test passed both the analyses.\n  The \u0026ldquo;Binary Matrix Rank\u0026rdquo; test passed both the analyses.\n  The \u0026ldquo;Discrete Fourier Transform\u0026rdquo; test passed both the analyses.\n  148/148 of the \u0026ldquo;Non-overlapping Template Matching\u0026rdquo; tests passed both the analyses.\n  The \u0026ldquo;Overlapping Template Matching\u0026rdquo; test passed both the analyses.\n  The \u0026ldquo;Maurer\u0026rsquo;s Universal Statistical\u0026rdquo; test passed both the analyses.\n  The \u0026ldquo;Approximate Entropy\u0026rdquo; test passed both the analyses.\n  8/8 of the \u0026ldquo;Random Excursions\u0026rdquo; tests passed both the analyses.\n  18/18 of the \u0026ldquo;Random Excursions Variant\u0026rdquo; tests passed both the analyses.\n  The \u0026ldquo;Serial\u0026rdquo; (first) test passed both the analyses. The \u0026ldquo;Serial\u0026rdquo; (second) test passed both the analyses.\n  The \u0026ldquo;Linear Complexity\u0026rdquo; test passed both the analyses.\n   Conclusion Here\u0026rsquo;s a summary of results.\n   Type Randomness Speed     Random 187/188 164 MB/s   Avalanche 183/188 57.3 kB/s   Quantum 188/188 5.7 Gb/s    The built-in random entropy is the most common source of random numbers, and is almost perfectly statistically random. Obviously, the computer is not truly random, but the algorithms used are made to score highly on these tests. For fast and affordable random numbers, built-in generators are the way to go, especially since they\u0026rsquo;re constantly seeded with conditions surrounding the machine.\nAvalanche diode breakdown has by far the slowest generation speed but boasts true random number generation. Interestingly, this generation scored the lowest in both randomness and speed, so the primary use-case for avalanche breakdown would be seeding the computer\u0026rsquo;s built-in random. In that way, the computer will take entropy from the diode without depleting it and offering fast generation. When generating SSL certificates and private keys in general for websites, SSH, or even cryptowallets, the risk of using pseudo-random numbers is too high, in my opinion. If what you\u0026rsquo;re working on isn\u0026rsquo;t worth ~$40.00, then use random, but if it\u0026rsquo;s worth more than that, invest in a avalanche breakdown device. I spent $40.00 and picked up the OneRNG V3 pictured above.\nQuantum random numbers are blisteringly fast and truly random. This will most likely be a huge use-case for quantum in the future. As crypto becomes more widespread on the internet, I\u0026rsquo;m sure companies or individuals will want true randomness for generating their keys. As of right now, though, they\u0026rsquo;re simply too expensive to buy.\nThe best option for securely generating random numbers is to seed the computer\u0026rsquo;s entropy with a source of true randomness. If this is something you were considering, know that despite the high 187 score that random achieved, it is not truly random, meaning the numbers will always be the same if the initial conditions are replicated. Depending on your use-case, that might be fine. For example, running a Monte Carlo simulation or initializing random weights to a neural network. But if you\u0026rsquo;re working with sensitive information, a true source of random numbers, even just as a seed to the machine, is always safer.\nIf you\u0026rsquo;d like to confirm these results, you can download the random data and reports for each respective binary blob. As expected for random data, zip couldn\u0026rsquo;t compress the three 100 MB files, so it is over 300 MB! Sadly I can\u0026rsquo;t upload that to GitHub, so I\u0026rsquo;m uploading a 100 MB version instead. If you\u0026rsquo;d really like the 300 MB version, email me and I\u0026rsquo;ll send it over.\nBased on the results from the smaller sample, it seems that the Law of Large Numbers applies most to avalanche diode breakdown and least to the built-in pseudo-random number generator. Quantum in somewhere in the middle. This is only from a few tests though, so it\u0026rsquo;s by no means as significant as the results from 800 tests.\n","date":"2021-12-08T00:00:00Z","image":"https://slc.is/images/onerng.webp","permalink":"https://slc.is/archive/quantum-versus-avalanche-breakdown-randomness/","title":"Quantum versus Avalanche Breakdown Randomness"},{"content":"Quantum research often requires applying operations in novel ways; however, it\u0026rsquo;s occasionally necessary to create gates to reduce circuit length. If too many operations are applied to a qubit, the quantum state is lost and no valuable insight can be gained. The quantum compiler can optimize these steps, but having the ability to create custom microwave pulses to apply to qubits is valuable.\nIn this quick tutorial, we will compose a Hadamard pulse and apply it to a qubit through a circuit using Qiskit. That\u0026rsquo;s quite a mouthful, but it\u0026rsquo;s a lot nicer than it seems.\nImports 1 2 3 4 5 6 7 8 9 10 11 12 13  from qiskit import Aer, assemble, pulse, QuantumCircuit,\\ schedule, transpile from qiskit.circuit import Gate from qiskit.providers.aer import PulseSimulator from qiskit.providers.aer.pulse import PulseSystemModel from qiskit.test import mock from qiskit.pulse.library import Gaussian from qiskit.visualization import plot_histogram from qiskit.visualization.pulse_v2 import draw import qiskit.tools.jupyter # fake quantum computer we\u0026#39;re using backend = mock.FakeArmonk()   We need to import the necessary Qiskit modules, but one thing to note is the mock backend we\u0026rsquo;re using. From qiskit.test we import mock and use its fake Armonk backend. This is a fake quantum computer that will simulate our code. Armonk also supports Qiskit Pulse and pulse simulations which we need. Waiting to run pulses on hardware can take a long time, so having a simulator is extremely helpful when prototyping quantum gates.\nTo begin our custom gate, we need to define a non-calibrated gate that we will later calibrate with a custom microwave pulse.\nCreate a custom gate 1  gate = Gate(name=\u0026#39;hadamard\u0026#39;, label=\u0026#39;H\u0026#39;, num_qubits=1, params=[])   We created a gate that will apply a pulse to one qubit. But the gate doesn\u0026rsquo;t have a pulse yet. Let\u0026rsquo;s fix that!\nBuild pulse for custom gate 1 2 3 4 5 6 7  # create a microwave pulse with a gaussian curve with pulse.build(backend, name=\u0026#39;hadamard\u0026#39;) as gate_pulse: # custom pulse for this demo microwave = Gaussian(duration=310, amp=.36, sigma=80) pulse.play(microwave, pulse.drive_channel(0)) gate_pulse.draw()   Most waves can be parameterized by a gaussian shape in quantum computing. In Qiskit Pulse, we simply define the shape of the curve and set that microwave to a variable gate_pulse. This pulse can be changed in both shape and parameters. Qiskit also offers non-gaussian curves that can be used, though gaussian is most commonly seen.\nThe next step is to attach this microwave pulse to the custom gate we initialized.\nUse custom gate 1 2 3 4 5 6 7 8 9 10  qc = QuantumCircuit(1, 1) # append the custom gate qc.append(gate, [0]) qc.measure(0, 0) # define pulse of quantum gate qc.add_calibration(\u0026#39;hadamard\u0026#39;, [0], gate_pulse) qc.draw(\u0026#39;mpl\u0026#39;)   We can treat the gate normally when building circuits, but adding the pulse is different. Qiskit uses add_calibration to apply a custom pulse to a specific gate.\nWe\u0026rsquo;re now using a custom gate in a circuit, but let\u0026rsquo;s confirm that this circuit is actually applying the pulse we specified.\nWe can use Qiskit Pulse to transpile the circuit to pulses that would be directly run on the quantum computers.\nConvert the circuit back to a pulse 1 2 3 4 5 6  # unnecessary with calibrated gates qc_t = transpile(qc, backend) qc_pulse = schedule(qc_t, backend) draw(qc_pulse, backend=backend)   If you compare the microwave we defined above to this, you can see that it is indeed the same. Our circuit is now using a custom Hadamard gate! But let\u0026rsquo;s not be too quick to celebrate.\nLet\u0026rsquo;s run one final test to see how the simulator handles custom pulses.\nExecute Circuit 1 2 3 4 5 6 7 8 9 10  # create a pulse simulator and model backend_sim = PulseSimulator( system_model=PulseSystemModel.from_backend(backend) ) # prepare the pulse job pulse_qobj = assemble(qc_pulse, backend=backend_sim) # run the job on the backend sim_result = backend_sim.run(pulse_qobj).result()   This method of simulating circuits is different from most tutorials you\u0026rsquo;ll find. Since we\u0026rsquo;re using a custom pulse, our simulator needs to be able to handle that. We use the PulseSimulator to handle this kind of circuit. I believe it\u0026rsquo;s due to the normal simulator using matrices while this needs to handle microwaves, but I\u0026rsquo;m not sure.\n1 2  # plot circuit output plot_histogram(sim_result.get_counts())   Success! As expected, the qubit is in a superposition between $\\ket{0}$ and $\\ket{1}$. The near 50-50 distribution supports that… but what happens when you apply two of these pulses in succession? We\u0026rsquo;ll tackle that at a later time, but if you want a head-start, check out the Rabi experiment. 😵‍💫\nVersion Information    Qiskit Software Version     qiskit-terra 0.19.1   qiskit-aer 0.9.1   qiskit-ignis 0.7.0   qiskit-ibmq-provider 0.18.2   qiskit 0.33.1    ","date":"2021-12-07T00:00:00Z","image":"https://slc.is/images/pulseVisual3.webp","permalink":"https://slc.is/archive/custom-gates-in-qiskit-with-pulse/","title":"Custom Gates in Qiskit with Pulse"},{"content":"1. Enable Developer Mode You\u0026rsquo;ll need to hold the escape (esc) and refresh (⟳) keys together. While holding them, press the power button to turn on the Chromebook.\nChrome will get nervous and show this screen.\nWhen you boot, you\u0026rsquo;ll need to access the disabled verified boot with control and D (ctrl+d).\nNow, press enter to turn OS verification off.\nOnce the Chromebook boots, shut it down.\n2. Enable Debug Mode You can do this by removing the battery. Modern chromebooks make this a little difficult, so here are the steps I took, if you need.\na. b. c. d. e. f. g. h. 3. Disable Write Protection You\u0026rsquo;ll need to plug your Chromebook into its charger to power on.\n If you don\u0026rsquo;t already have a Manjaro image flashed to a drive, do that now. You can use chrome\u0026rsquo;s extension for creating recovery media.\n Boot into ChromeOS and load crosh and type the following commands:\na. shell b. sudo sh c. flashrom --wp-disable and confirm that it succeeded\nIf it succeeded, you can now reattach your battery and screw the plate back in place. If not… I\u0026rsquo;m sorry.\n4. Use mrchromebox\u0026rsquo;s script Now that WPis off, you can install a custom bootloader. Use mrchromebox\u0026rsquo;s bootloader by following the instructions.\na. cd; curl -LO mrchromebox.tech/firmware-util.sh b. sudo install -Dt /usr/local/bin -m 755 firmware-util.sh c. sudo firmware-util.sh\nYou\u0026rsquo;ll need to install the UEFI firmware. After that\u0026rsquo;s done, make sure your computer is powered off.\n5. Boot from Manjaro image Plug the bootable media you flashed earlier into your chromebook and instruct the BIOS to boot from it.\n6. Install Manjaro Hopefully, you\u0026rsquo;re all set up with a custom OS! The newer models of Chromebooks make it more tedious to mod, but it can still be done without buying any additional hardware. I created this tutorial because I wasn\u0026rsquo;t able to purchase a SuzyQable and still wanted to disable WP. Enjoy your \u0026ldquo;almost-arch\u0026rdquo; distribution!\n","date":"2021-12-06T00:00:00Z","image":"https://slc.is/images/notable.webp","permalink":"https://slc.is/archive/installing-manjaro-linux-on-chromebook/","title":"Installing Manjaro Linux on Chromebook"},{"content":"I\u0026rsquo;m going to create a simple program that will delete personal information like deleteme. It\u0026rsquo;ll be open-source and able to run whenever you please. I\u0026rsquo;ll use the guides from deleteme to help identify services and their links.\nI have each link listed below, but you can run the code below to download every document.\n https://joindeleteme.com/help/kb/how-to-national-do-not-call-registry/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-alc/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-allbiz/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-ancestry/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-arrestfacts/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-background-checks-com/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-california-notaries/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-checkpeople-com/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-clustrmaps/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-criminal-screen/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-criminal-watch-dog/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-criminalpages-com/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-criminalsearches-com/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-data-gemba/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-data-records/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-deathrecords-org/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-dentists-california/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-detective-unlimited/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-directmail-com/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-divorcerecords-org/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-dob-search/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-docusearch/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-easybackgrounds-com/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-email-411/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-email-finder/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-email-tracer/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-emerges/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-enformion/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-epsilon/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-equifax/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-everify/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-experian/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-family-tree-search/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-federal-data/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-fico/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-find-local-people/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-find-people-search/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-find-who-calls-you/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-firearms-california/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-florida-profile-pages/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-florida-residents-directory/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-free-background-check/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-free-cell-search/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-free-people-directory/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-free-public-profile/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-full-name-directory/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-genealogy-com/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-geni/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-gov-background-checks/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-gov-registry/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-government-registry/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-hauziz/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-hero-searches/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-homemetry/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-i-behavior/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-infopages/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-infopay/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-inforegistry/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-information-com/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-information-enterprises/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-inforver/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-innovis/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-instant-background-report/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-instant-people-finder/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-integrascan/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-integrity-aristotle/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-intel-registry/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-inteligator/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-intelius/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-intellicorp/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-iq-data/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-jail-alert/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-jailbase/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-kiwi-searches/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-lexis-nexis/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-liveramp/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-locate-family/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-locate-people/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-manta/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-marriage-records/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-mashpanel/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-melissa-data/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-michigan-resident-database/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-million-phone/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-mugshots-com/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-my-yellow-pages/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-mylife/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-national-database/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-neighbor-who/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-new-england-facts/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-north-carolina-resident-database/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-number-investigator/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-numberville/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-ohio-resident-database/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-ok-caller/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-oklahoma-voters/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-open-public-records/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-opt-out-prescreen/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-oracle/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-people-background-check/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-people-by-phone/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-people-find/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-people-finder-online/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-people-finder/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-people-search-expert/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-people-search-org/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-people-search-site/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-people-search/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-people-spy/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-people-us/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-people-verified/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-people-whiz/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-people-wise/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-people-yellowbook/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-people-yellowpages/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-peoples-check/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-phone-detective/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-phone-owner-us/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-phone-owner/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-phone-registry/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-phonebooks-com/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-pipl/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-private-number-checker/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-privaterecords/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-pub360/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-public-data-check/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-public-info-services/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-public-record-results/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-public-record-site/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-public-record-spy/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-public-records-directory/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-public-seek/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-publicrecords-onlinesearches-com/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-radaris/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-rapsheets-org/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-real-phone-lookup/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-records-authority/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-records-finder/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-rehold/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-reunion/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-reverse-genie/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-reverse-mobile/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-reverse-number-database/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-reverse-phone-check/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-reverse-records/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-rootsweb/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-sales-spider-media/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-secure-public-records/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-sentry-link/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-smart-background-checks/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-spoke/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-spy-dialer/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-spyfly/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-state-records/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-stud-or-dud/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-super-pages/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-telephone-directories/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-tenant-screening-usa/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-tenn-help/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-tower-data/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-transunion/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-true-caller/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-trusignal/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-trustoria/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-united-states-phone-book/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-us-phone-book/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-usa-background/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-usa-reverse-phone/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-uspeople-info/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-verify-them/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-verispy/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-veromi/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-visual-who/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-voter-lists/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-voter-records/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-web-investigator/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-webstigate/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-whitepages-plus/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-whitepagizle/ https://joindeleteme.com/help/kb/how-to-remove-yourself-from-zoominfo/ https://joindeleteme.com/help/kb/how-to-remove-yourself-instant-data-tower-data/ https://joindeleteme.com/help/kb/how-to-remove-yourself-true-rep/ https://joindeleteme.com/help/kb/remove-yourself-from-number-2-name/  Code to download guides 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  import requests from bs4 import BeautifulSoup import pdfkit from time import sleep link = \u0026#39;https://joindeleteme.com/help/deleteme-help-topics/opt-out-guide/page/\u0026#39; i = 1 page = requests.get(link+str(i)) guides = set() while page.ok: i += 1 soup = BeautifulSoup(page.text, \u0026#39;html.parser\u0026#39;) hrefs = [a.attrs[\u0026#39;href\u0026#39;] for a in soup.find_all(\u0026#39;a\u0026#39;) if \u0026#39;href\u0026#39; in a.attrs \\ and \u0026#39;https://joindeleteme.com/help/kb/\u0026#39; in a.attrs[\u0026#39;href\u0026#39;]] guides |= set(hrefs) sleep(1) page = requests.get(link+str(i)) for i, url in enumerate(sorted(guides)): print(f\u0026#39;{i+1}. {url}\u0026#39;) pdfkit.from_url(url, str(i+1)+\u0026#39;.pdf\u0026#39;) sleep(1)   Combined Guides\n","date":"2021-12-05T00:00:00Z","image":"https://slc.is/images/deleteme.webp","permalink":"https://slc.is/archive/delete-me-guides/","title":"Delete Me Guides"},{"content":"Title Screen:  Version: Beta 1.7.3 Seed: 2151901553968352745 or 8091867987493326313 Player X: 61.48 Player Y: 75 Player Z: -68.73  Pack.png:  Version: Alpha 1.2.2 [Java] Seed: 3257840388504953787 Player X: 116 Player Y: -31  Skull on Fire:  Version: Alpha 1.1.2_01 [Java] Seed: -1044887956651363087 or -6984854390176336655 Player X: -249.65 Player Y: 91 Player Z: -29.04  Speedrunning:  Version: 1.17.41 Seed: 376166226 Player X: 0 Player Y: 0  Interesting Seeds: 7 Wonders:\n Seed: 1866338692667258164 Player X: 0 Player Y: 0  ","date":"2021-11-15T00:00:00Z","image":"https://slc.is/images/mcTitle.webp","permalink":"https://slc.is/archive/minecraft-seeds/","title":"Minecraft Seeds"},{"content":"How would Cicero feel if he learned most knew him through Lorem Ipsum? I\u0026rsquo;m sure he\u0026rsquo;d lose his head… again. To further Herennius\u0026rsquo; delight, Cicero didn\u0026rsquo;t even write those lines! To do justice to his legacy, I present Cicerkov: The Cicero Markov Chain.\nTo follow along, download his workhere. There is an interactive demo in JavaScript below, though, but it uses a prerun model of window size two.\nImports 1 2 3 4 5 6  from nltk.tokenize import sent_tokenize from itertools import tee from numpy import array, random file = \u0026#39;lorem.txt\u0026#39;   Load Lorem Ipsum 1  text = open(file, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf8\u0026#39;).read()   Markov Model 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  def update(d, keys, value): for key in keys: if key in d: d = d[key] else: newd = dict() d[key] = newd d = newd d[value] = d.get(value, 0) + 1 def marginalize(text, window): d = dict() for w in slide(text.split(\u0026#39; \u0026#39;), window): features = w[:-1] target = w[-1] update(d, features, target) return d def slide(iterable, size): iters = tee(iterable, size) for i in range(1, size): for each in iters[i:]: next(each, None) return zip(*iters)   Create Model 1 2 3  window = 2 model = marginalize(text, window)   Generate Sentences 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  def generate(chain, n_words): for _ in range(n_words): window_d = chain[1 - window:] d_t = model[window_d[0]] for key in range(1, window - 1): d_t = d_t.get(window_d[key], {}) vals = list(d_t.values()) if not d_t: break word = random.choice( list(d_t.keys()), p=array(vals)/sum(vals) ) chain.append(word) return chain def form(chain): sentences = sent_tokenize(\u0026#39; \u0026#39;.join(chain)) paragraph = \u0026#39; \u0026#39;.join(sent.capitalize() for sent in sentences) if paragraph[-1] not in {\u0026#39;.\u0026#39;, \u0026#39;!\u0026#39;, \u0026#39;?\u0026#39;}: paragraph += \u0026#39;.\u0026#39; return paragraph   1 2 3 4 5 6  n_words = 200 chain = [\u0026#39;dolorem\u0026#39;, \u0026#39;ipsum\u0026#39;] chain = generate(chain, n_words) print(form(chain))    Dolorem ipsum illud in hae tantae quidem, cum maximis curis hominum et utrum respondero, verses te dicta sunt. Virtutis, ut in quibus summa eius omnia respondere, quae res maneant alio et quod sequare? Aut, qui omnino virtutem progressionis aliquantum. Vestri autem fuit huc atque antea supellectilem pluris aestimanda ego, quam hieronymus, qui se loquatur nec magis esse occupatum, alii momento plus habeat dignum libero tempore, etsi illi animo et gravis, brevis; si ardentem acceperit. Ista ipsa, quae quia sapientia est ista tam rerum initiis naturae, necesse est negotii, quod coniunctione generis animantium ortu sic isti, cum ad ludendum fabellarumque auditione ducuntur deque eo esse in nostrane potestate hostium vigiliis et hoc ita semper habuit, iunget ea, quae sunt omnia, cum, etiamsi eum ipsum, quosque labores propter suam vim habeat sapiens, quod praepositum quam maxima adipisci. Hunc ipsum sive finem tueri aut in varias reprehensiones incurreret. Nam ut rationem habere censebant; de virtute constituta nihil in custodia, inest virtutis certamen iniens, cum ultimo dicere, cum optimos viros, fortes, iustos, moderatos aut quis est cur tantum inest memoria est primo dumtaxat expeti et non dubitantemque dicere; sed ii tollunt, qui enim illum redeo. Si utrumque concluderent. At enim scite me pudeat, inquit, mala?\n Interestingly, dolorem ipsum translates to pain itself. This isn\u0026rsquo;t surprising considering it comes from the the essays of On the Ends of Good and Evil, but this means our most used filler text is pain 😂\nConclusion  Should I be ashamed of knowing evil? — Cicerkov 2021\n Throwing the outputs into a translator is always interesting. With only a window of two, however, Cicerkov is still being limited by \u0026ldquo;Dolorem ipsum.\u0026rdquo; At least in this way, he can say more than the famous first sentence.\n","date":"2021-11-11T00:00:00Z","image":"https://slc.is/images/dolorem.webp","permalink":"https://slc.is/archive/dolorem-ipsum/","title":"Dolorem Ipsum"},{"content":"After seeing Kris\u0026rsquo; solar-powered website, I decided I wanted my own to be the same. This conveniently followed the release of the Raspberry Pi Zero 2 W, a low-power SoC. I purchased this board since I doubt my website will warrant anything stronger than a Raspberry Pi and it enables solar-power with its small energy footprint.\nThere is a thorough article comparing servers\u0026rsquo; abilities handling different types of data; however, I opted to use Go\u0026rsquo;s built-in web server. My primary reason is the ease of adding new features with Go is too much to trade for C\u0026rsquo;s minor improvements.\nThe way my site works is it populates the initial HTML with markdown files. Instead of reloading an entire page, files are dynamically requested. Markdown rendering occurs on the client-side, reducing server usage past what an established framework currently offers (to my knowledge). If you\u0026rsquo;d like to check out how my site works, visit the GitHub repo.\nThis isn\u0026rsquo;t too big of a deal, though, because the Pi uses barely any energy. In fact, an average load only draws around 200 mA.\nMy house gets around 1,918 hours of sunlight, so that\u0026rsquo;s a ratio of $\\frac{1918 ; hours}{365.25 ; days \\times 24 ; hours} \\approx 0.22$ usable hours of sunlight.\nThis means at a potential draw of 200 mA, the server would consume $200 ; mA \\times 24 ; hours = 4800 ; mAh$ a day. In addition, with 22% or $24 ; hours \\times 0.22 \\approx 5 ; hours$ of usable daylight, the solar panels must capture $\\frac{4800 ; mAh}{5 ; hours} \\approx 1000 ; \\frac{mA}{hour}$. This assumes 100% conversion rates. Good panels convert around 20% of the sunlight. This effectively means I need $\\frac{1 ; A}{0.2}=5 ; \\frac{Amps}{hour}$ from the panel.\nThe Raspberry Pi Foundation recommends a 5 Volt PSU, so, the watt hours is $5 ; A \\times 5 ; V = 25 ; W$. With this requirement, the BigBlue panel seems like a good choice. It includes a USB port, so I won\u0026rsquo;t need a separate regulator.\nFor the battery, I should get one that can handle the other 78% of unusable hours of light. This means more than $200 ; mA \\times 24 ; hours \\times 0.78 = 3750 ; mAh$ would suffice for a single day. Adding some wiggle room, I think 10,000 mAh will be fine for a couple days of bad weather. I\u0026rsquo;ll update this page later with uptime statistics, but entering winter makes for a rough time! 😅\n There were some great sales which is why I chose those two items specifically; and the whole setup only cost around $100 (not including internet fees).\n The math above is a little disorganized since I used this write-up to figure it out; however, the calculator below will quickly determine your own solar needs from either your latitude or hours of the day, and voltage and current or wattage.\nI definitely recommend giving the Raspberry Pi Zero 2 W a look. It\u0026rsquo;s extremely energy-friendly and packs quite a punch. The power per watt is nothing to laugh at — with the new unified memory design, there\u0026rsquo;s definitely an air of M1 about. Of course, at 512 Mb of RAMthis won\u0026rsquo;t be viable for some people, but it\u0026rsquo;s a step in the right direction. If you\u0026rsquo;re thinking about some hobby projects, keep sustainable tech in mind.\nHopefully this helps someone get the gear they need to host their solar sites! If you\u0026rsquo;re able to read this article, then the S.S. Pi🥧 is chuggin\u0026rsquo; along.\n","date":"2021-11-07T00:00:00Z","image":"https://slc.is/images/zero2w.webp","permalink":"https://slc.is/archive/efficient-solar-powered-website/","title":"Efficient Solar-Powered Website"},{"content":"I\u0026rsquo;ll use this post as a progress report of the Google Internship application process. The only unique thing I did in regards with the initial application was specifying my interest in the ChromeOS team. In addition, I submitted a bug report to the ChromeOS team and mentioned my application. I don\u0026rsquo;t know if this helped move me forward, but it was something different I did compared to previous applications.\nSnapshot Survey The survey autosaves, so use the answer history to indicate confidence in some and confliction in other answers.\nCoding Exercise  Leave comments on code Use descriptive variables names Make test cases  I wrote a message to the Googlers in my tests   Leave feedback on the form  They say to not include identifiable information, but the Google account is associated with the form, so it can only help    Candidate Questionnaire There isn\u0026rsquo;t much room for unique answering strategies here, but the time to show your stuff in writing has finally come. For all long-answer sections, be sure to fill it out thoroughly. Use Grammarly to verify writing style and leave feedback at the end per usual.\nPhone Interviews I solved each question proposed in the interviews, but didn\u0026rsquo;t have time to complete their second parts. The questions were straightforward but added a slight twist on common data structures. Once I completed the first question in the interviews, I opted to stop coding and instead talk to the interviewer. Hopefully that was the right move, and I\u0026rsquo;ll find out within two weeks whether I move to hosting.\nMy first interview was stronger than my second, so as expected, I got scheduled for a third interview.\nThe hosting round, where you match with Google teams, comes quickly and is on a first-come basis. Because of this, completing your phone interviews as quickly as possible is very important. The sooner you can progress to hosting the better in terms of obtaining an internship, in my opinion.\n Skills  Code Analysis Construct and Traverse Implement system routines Mine data Transform datasets  Algorithms  Runtime + Space complexity  https://www.geeksforgeeks.org/time-complexity-and-space-complexity/ https://stackabuse.com/big-o-notation-and-algorithm-analysis-with-python-examples/     https://www.baeldung.com/cs/p-np-np-complete-np-hard   https://www.cs.utah.edu/~germain/PPS/Topics/recursion.html https://www.geeksforgeeks.org/recursion/   Memorization  https://www.geeksforgeeks.org/dynamic-programming/     https://www.tutorialspoint.com/data_structures_algorithms/divide_and_conquer.htm   https://realpython.com/sorting-algorithms-python/   https://www.geeksforgeeks.org/greedy-algorithms/   https://www.techiedelight.com/depth-first-search-dfs-vs-breadth-first-search-bfs/   Inorder, Postorder, Preorder  https://towardsdatascience.com/4-types-of-tree-traversal-algorithms-d56328450846    Data Structures  https://www.tutorialspoint.com/data_structures_algorithms/linked_list_algorithms.htm   https://www.geeksforgeeks.org/implementation-of-dynamic-array-in-python/ https://codezup.com/create-own-custom-array-implementation-python/   https://www.tutorialspoint.com/data_structures_algorithms/stack_algorithm.htm   https://www.tutorialspoint.com/data_structures_algorithms/dsa_queue.htm https://www.geeksforgeeks.org/priority-queue-set-1-introduction/   https://wikipedia.org/wiki/Set_(abstract_data_type)   https://www.tutorialspoint.com/data_structures_algorithms/hash_data_structure.htm https://replit.com/@splch/Hash-Table   Binary, N-ary, Trie-  https://www.cs.cmu.edu/~clo/www/CMU/DataStructures/Lessons/lesson4_1.htm   Balanced  Red/Black + Splay + AVL  https://web.stanford.edu/class/archive/cs/cs166/cs166.1146/lectures/02/Small02.pdf       https://www.geeksforgeeks.org/difference-between-min-heap-and-max-heap/   Objects + Pointers, Matrix, Adjacency List  https://www.upgrad.com/blog/graphs-in-data-structure/    Operating Systems  https://www.tutorialspoint.com/operating_system/os_processes.htm   https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/4_Threads.html      https://en.wikipedia.org/wiki/Lock_(computer_science)   https://www.tutorialspoint.com/semaphores-in-operating-system   https://www.geeksforgeeks.org/monitors-in-process-synchronization/   https://www.geeksforgeeks.org/introduction-of-deadlock-in-operating-system/   https://www.guru99.com/what-is-livelock-example.html   https://wikipedia.org/wiki/Context_switch   https://www.guru99.com/process-scheduling.html  Discrete Math  https://en.wikipedia.org/wiki/Discrete_mathematics   https://www.tutorialspoint.com/discrete_mathematics/discrete_mathematics_counting_theory.htm   https://www.tutorialspoint.com/discrete_mathematics/discrete_mathematics_probability.htm   https://www.math.ucla.edu/~pak/hidden/papers/Quotes/Wilson-what.pdf   https://www.cs.utexas.edu/~isil/cs311h/lecture-combinatorics2-6up.pdf   Timeline Software Engineering Intern, Bachelors, Winter 2022    Date Event     July 31st, 2021 Applied to Google   September 29th, 2021 Passed Résumé Review   October 4th, 2021 Completed Snapshot Survey and Coding Exercise   October 5th, 2021 Passed Survey and Exercise Stage   October 6th, 2021 Scheduled Phone Interviews   October 11th, 2021 Completed Phone Interviews   October 14th, 2021 Scheduled Third Phone Interview   October 20th, 2021 Completed Third Phone Interview   October 29th, 2021 Failed Phone Interviews    ","date":"2021-09-29T00:00:00Z","image":"https://slc.is/images/google.webp","permalink":"https://slc.is/archive/short-and-sweet-google-interview-process/","title":"Short and Sweet Google Interview Process"},{"content":"I was hoping to encode the b64string of a QRcode into another QR code. The catch was that the encoded QR code would match the encoded string of the QR code. When you scan the QR code, it would return itself.\nSadly, this is most likely impossible, though I might still try to create a search function for it. Instead, I optimized Alok\u0026rsquo;s approach a bit with Javascript\u0026rsquo;s arrow syntax. Minor things like that enabled me to create an HTML-validated QR quine.\n1  data:text/html,\u0026lt;!DOCTYPE html\u0026gt;\u0026lt;html lang=en\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;q\u0026lt;/title\u0026gt;\u0026lt;canvas id=C\u0026gt;\u0026lt;script\u0026gt;P=(r,c,v)=\u0026gt;{I[A*r+c]=v;return!(v\u0026amp;\u0026amp;C.getContext(\u0026#39;2d\u0026#39;).fillRect(c*3,r*3,3,3))};S=(i,j)=\u0026gt;{for(r=O;r\u0026lt;8;r++)for(c=O;c\u0026lt;8;c++)j+c\u0026gt;O\u0026amp;\u0026amp;j+c\u0026lt;A\u0026amp;\u0026amp;P(i+r,j+c,0\u0026lt;r\u0026amp;\u0026amp;(r\u0026lt;7\u0026amp;\u0026amp;!(c%6))||((c+1)%8\u0026amp;\u0026amp;!(r%6)||1\u0026lt;r\u0026amp;\u0026amp;(r\u0026lt;5\u0026amp;\u0026amp;(1\u0026lt;c\u0026amp;\u0026amp;c\u0026lt;5))))};N=(a,b)=\u0026gt;{if(a[L]\u0026lt;b[L])return a;o=a[0]/b[0];for(i=0;i\u0026lt;b[L];a[i++]^=z){m=b[i];n=o;for(z=0;m;n\u0026gt;255\u0026amp;\u0026amp;(n^=285))m\u0026amp;1\u0026amp;\u0026amp;(z^=n),n\u0026lt;\u0026lt;=1,m\u0026gt;\u0026gt;=1}a.shift();return N(a,b)};C.height=C.width=(A=133)*3;I=[];X=O=-1;L=\u0026#39;length\u0026#39;;S(0,0);S(A-7,0);S(i=0,A-7);for(B=[6,30,54,78,102,126];i\u0026lt;6;i++)for(j=0;j\u0026lt;6;j++)if(!I[A*B[i]+B[j]])for(r=-2;r\u0026lt;3;r++)for(c=-2;c\u0026lt;3;c++)P(B[i]+r,B[j]+c,r\u0026amp;\u0026amp;!(r%2)||c\u0026amp;\u0026amp;!(c%2)||!r\u0026amp;\u0026amp;!c);for(i=8;i\u0026lt;A-8;P(6,i++,j))j=!(i%2),P(i,6,j);for(i=0;i\u0026lt;15;i++)j=29427\u0026gt;\u0026gt;i\u0026amp;1,i\u0026lt;6\u0026amp;\u0026amp;P(i,8,j)||i\u0026lt;8\u0026amp;\u0026amp;P(i+1,8,j)||P(118+i,8,j),i\u0026lt;8\u0026amp;\u0026amp;P(8,A-i-1,j)||i\u0026lt;9\u0026amp;\u0026amp;P(8,15-i,j)||P(8,14-i,j);P(A-8,8,1);for(i=0;i\u0026lt;18;P(i%3+A-11,i++/3|0,k))k=119615\u0026gt;\u0026gt;i\u0026amp;1,P(i/3|0,i%3+A-11,k);for(D=[4,i=0,6,0,6];i\u0026lt;1542;D=D.concat([j\u0026gt;\u0026gt;4,j\u0026amp;15]))j=unescape(location.href).charCodeAt(i++);D.push(r=0);for(E=3262;D[L]\u0026lt;E;D=D.concat([1,1]))D=D.concat([14,12]);F=[];for(Z=k=r=0;r\u0026lt;14;r++){i=116+(r\u0026gt;6);l=[];for(j=0;j\u0026lt;i;F[r+j*14-(j\u0026gt;115?7:0)]=l[j++])l[j]=(D[k++]\u0026lt;\u0026lt;4)|D[k++];l=l.concat(new Array(30));for(j=0;j\u0026lt;30;j++)F[r+j*14+1631]=N(l,[1,212,246,77,73,195,192,75,98,5,70,103,177,22,217,138,51,181,246,72,25,18,46,228,74,216,195,11,106,130,150])[j]}Y=7;for(x=i=A-1;i\u0026gt;0;i-=2){for(i==6\u0026amp;\u0026amp;i--;x\u0026gt;O\u0026amp;\u0026amp;x\u0026lt;A;x+=X)for(j=0;j\u0026lt;2;j++)if(I[A*x+i-j]==B[9])k=Z\u0026lt;F[L]\u0026amp;\u0026amp;F[Z]\u0026gt;\u0026gt;Y\u0026amp;1,P(x,i-j,x%2?k:!k),--Y\u0026lt;0\u0026amp;\u0026amp;(Z++,Y=7);x-=X;X=-X}\u0026lt;/script\u0026gt;\u0026lt;/canvas\u0026gt;   When this text is pasted into a browser\u0026rsquo;s URL, it loads a QR code containing the same link. Here, a QR code is generated, but this is just a little better than having a QR code link to itself.\n","date":"2021-09-25T00:00:00Z","image":"https://slc.is/images/qrQuine.webp","permalink":"https://slc.is/archive/qr-quine/","title":"QR Quine"},{"content":"ý.is is now taken. This morning, I began rummaging through the NCIS\u0026rsquo; Domain Rules and found a list of all allowed single characters.\n1 2 3  a b c d e f g h i j k l m n o p q r s t u v w x y z - 0 1 2 3 4 5 6 7 8 9 á æ é í ð ó ö ú ý þ   After a few searches and CAPTCHAs, I was surprised to that ý was available! I didn\u0026rsquo;t wait long before paying that €31.90 fee 😂 It\u0026rsquo;s very interesting that there was a single-letter domain left considering most of the others were registered in the early 2000s. I checked the WhoIs history, too, and nobody has owned it previously. Either way, I\u0026rsquo;m happy I have the shortest possible domain name now!\nI have no concrete idea for what I\u0026rsquo;ll do with ý.is, but I think a personal URLshortener would be useful. I doubt bots are testing these characters for spam, so basically any email from this domain would be rarely targeted. Having some email forwarding service attached to the domain could be helpful in this sense. This isn\u0026rsquo;t a domain that others can visit due to the ý character being so infrequently used. Anything I end up using this domain for will most likely be personal.\nI\u0026rsquo;ll try to think of some reasons it\u0026rsquo;d be useful to have a Latin character in a URL, but in the meantime I\u0026rsquo;ll enjoy owning a rare domain.\n","date":"2021-09-22T00:00:00Z","image":"https://www.isnic.is/en/tolur/image?name=stafafjoldi","permalink":"https://slc.is/archive/the-last-single-letter-domain/","title":"The Last Single-Letter Domain"},{"content":" ⏲️ Preptime: 15 min 🍪 Baking time: 11 min 🍽️ Servings: 11+  Ingredients  1¾ cups unbleached all-purpose flour ½ teaspoon baking soda 14 tablespoons unsalted butter (1¾ sticks) ½ cup granulated sugar ¾ cups packed dark brown sugar 1 teaspoon table salt 2-3 teaspoons vanilla extract 1 large egg 1 large egg yolk 1¼ cups semisweet chocolate chips ¾ cups chopped toasted pecans  Before You Begin Avoid using a nonstick skillet to brown the butter; the dark color of the nonstick coating makes it difficult to gauge when the butter is browned. Use fresh, moist brown sugar instead of hardened brown sugar, which will make the cookies dry. This recipe works with light brown sugar, but the cookies will be less full-flavored.\nFor High-Altitude Baking:\n Problem: Cookies spread too much in the oven.  Solution: Use less sugar. Increase the oven temperature and decrease the baking time.   Problem: Cookies are too dry.  Solution: Add an extra egg or yolk.    Directions   Adjust oven rack to middle position and heat oven to 375℉.\n  Line 2 large (18x12 in) baking sheets with parchment paper.\n  Whisk flour and baking soda together in medium bowl; set aside.\n  Heat 10 tablespoons butter in 10-inch skillet over medium-high heat until melted (2 minutes). Continue cooking, swirling pan constantly until butter is dark golden brown and has nutty aroma (1 - 3 minutes).\n  Remove skillet from heat and, using heat-proof spatula, transfer browned butter to large heat-proof bowl.\n  Stir remaining 4 tablespoons (½ stick) butter into hot butter until completely melted.\n  Add both sugars, salt, and vanilla to bowl with butter and whisk until fully incorporated.\n  Add egg and yolk and whisk until mixture is smooth with no sugar lumps remaining (30 seconds).\n  Let mixture stand (3 minutes).\n  Repeat steps 8 and 9 of whisking and standing 2 more times until mixture is thick, smooth, and shiny.\n  Using rubber spatula or wooden spoon, stir in flour mixture until just combined (1 minute).\n  Stir in chocolate chips and nuts, giving dough final stir to ensure no flour pockets remain.\n  Divide dough into 16 portions, each about 3 tablespoons. Arrange 2 inches apart on prepared baking sheets, 8 dough balls per sheet.\n  Bake cookies 1 tray at a time until cookies are golden brown and still puffy, and edges have begun to set but centers are still soft (11 minutes), rotating baking sheet halfway through baking (5:30 minutes).\n  Transfer baking sheet to wire rack; cool cookies completely before serving.\n  Source ","date":"2021-09-18T00:00:00Z","image":"https://slc.is/images/brownButterCookies.webp","permalink":"https://slc.is/archive/brown-butter-cookie-recipe/","title":"Brown Butter Cookie Recipe"},{"content":"I\u0026rsquo;ve been using the Raspberry Pi Foundation\u0026rsquo;s products for almost a decade now, but they only recently released their first microcontroller. Their custom RP2040has an ARM Cortex-M0+ chip that, obviously, uses ARM assembly. I\u0026rsquo;ve been wanting to learn assembly and this is definitely a great opportunity to do so.\n The goal is to code a very basic neural network in assembly.\n I want to make a simple neural network, and luckily the Pico has a multiplication instruction (unlike the 6502 processor). Additionally, Stephen Smith and Low Level Learning have already demonstrated assembly running directly on the Pico. I took both their tutorials and created a more fleshed out assembly setup.\nThis is going to be a bit of a challenge, but I\u0026rsquo;m looking forward to learning ARM assembly and pushing the Pico to its limits!\n Starter Code In the collapsed files, I recreated the starter blink code in assembly.\nassembly.s\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73  .global main .thumb_func @ use 16-bit instructions @@@@@@@ .data @ constants and variables @@@@@@@ gpiosetdiroutreg: .word 0xd0000024 @ address of gpio out register gpiosetonreg: .word 0xd0000014 @ address of gpio on register gpiosetoffreg: .word 0xd0000018 @ address of gpio off register .equ led, 25 @ set led pin to 25 .equ gpio_out, 1 @ enable gpio output .equ sleep_time, 250 @ sleep time in ms @@@@@@@ .text @ program instructions @@@@@@@ main: mov r0, #led  bl gpio_init @ initialize led pin mov r0, #led  mov r1, #gpio_out  bl gpiosetout @ enable led b blink blink: mov r0, #led  bl gpio_on @ turn on led ldr r0, =sleep_time bl sleep_ms @ sleep for sleep_time ms mov r0, #led  bl gpio_off @ turn off led ldr r0, =sleep_time bl sleep_ms b blink @ repeat to blink led gpiosetout: movs r3, #1 @ set the output register to 1  lsl r3, r0 @ shift to pin position ldr r2, =gpiosetdiroutreg @ get gpio out address ldr r2, [r2] str r3, [r2] bx lr gpio_on: movs r3, #1  lsl r3, r0 ldr r2, =gpiosetonreg @ get gpio on address ldr r2, [r2] str r3, [r2] bx lr gpio_off: movs r3, #1  lsl r3, r0 ldr r2, =gpiosetoffreg @ get gpio off address ldr r2, [r2] str r3, [r2] bx lr .end   build.sh\n1 2 3 4 5  mkdir build cd build/ cmake .. make cp assembly.uf2 /path/to/RPI-RP2/   CMakeLists.txt and pico_sdk_import.cmake\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92  # CMakeLists.txt cmake_minimum_required(VERSION 3.12) # Pull in SDK (must be before project) include(pico_sdk_import.cmake) project(pico-asm C CXX ASM) set(CMAKE_C_STANDARD 11) set(CMAKE_CXX_STANDARD 17) # Initialize the SDK pico_sdk_init() add_executable(pico-asm assembly.s ) # Pull in our pico_stdlib which aggregates commonly used features target_link_libraries(pico-asm pico_stdlib) # enable usb output, disable uart output # pico_enable_stdio_usb(pico-asm 1) # pico_enable_stdio_uart(pico-asm 0)  # create map/bin/hex/uf2 file etc. pico_add_extra_outputs(pico-asm) ##########  # pico_sdk_import.cmake # This is a copy of \u0026lt;PICO_SDK_PATH\u0026gt;/external/pico_sdk_import.cmake  # This can be dropped into an external project to help locate this SDK # It should be include()ed prior to project()  if (DEFINED ENV{PICO_SDK_PATH} AND (NOT PICO_SDK_PATH)) set(PICO_SDK_PATH $ENV{PICO_SDK_PATH}) message(\u0026#34;Using PICO_SDK_PATH from environment (\u0026#39;${PICO_SDK_PATH}\u0026#39;)\u0026#34;) endif () if (DEFINED ENV{PICO_SDK_FETCH_FROM_GIT} AND (NOT PICO_SDK_FETCH_FROM_GIT)) set(PICO_SDK_FETCH_FROM_GIT $ENV{PICO_SDK_FETCH_FROM_GIT}) message(\u0026#34;Using PICO_SDK_FETCH_FROM_GIT from environment (\u0026#39;${PICO_SDK_FETCH_FROM_GIT}\u0026#39;)\u0026#34;) endif () if (DEFINED ENV{PICO_SDK_FETCH_FROM_GIT_PATH} AND (NOT PICO_SDK_FETCH_FROM_GIT_PATH)) set(PICO_SDK_FETCH_FROM_GIT_PATH $ENV{PICO_SDK_FETCH_FROM_GIT_PATH}) message(\u0026#34;Using PICO_SDK_FETCH_FROM_GIT_PATH from environment (\u0026#39;${PICO_SDK_FETCH_FROM_GIT_PATH}\u0026#39;)\u0026#34;) endif () set(PICO_SDK_PATH \u0026#34;${PICO_SDK_PATH}\u0026#34; CACHE PATH \u0026#34;Path to the Raspberry Pi Pico SDK\u0026#34;) set(PICO_SDK_FETCH_FROM_GIT \u0026#34;${PICO_SDK_FETCH_FROM_GIT}\u0026#34; CACHE BOOL \u0026#34;Set to ON to fetch copy of SDK from git if not otherwise locatable\u0026#34;) set(PICO_SDK_FETCH_FROM_GIT_PATH \u0026#34;${PICO_SDK_FETCH_FROM_GIT_PATH}\u0026#34; CACHE FILEPATH \u0026#34;location to download SDK\u0026#34;) if (NOT PICO_SDK_PATH) if (PICO_SDK_FETCH_FROM_GIT) include(FetchContent) set(FETCHCONTENT_BASE_DIR_SAVE ${FETCHCONTENT_BASE_DIR}) if (PICO_SDK_FETCH_FROM_GIT_PATH) get_filename_component(FETCHCONTENT_BASE_DIR \u0026#34;${PICO_SDK_FETCH_FROM_GIT_PATH}\u0026#34; REALPATH BASE_DIR \u0026#34;${CMAKE_SOURCE_DIR}\u0026#34;) endif () FetchContent_Declare( pico_sdk GIT_REPOSITORY https://github.com/raspberrypi/pico-sdk GIT_TAG master ) if (NOT pico_sdk) message(\u0026#34;Downloading Raspberry Pi Pico SDK\u0026#34;) FetchContent_Populate(pico_sdk) set(PICO_SDK_PATH ${pico_sdk_SOURCE_DIR}) endif () set(FETCHCONTENT_BASE_DIR ${FETCHCONTENT_BASE_DIR_SAVE}) else () message(FATAL_ERROR \u0026#34;SDK location was not specified. Please set PICO_SDK_PATH or set PICO_SDK_FETCH_FROM_GIT to on to fetch from git.\u0026#34; ) endif () endif () get_filename_component(PICO_SDK_PATH \u0026#34;${PICO_SDK_PATH}\u0026#34; REALPATH BASE_DIR \u0026#34;${CMAKE_BINARY_DIR}\u0026#34;) if (NOT EXISTS ${PICO_SDK_PATH}) message(FATAL_ERROR \u0026#34;Directory \u0026#39;${PICO_SDK_PATH}\u0026#39; not found\u0026#34;) endif () set(PICO_SDK_INIT_CMAKE_FILE ${PICO_SDK_PATH}/pico_sdk_init.cmake) if (NOT EXISTS ${PICO_SDK_INIT_CMAKE_FILE}) message(FATAL_ERROR \u0026#34;Directory \u0026#39;${PICO_SDK_PATH}\u0026#39; does not appear to contain the Raspberry Pi Pico SDK\u0026#34;) endif () set(PICO_SDK_PATH ${PICO_SDK_PATH} CACHE PATH \u0026#34;Path to the Raspberry Pi Pico SDK\u0026#34; FORCE) include(${PICO_SDK_INIT_CMAKE_FILE})   Ensure that you have pico_sdk_import.cmake and the assembly.s file in the add_executable() function.\n Neural Network I trained an identical model on a dataset in Python and transferred over the weights and biases to the assembly NN. I might attempt to implement back propagation in assembly in the future, but for now, I\u0026rsquo;ll stick with a basic NN.\nSmall Wine Neural Network Imports and Setup 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  import pandas as pd from scipy import stats import numpy as np from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.metrics import confusion_matrix, classification_report import torch from torch.utils.data import Dataset, DataLoader import torch.nn as nn import torch.optim as optim import seaborn as sns import matplotlib.pyplot as plt   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  def plot(t_losses, t_accuracies): fig, axs = plt.subplots(1) ax1 = axs color = \u0026#39;tab:red\u0026#39; ax1.set_xlabel(\u0026#39;training steps\u0026#39;) ax1.set_ylabel(\u0026#39;loss\u0026#39;, color=color) ax1.plot(range(len(t_losses)), t_losses, color=color) ax1.tick_params(axis=\u0026#39;y\u0026#39;, labelcolor=color) ax2 = ax1.twinx() color = \u0026#39;tab:blue\u0026#39; ax2.set_ylabel(\u0026#39;accuracy\u0026#39;, color=color) ax2.plot(range(len(t_accuracies)), t_accuracies, color=color) ax2.tick_params(axis=\u0026#39;y\u0026#39;, labelcolor=color) fig.tight_layout() plt.show()   Data Preprocessing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  white_wine = pd.read_csv(\u0026#39;winequality-white.csv\u0026#39;) red_wine = pd.read_csv(\u0026#39;winequality-red.csv\u0026#39;) wine = white_wine.append(red_wine, ignore_index=True) include = [\u0026#39;alcohol\u0026#39;, \u0026#39;chlorides\u0026#39;, \u0026#39;quality\u0026#39;] wine = wine[include] wine = wine[(np.abs(stats.zscore(wine)) \u0026lt; 3).all(axis=1)].reset_index(drop=True) wine[include[2]] = wine[include[2]].map( lambda quality: 1 if quality in [8, 9] else (0 if quality in [3, 4] else -1) ) wine = wine[wine[include[2]] != -1] wine[include[:2]] -= np.mean(wine[include[:2]])   1. Data exploration 1  wine   .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  1  wine[\u0026#39;quality\u0026#39;].value_counts()   0 213 1 193 Name: quality, dtype: int64  possible for white: chlorides alcohol\npossible for red: chlorides sulfates alcohol volatile acidity\nintersect: chlorides, alcohol\n1 2 3  #Composition of citric acid go higher as we go higher in the quality of the wine fig = plt.figure(figsize = (10,6)) sns.barplot(x = \u0026#39;quality\u0026#39;, y = include[0], data = wine)   \u0026lt;AxesSubplot:xlabel='quality', ylabel='alcohol'\u0026gt;  1 2 3  #Composition of chloride also go down as we go higher in the quality of the wine fig = plt.figure(figsize = (10,6)) sns.barplot(x = \u0026#39;quality\u0026#39;, y = include[1], data = wine)   \u0026lt;AxesSubplot:xlabel='quality', ylabel='chlorides'\u0026gt;  1 2 3 4  wine.plot.scatter(x = include[0], y = include[1], c = include[2], colormap=\u0026#39;viridis\u0026#39;)   \u0026lt;AxesSubplot:xlabel='alcohol', ylabel='chlorides'\u0026gt;  2. Data Preparation 1 2 3 4  val_cnt = wine[include[2]].value_counts() min_sample = val_cnt.min() wine = wine.groupby(include[2]).apply(lambda s: s.sample(min_sample))   1 2 3 4  wine = wine.sample(frac=1).reset_index(drop=True) ratio = 0 train, validate = np.split(wine, [int((1-ratio)*len(wine))])   1 2 3 4 5  X_train = np.array(train[include[:2]]) X_test = np.array(train[include[:2]]) y_train = np.array(train[[include[2]]]) y_test = np.array(train[[include[2]]])   2.1 PyTorch Loaders 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  ## train data class trainData(Dataset): def __init__(self, X_data, y_data): self.X_data = X_data self.y_data = y_data def __getitem__(self, index): return self.X_data[index], self.y_data[index] def __len__ (self): return len(self.X_data) train_data = trainData(torch.FloatTensor(X_train), torch.FloatTensor(y_train)) ## test data class testData(Dataset): def __init__(self, X_data): self.X_data = X_data def __getitem__(self, index): return self.X_data[index] def __len__ (self): return len(self.X_data) test_data = testData(torch.FloatTensor(X_test))   3. Fully Connected Neural Network 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  BATCH_SIZE = 64 LEARNING_RATE = 0.001 train_loader = DataLoader(dataset=train_data, batch_size=BATCH_SIZE, shuffle=True) test_loader = DataLoader(dataset=test_data, batch_size=1) class binaryClassification(nn.Module): def __init__(self): super(binaryClassification, self).__init__() # Number of input features is 2. self.layer_1 = nn.Linear(2, 2) self.layer_out = nn.Linear(2, 1) self.tan = nn.Tanh() def forward(self, inputs): x = self.tan(self.layer_1(inputs)) x = self.layer_out(x) return x device = torch.device(\u0026#34;cuda:0\u0026#34; if torch.cuda.is_available() else \u0026#34;cpu\u0026#34;) model = binaryClassification() model.to(device) print(model) criterion = nn.BCEWithLogitsLoss() optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE) def binary_acc(y_pred, y_test): y_pred_tag = torch.round(torch.sigmoid(y_pred)) correct_results_sum = (y_pred_tag == y_test).sum().float() acc = correct_results_sum/y_test.shape[0] acc = torch.round(acc * 100) return acc   binaryClassification( (layer_1): Linear(in_features=2, out_features=2, bias=True) (layer_out): Linear(in_features=2, out_features=1, bias=True) (tan): Tanh() )  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  found = False while not found: EPOCHS = 500 losses = [] accuracies = [] model = binaryClassification() model.to(device) criterion = nn.BCEWithLogitsLoss() optimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE) model.train() for e in range(1, EPOCHS+1): epoch_loss = 0 epoch_acc = 0 for X_batch, y_batch in train_loader: X_batch, y_batch = X_batch.to(device), y_batch.to(device) optimizer.zero_grad() y_pred = model(X_batch) loss = criterion(y_pred, y_batch) acc = binary_acc(y_pred, y_batch) loss.backward() optimizer.step() epoch_loss += loss.item() epoch_acc += acc.item() avg_loss = epoch_loss/len(train_loader) avg_acc = epoch_acc/len(train_loader) losses.append(avg_loss) accuracies.append(avg_acc) if avg_acc \u0026gt; 80: found = True break print(max(accuracies), accuracies.index(max(accuracies))) if found: break plot(losses, accuracies)   80.28571428571429 32  4. Evaluate 1 2 3 4 5 6 7 8 9 10 11  y_pred_list = [] model.eval() with torch.no_grad(): for X_batch in test_loader: X_batch = X_batch.to(device) y_test_pred = model(X_batch) y_test_pred = torch.sigmoid(y_test_pred) y_pred_tag = torch.round(y_test_pred) y_pred_list.append(y_pred_tag.cpu().numpy()) y_pred_list = [a.squeeze().tolist() for a in y_pred_list]   1  confusion_matrix(y_test, y_pred_list)   array([[181, 12], [ 77, 116]])  1  print(classification_report(y_test, y_pred_list))    precision recall f1-score support 0 0.70 0.94 0.80 193 1 0.91 0.60 0.72 193 accuracy 0.77 386 macro avg 0.80 0.77 0.76 386 weighted avg 0.80 0.77 0.76 386  4. Export Parameters 1 2 3  for name, param in model.named_parameters(): if param.requires_grad: print(name, param.data)   layer_1.weight tensor([[ 0.4924, -0.2594], [-0.4551, 0.1832]]) layer_1.bias tensor([-0.5771, -0.1374]) layer_out.weight tensor([[-0.3158, -0.8081]]) layer_out.bias tensor([-0.4264])  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151  def function(x): # function activation function: f(x) = 1 / (1 + e^(-x)) return 1 / ( 1 + 2.718282 ** -x ) # return np.tanh(x) def deriv_function(x): # Derivative of function: f\u0026#39;(x) = f(x) * (1 - f(x)) return function(x) * ( 1 - function(x) ) # return 1 - np.power(np.tanh(x), 2) def mse_loss(y_true, y_pred): # y_true and y_pred are numpy arrays of the same length. return ((y_true - y_pred)**2).mean() class NeuralNetwork: \u0026#39;\u0026#39;\u0026#39; A neural network with: - 2 inputs - a hidden layer with 2 neurons (h1, h2) - an output layer with 1 neuron (o1) \u0026#39;\u0026#39;\u0026#39; def __init__(self): # Weights self.w1 = np.random.normal() self.w2 = np.random.normal() self.w3 = np.random.normal() self.w4 = np.random.normal() self.w5 = np.random.normal() self.w6 = np.random.normal() # Biases self.b1 = np.random.normal() self.b2 = np.random.normal() self.b3 = np.random.normal() self.learn_rate = .005 def __str__(self): return f\u0026#39;weights: {self.w1}{self.w2}{self.w3}{self.w4}{self.w5}{self.w6}biases: {self.b1}{self.b2}{self.b3}\u0026#39; def feedforward(self, x): # x is a numpy array with 2 elements. h1 = function(self.w1 * x[0] + self.w2 * x[1] + self.b1) h2 = function(self.w3 * x[0] + self.w4 * x[1] + self.b2) o1 = function(self.w5 * h1 + self.w6 * h2 + self.b3) return o1 def train(self, data, all_y_trues): \u0026#39;\u0026#39;\u0026#39; - data is a (n x 2) numpy array, n = # of samples in the dataset. - all_y_trues is a numpy array with n elements. Elements in all_y_trues correspond to those in data. \u0026#39;\u0026#39;\u0026#39; epochs = 12000 # number of times to loop through the entire dataset self.losses = [] self.accs = [] for epoch in range(epochs): for x, y_true in zip(data, all_y_trues): # --- Do a feedforward (we\u0026#39;ll need these values later) sum_h1 = self.w1 * x[0] + self.w2 * x[1] + self.b1 h1 = function(sum_h1) sum_h2 = self.w3 * x[0] + self.w4 * x[1] + self.b2 h2 = function(sum_h2) sum_o1 = self.w5 * h1 + self.w6 * h2 + self.b3 o1 = function(sum_o1) y_pred = o1 # --- Calculate partial derivatives. # --- Naming: p_L_p_w1 stands for \u0026#34;partial L partial w1\u0026#34; p_L_p_ypred = -2 * (y_true - y_pred) # Neuron o1 p_ypred_p_w5 = h1 * deriv_function(sum_o1) p_ypred_p_w6 = h2 * deriv_function(sum_o1) p_ypred_p_b3 = deriv_function(sum_o1) p_ypred_p_h1 = self.w5 * deriv_function(sum_o1) p_ypred_p_h2 = self.w6 * deriv_function(sum_o1) # Neuron h1 p_h1_p_w1 = x[0] * deriv_function(sum_h1) p_h1_p_w2 = x[1] * deriv_function(sum_h1) p_h1_p_b1 = deriv_function(sum_h1) # Neuron h2 p_h2_p_w3 = x[0] * deriv_function(sum_h2) p_h2_p_w4 = x[1] * deriv_function(sum_h2) p_h2_p_b2 = deriv_function(sum_h2) # --- Update weights and biases # Neuron h1 self.w1 -= self.learn_rate * p_L_p_ypred * p_ypred_p_h1 * p_h1_p_w1 self.w2 -= self.learn_rate * p_L_p_ypred * p_ypred_p_h1 * p_h1_p_w2 self.b1 -= self.learn_rate * p_L_p_ypred * p_ypred_p_h1 * p_h1_p_b1 # Neuron h2 self.w3 -= self.learn_rate * p_L_p_ypred * p_ypred_p_h2 * p_h2_p_w3 self.w4 -= self.learn_rate * p_L_p_ypred * p_ypred_p_h2 * p_h2_p_w4 self.b2 -= self.learn_rate * p_L_p_ypred * p_ypred_p_h2 * p_h2_p_b2 # Neuron o1 self.w5 -= self.learn_rate * p_L_p_ypred * p_ypred_p_w5 self.w6 -= self.learn_rate * p_L_p_ypred * p_ypred_p_w6 self.b3 -= self.learn_rate * p_L_p_ypred * p_ypred_p_b3 # --- Calculate total loss at the end of each epoch if epoch % 1000 == 0: y_preds = np.apply_along_axis(self.feedforward, 1, data) acc = 100*np.count_nonzero(all_y_trues == y_preds.round())/len(data) loss = mse_loss(all_y_trues, y_preds) self.losses.append(loss) self.accs.append(acc) print(\u0026#34;epoch %d\\tloss: %f\\taccuracy: %f\u0026#34; % (epoch, loss, acc)) def plot(self): fig, axs = plt.subplots(1) ax1 = axs color = \u0026#39;tab:red\u0026#39; ax1.set_xlabel(\u0026#39;training steps\u0026#39;) ax1.set_ylabel(\u0026#39;loss\u0026#39;, color=color) ax1.plot(range(len(self.losses)), self.losses, color=color) ax1.tick_params(axis=\u0026#39;y\u0026#39;, labelcolor=color) ax2 = ax1.twinx() # instantiate a second axes that shares the same x-axis color = \u0026#39;tab:blue\u0026#39; ax2.set_ylabel(\u0026#39;accuracy\u0026#39;, color=color) # we already handled the x-label with ax1 ax2.plot(range(len(self.accs)), self.accs, color=color) ax2.tick_params(axis=\u0026#39;y\u0026#39;, labelcolor=color) fig.tight_layout() # otherwise the right y-label is slightly clipped plt.show() # network = NeuralNetwork() # Train our neural network! network.learn_rate = 0.00005 network.train(X_train, y_train.reshape(-1,)) print(network) network.plot() acc = 100*np.count_nonzero(y_train.reshape(-1,) == np.apply_along_axis(network.feedforward, 1, X_train).round())/len(X_train) print(acc)   epoch 0\tloss: 0.132531\taccuracy: 81.865285 epoch 1000\tloss: 0.132531\taccuracy: 81.865285 epoch 2000\tloss: 0.132531\taccuracy: 81.865285 epoch 3000\tloss: 0.132531\taccuracy: 81.865285 epoch 4000\tloss: 0.132531\taccuracy: 81.865285 epoch 5000\tloss: 0.132531\taccuracy: 81.865285 epoch 6000\tloss: 0.132531\taccuracy: 81.865285 epoch 7000\tloss: 0.132531\taccuracy: 81.865285 epoch 8000\tloss: 0.132531\taccuracy: 81.865285 epoch 9000\tloss: 0.132531\taccuracy: 81.865285 epoch 10000\tloss: 0.132531\taccuracy: 81.865285 epoch 11000\tloss: 0.132531\taccuracy: 81.865285 weights: -0.5241537557697997 8.022605603367996 -36.627811690638175 17.293829646720408 -27.715390143478537 6.900655940087721 biases: -1.6997071090811102 -70.55616344362397 3.983528397200501 81.86528497409327  Best Model 81.9% weights: -0.5258128356790649 8.030110880882871 -36.62607954699542 17.289156778336512 -27.706516193146673 6.907676857161875 biases: -1.7036051769265983 -70.55261667300597 3.9689563659447864\nweights: -0.5252373683043017 8.028392381234099 -36.62651348093277 17.29032523800684 -27.70874002300861 6.906127236792722 biases: -1.7024063171579678 -70.55350171869333 3.9732754230651444\n79% weights: -0.7985963217884304 8.47287278322075 -5.045041523588488 -1.042118489749843 -10.069041616614001 5.490090153973683 biases: -0.42784383682720145 -9.312642567784899 3.6226994842694573\nI used UCI\u0026rsquo;s Wine dataset since it\u0026rsquo;s popular and easily categorical. I preprocessed the data by dropping every column except citric acid, volatile acidity, and quality, and removing outlier data with a z-index greater than 3. Then I made all wines with a quality below 5 a 0, and all wines above 7 a 1. I used the remaining data to fit the nine tunable parameters (I really didn\u0026rsquo;t have to worry about overfitting 😂) of the neural network and finally copied them into assembly. The file below will, with 82% accuracy, determine whether a wine is good or bad given its alcohol and salt contents.\nassembly.s\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80  @ a neural network with two input nodes @ a hidden layer with two nodes @ and a single output node .global main .thumb_func @ use 16-bit instructions .text @ program instructions main: ldr r0, =x ldr r1, =y bl neuron0 bl neuron1 bl output mov r0, r4 @ r4 is error code mov r1, #0x01 @ exit syscall  swi 0 @ interrupt neuron0: @ multiply input values by weights @ add bias to product and store @ the output in r2 ldr r2, =x_0weight mul r2, r0, r2 @ multiply x by weight ldr r3, =y_0weight mul r3, r1, r3 @ multiply y by weight ldr r4, =n0_bias add r2, r2, r3 add r2, r2, r4 @ add bias neuron1: @ multiply input values by weights @ add bias to product and store @ the output in r3 ldr r3, =x_1weight mul r3, r0, r3 @ multiply x by weight ldr r4, =y_1weight mul r4, r1, r4 @ multiply y by weight ldr r5, =n1_bias add r3, r3, r4 add r3, r3, r5 @ add bias output: @ multiply input values by weights @ add bias to product and store @ the output in r4 ldr r4, =n0_weight mul r4, r2, r4 @ multiply n0 by weight ldr r5, =n1_weight mul r5, r3, r5 @ multiply n1 by weight ldr r6, =o0_bias add r4, r4, r5 add r4, r4, r6 @ add bias .data @ consts and vars @ input data (good wine = 1, bad wine = 0) @ below is a good wine x: .word 0x39C2 @ alcohol (%) y: .word 0x34F5 @ salt (g/dm^3) @ neuron biases n0_bias: .word 0x305A @ bias for neuron 0 n1_bias: .word 0x307B @ bias for neuron 1 o0_bias: .word 0xB10A @ bias for output @ neuron weights x_0weight: .word 0x33E8 @ x weight for neuron 0 x_1weight: .word 0x3524 @ x weight for neuron 1 y_0weight: .word 0x3695 @ y weight for neuron 0 y_1weight: .word 0xB83C @ y weight for neuron 1 n0_weight: .word 0xB028 @ neuron 0 weight n1_weight: .word 0x373F @ neuron 1 weight .end   ","date":"2021-09-10T00:00:00Z","image":"https://slc.is/images/pico.webp","permalink":"https://slc.is/archive/assembly-neural-network-on-pico/","title":"Assembly Neural Network on Pico"},{"content":"I want readers to execute code I use anywhere in my blog. Recently, I added code that scrapes DuckDuckGo\u0026rsquo;s !bangs; however, the reader would need to run the code on their own machine. It\u0026rsquo;d be helpful if they could have executable code embedded in the post.\nI searched the internet for popular online IDEs and found those listed below. I wanted to compare features and languages to determine which I should use in my blog (if any).\n   Name Website Languages HTTP Requests     Replit replit.com 63 Yes   Trinket trinket.io 10 Yes   JDoodle jdoodle.com 74 No   GeeksforGeeks geeksforgeeks.org 11 No   Tutorialspoint tutorialspoint.com 107 No   CodeChef codechef.com 54 No   Ideone ideone.com 62 No   Paiza paiza.io 31 ?    So far, I\u0026rsquo;m not happy with Replit\u0026rsquo;s UIon mobile devices, and Trinket has a great UI but a very limited number of supported languages. I don\u0026rsquo;t want to include a feature in my blog that will limit me in the future.\nIt may prove useful for others to have a list of IDEs and their features, but I won\u0026rsquo;t be including any in my website right now.\nIf I were to recommend one, however, I would vouch for Replit. I used their platform for the first two years of university and actually paid $5 a month for the Hacker plan. They\u0026rsquo;re constantly innovating and adding unique and useful features. I just hope they can improve its appearance on smaller screens. When that happens, I\u0026rsquo;ll have the difficult task of choosing between my seamless code tags and Replit\u0026rsquo;s interactive embeddings.\nEdit (9/25/2021) — I decided that in some cases running code is helpful, so I\u0026rsquo;m including Replit embeddings.\n","date":"2021-09-03T00:00:00Z","image":"https://slc.is/images/replit.webp","permalink":"https://slc.is/archive/searching-for-interactive-code/","title":"Searching for Interactive Code"},{"content":"The brain has been hacked and its security patches come slowly. In order to avoid targeted ads and refining my digital consciousness, I\u0026rsquo;m making steady progress toward respectful technology.\nAfter learning more about AI, I began to understand the importance of privacy. Everyone has their own reasons for protecting their data, and mine is to reduce the ability of models to fit me. This ties into preventing ad recommendations and other popular motivations broadly, but I doubt we understand the implications of modelling human behavior.\nTo limit my personal footprint, I began using Signal and Protonmail for private communication. My biggest challenge was converting my circles, but those closest to me tend to have similar interests. So after about a year and a half, I\u0026rsquo;m halfway there! I was initially content with protecting only my messages from peeping eyes; however I also began using private search.\nMy interests and experiences are reflected through what I search. Continuing along reducing my amount of training data, I began de-Googling. I haven\u0026rsquo;t completely removed Google searches from my life but DuckDuckGo has become a strong contender. Using !bangs, I\u0026rsquo;m able to search quickly when I have an idea of the category I\u0026rsquo;m looking for. When it comes to clueless searches, though, I still rely on Google.\nAfter using DuckDuckGo for around a month, I saw a blog post about their beta email program. I just happened to be looking for a better email (in terms of readability), so I immediately signed up. After 43 days on the waitlist, I was able to register spence@duck.com. My friends might\u0026rsquo;ve been hesitant about transitioning messaging apps, but the duck email was a hit. Within a week of my fancy duck.com email, three friends were already waiting and hoping to claim their own name.\nUsing Signal, Protonmail, and DuckDuckGo is great, but I\u0026rsquo;m still on an iPhone. My recent drive toward privacy has been partially fueled by Apple\u0026rsquo;s personal photo hashing plans. As a way to escape the big i, I\u0026rsquo;ve been looking into a de-Googled Fairphone. I\u0026rsquo;m not sure I\u0026rsquo;ll be able to completely sever ties with these companies\u0026rsquo; surveillance, but finding and testing alternatives seems like enough to me.\nAfter Apple\u0026rsquo;s invasive proposal to scan all iCloud photos, I began to value the Free Software movement and the EFF\u0026rsquo;s initiative to protect internet freedoms. I\u0026rsquo;ll move to more free software and hardware, but the going\u0026rsquo;s slow. To use linux means I need to sacrifice battery life. And to use free software means I forgo a lot of convenience.\nI want to purchase a Fairphone to support repairability and environmentally friendly practices. In addition, the Framework laptop seems incredible for the same reasons\u0026hellip; but it\u0026rsquo;s sadly out of my budget for now.\nStarting this in university is easier than after graduating and having work contacts, however, so I feel relieved about that. Throughout this process, some software has been incredibly useful in general and as alternatives.\nHere\u0026rsquo;s my list of FOSS hardware and software Computers:\n Raspberry Pi Framework Laptop  Phones:\n PinePhone Pro Fairphone Google Pixel 6 with Calyx OS  Operating Systems:\n Manjaro Debian  Software:\n VSCodium LibreOffice Audacity Gimp VLCMedia Player DuckDuckGo  CLI:\n Python Go Neovim  ","date":"2021-09-02T00:00:00Z","image":"https://slc.is/images/eff.webp","permalink":"https://slc.is/archive/exploring-privacy-tools/","title":"Exploring Privacy Tools"},{"content":"DuckDuckGo began releasing @duck.com emails. These emails are currently in beta and only act as an email-forwarding account. The purpose of this post is to stess-test the service and see where it earns the beta tag.\nDuck.com vs. Duck.co Both duck.com and duck.co forward to duckduckgo.com, so I wondered if a duck.com and duck.co email forward emails identically as well. When I tried emailing spence@duck.co, however, I received the following 550 error:\n1 2 3 4 5 6  Final-Recipient: rfc822; spence@duck.co Original-Recipient: rfc822;spence@duck.co Action: failed Status: 5.4.1 Remote-MTA: dns; duck-co.mail.protection.outlook.com Diagnostic-Code: smtp; 550 5.4.1 Recipient address rejected: Access denied.   Send Email as Duck.com to Duck.com There\u0026rsquo;s a bit of set-up to test this, so I\u0026rsquo;ll outline it in a collapsible tag.\n1 2 3 4 5 6 7 8 9 10 11  # install a mail server sudo apt install postfix # install an emailing wrapper sudo apt install sendemail # start the email server systemctl start postfix # send the email sendemail -f spence@duck.com -t spence@duck.com -u \u0026#34;Example Subject\u0026#34; -m \u0026#34;Example Message\u0026#34;   Interestingly, when sending an email from spence@duck.com to spence@duck.com, the email went through DuckDuckGo\u0026rsquo;s servers without getting flagged as spam. It might be good for DuckDuckGo to use an allow-list for filtering trusted IPs.\nIn addition, this might make it possible to send emails from a duck email without a valid SSLcertificate.\nCreating a Forwarding Loop Because it\u0026rsquo;s possible to send an email to a duck.com address from a duck.com address, it seems to be possible to create an infinite loop within the system. Obviously, a DuckDuckGo employee would need to approve one duck email forwarding to another, so it probably wouldn\u0026rsquo;t happen. Nevertheless, their back-end might not prevent it.\nSend Duck.com Email Without Forwarding Running the command from earlier:\n1  sendemail -f spence@duck.com -t email@example.com -u \u0026#34;Example Subject\u0026#34; -m \u0026#34;Example Message\u0026#34;   Nope, this fails\u0026hellip; Thank God.\nConclusion I think that \u0026ldquo;looking\u0026rdquo; at a sender is fine for DuckDuckGo to do, since they forward the email anyways. In their privacy policy, they only refrain from saving the email information, not looking at it. Because of this, they should prevent identical duck emails from forwarding to themselves. In addition, they should ensure no cycles appear in forwarding on their systems.\nThis was my first foray into really beta testing a system, but it was a lot of fun. Maybe I\u0026rsquo;ll keep doing things like these 🤩\n","date":"2021-09-01T00:00:00Z","image":"https://slc.is/images/duckEmail.webp","permalink":"https://slc.is/archive/testing-duckduckgos-email/","title":"Testing DuckDuckGo's Email"},{"content":"In response to a question about a list of all DuckDuckGo !bangs, I wrote this script:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  from requests import get from json import loads def get_bangs(): r = get(\u0026#39;https://duckduckgo.com/bang.v260.js\u0026#39;) r = loads(r.text) return r def create_dict(bangs): d = {\u0026#39;Misc\u0026#39;: set()} for i in bangs: el = (i[\u0026#39;s\u0026#39;].strip(), i[\u0026#39;t\u0026#39;].strip()) try: if i[\u0026#39;c\u0026#39;] in d: d[i[\u0026#39;c\u0026#39;]].add(el) else: d[i[\u0026#39;c\u0026#39;]] = set(el) except: d[\u0026#39;Misc\u0026#39;].add(el) return d def write_bangs(d): with open(\u0026#39;ddgBangs.txt\u0026#39;, \u0026#39;w\u0026#39;) as f: for key, value in d.items(): print(key + \u0026#39;\\n\u0026#39;) f.writelines(key + \u0026#39;\\n\u0026#39;) for el in sorted(value, key=lambda x: x[0]): print(\u0026#39;\\t\u0026#39;, \u0026#39;: \u0026#39;.join([e for e in el])) f.write(\u0026#39;\\t\u0026#39;) f.writelines(\u0026#39;: \u0026#39;.join([e for e in el])) f.write(\u0026#39;\\n\u0026#39;) if __name__ == \u0026#39;__main__\u0026#39;: bangs = get_bangs() d = create_dict(bangs) write_bangs(d)   On the site, I simply looked at the network history and saw a file requested: https://duckduckgo.com/bang.v260.js. The file was larger than any other file in the page which is what initially tipped me off. One look at it indicates that it\u0026rsquo;s a dictionary with all the !bang data.\nAmazingly, there are 13,565 !bangs. This is a short read, but the script may prove useful if DDGchanges the file from where !bangs are loaded.\nYou can download this text file which contains every !bang organized under category in alphabetical order.\n","date":"2021-08-31T00:00:00Z","image":"https://slc.is/images/ddg.webp","permalink":"https://slc.is/archive/every-bang-in-duckduckgo/","title":"Every Bang in DuckDuckGo"},{"content":"The TLD is controlled by its parent company or country. When choosing a TLD, consider the site to be strictly under the laws of the country that ultimate controls it. For example, if you use a .aedomain, with a single query from the monarchy, your site could be completely removed. On the otherhand, if you use a domain from… well let\u0026rsquo;s get into it 😉\nThe EFFoutlined a comparison of TLDs. They say that there isn\u0026rsquo;t a \u0026ldquo;best\u0026rdquo; TLD since different domains have varying purposes, but I\u0026rsquo;d say there\u0026rsquo;s definitely a top few to choose from. Here are a few takeaways from the report:\n .com and .net are owned by Verisign Domains under Verisign, and ICANNin general, are controlled by the United States ccTLDs are under the sole jurisdiction of their parent country  Now, the question naturally becomes: which countries have the best privacy and free speech laws? If the only avenue for domain takedown is through a local court, rather than through an arbitrator order or trusted notifier, that domain is only conforming to a single set of laws. Preferably those laws would be fair for the site owner.\nThe only domains that are soley controlled by federal courts are:\n   Country ccTLD     Austria .at   Germany .de   Iceland .is   Russia .ru   World .onion    Of these, the few with the strongest laws for individuals and outside the EU\u0026rsquo;s invasive policies are:\n .is .onion  What\u0026rsquo;s left are two options, but only one for the WWW. To capture the most internet users, the best option is to use a .is TLD; however, for true anonimity and control, a .onion is superior.\nIn most cases, the TLD you end up picking won\u0026rsquo;t be too important, but I believe it\u0026rsquo;s important to know who has the final say in a website\u0026rsquo;s fate. If the United States felt so inclined, over 60% of the internet could go offline. Take it from this site, there are tons of great and short .is domains available, so be sure to check out ISNIC!\n","date":"2021-08-29T00:00:00Z","image":"https://slc.is/images/eyes.webp","permalink":"https://slc.is/archive/the-best-tld-is-not-.com/","title":"The Best TLD is Not .com"},{"content":"I bought my first domain through Google Domains and actually hosted my site through Google\u0026rsquo;s website builder. It really is a great free builder with solid SEO, but I\u0026rsquo;m a programmer, so I wanted to program.\nDistributed networks are an amazing technology, and I was drawn to IPFS hosting. I used Pinata to pin my new site, but when I tried using an HTTP request for a different page, it failed. Instead of fetching pages dynamically, I created a site that downloaded every page on load. This was not scalable. The method I ended up using for posts was incredibly simple, though. All I needed to do was create a javascript file and import it into script.js.\nWhile still hosting on IPFS, I connected my GitHub repoto Pinata and enjoyed automatic deployment; however, this was nearing my interest in Go. I saw how effective Go was for serving, so I decided to take my site off the IPFS network and deploy with Go.\nNow that I had a house-hold server hosting my website, I could begin to move toward a scalable design. Slowly but surely, I converted all posts to pure .mdfiles and handled GET requests from the server. At that point I had a fully functioning Go server, but I wasn\u0026rsquo;t finished yet.\nI moved from splch.dev to splch.net and finally settled with slc.is. After learning more about TLDs, I realized I wouldn\u0026rsquo;t want to have a country with lax laws ultimately control my website. After searching for countries with the strongest privacy laws, I settled with Iceland\u0026rsquo;s .is TLD. With this strong domain name, I ventured forward in refining the website.\nHaving to create new markdown files on the server was tedious and the website was created to simplify content creation. With a server, I could finally create posts from the website! I made it so I could click on the Splchlogo and a markdown editor would appear (I\u0026rsquo;m using that very editor to write this post). With a simple POST request, I verify and write the submitted post to a markdown file. In addition, the server returns markdown posts from a folder, so all that was required was to save the new markdown file in that posts/ folder and it would populate in the website.\nI\u0026rsquo;m sure more will come with the site, but having a built-in editor makes creating posts like these a breeze. To make the experience nicer, I started using EasyMDE to create and edit posts, and Marked to render the markdown to HTML. Then, DOMPurify sanitizes the HTML before populating. I also implemented KaTex for math and highlight.js for code appearances:\n1 2 3 4 5 6  def main(): msg = \u0026#34;Hadamard Gate =\u0026#34; print(msg) if __name__ == \u0026#34;__main__\u0026#34;: main()   $$ \\frac{1}{\\sqrt{2}} \\begin{bmatrix} 1 \u0026amp; 1 \\ 1 \u0026amp; -1 \\end{bmatrix} $$\nIt\u0026rsquo;s fun to have this framework for posting — I\u0026rsquo;m having a more positive experience using CDNs to host the external libraries. Not having to worry about updating libraries I\u0026rsquo;m using is relaxing as I can focus on improving my own scripts and posts. Clearly, I\u0026rsquo;m excited about this website and hope to share it with more people! I want to make this code open-source and create a helpful template site; however, I\u0026rsquo;ll first need to improve the code a bit. But I\u0026rsquo;m very happy to say that the major work is done and the functionality is here! 🥳\nEdit (9/6/2021) — I removed EasyMDE to decrease load times. I also render code with a Replit IFrame. The site is now open-source! Check out this post to see the server running or this repo for the code! 🤩\n ","date":"2021-08-27T00:00:00Z","image":"https://slc.is/images/site.webp","permalink":"https://slc.is/archive/creating-my-site/","title":"Creating My Site"},{"content":"I began learning quantum mechanics with Professor Allan Adams on MIT OpenCourseWare! This will be an ongoing post about interesting things I learn, as a way to share a computer scientist\u0026rsquo;s perspective on quantum physics as well as to hold myself accountable in finishing the course.\n The miracle is not that electrons behave oddly. The miracle is that when you take $10^{26}$ electrons, they behave like cheese! 🧀\n The first lecture taught me something fundamental about the term superposition. As I used quantum computers, I thought about the qubits as being both 0 and 1 while in superposition; however, this is false. The qubit is in no meaningful state: not 0, not 1, not both, and not neither.\nIn the second lecture, this idea of superposition is again reiterated by the famous double-slit experiment, where an electron neither passes through the top nor bottom slits, neither both nor no slits. Contuining to experimentally demonstrate quantum properties, Professor Adams then proved Bell\u0026rsquo;s Inequality very simply as $P(a \\cup \\overline{b}) + P(b \\cup \\overline{c}) \\geq P(a \\cup \\overline{c})$. Perhaps unsurprisingly at this point, electrons\u0026rsquo; angular momenta in the x, y, and z axes, which are either up or down, do not abide by Bell\u0026rsquo;s Inequality. However, this is very surprising, because simple logic and integers must be flawed at a fundamental sense to not accurately describe quantum properties.\nI\u0026rsquo;m tempted to take a course now, because doing problem sets for a course designed to be taken in-person is tedious. I also want a certificate😮‍💨. If the OpenCourseWare site is down, click hereto download the lecture materials.\n","date":"2021-08-23T00:00:00Z","image":"https://slc.is/images/ocw1.webp","permalink":"https://slc.is/archive/quantum-physics-i/","title":"Quantum Physics I"},{"content":"Despite an earlier post being so optimistic about the IPFS, I decided to self-host this site. I\u0026rsquo;m only leaving IPFS because this site will never be popular enough to be on any node besides my own. In this way, I was already hosting from the start. It all began as a fun endeavor to apply Go, but has since led to a certificate and obsessive refinement of the server.\nMost recently, I have added the ability to edit and create posts from within this site! There\u0026rsquo;s quite a bit going on in the server\u0026hellip; particularly in one file 😳, so I should look into splitting the code into separate files: one for setting up the server, and another for parsing the markdown.\nI am really enjoying Go, though. I\u0026rsquo;m more comfortable with interpreted languages as Python was my first; however, I am quickly converting to a statically-typed fan! Also, this is my first post using the new website editor 🤪\nThis is the code for my Go server hosted on Replit. Replit makes for an easy hosting provider, as well. I can make updates quickly without worrying about power outages causing the site to go down. Initially, I was using the gzippackage from Go\u0026rsquo;s standard library, but audio couldn\u0026rsquo;t be decoded. I opted to use the package by the New York Times instead. The server configuration is primarily based on three sources: Cloudflare, Mozilla, and their observatory tool.\n","date":"2021-08-22T00:00:00Z","image":"https://slc.is/images/gocert.webp","permalink":"https://slc.is/archive/grokking-go/","title":"Grokking Go"},{"content":"This summer will be affectionately known as the Quantum Summer.\nBecause of a scheduling mishap, I found myself teaching three quantum courses at once:\n Brookhaven National Laboratory Qiskit Global Summer School QuBes Camp  This situation pushed me to balance responsibilities and make tons of quantum resources. As a result, I became inspired to buy www.quantumforay.com; a fun play on quantum fourier.\nNow, equipped with the QF website, I am inspired to make an amazing quantum curriculum from determining what worked best at the three quantum schools. I will include Google Forms as graded quizzes and cover the most essential information with additional resources linked below.\n","date":"2021-07-15T00:00:00Z","image":"https://slc.is/images/quantumSummer.webp","permalink":"https://slc.is/archive/summer-of-quantum/","title":"Summer of Quantum"},{"content":"The best way to learn how something works is to build it from scratch. Unsurprisingly, the Neural Networks from Scratch book does exactly that.\nI had the privilege to edit it alongside Harrison and Daniel, and wanted to write about my experiences editing a technical book.\nOn January 10th, 2020, Harrison, or sentdex, released a YouTube video announcing a Kickstarter campaign for funding Neural Networks From Scratch. On January 10th, I backed the Kickstarter 😂 This was the first time I would formally edit something, as well try my hand at understanding the inner workings of neural networks. Initially, hundreds of people were making suggestions on the Google Docs page and it was hard to find new suggestions; however, as traffic tapered off and I read more closely, I started to make substantial improvements.\n I edited for hours each day and on January 26th, Harrison reached out to me!\n It was so exciting to be contacted by a YouTuber I respected so much, and we began working more closely and I began editing on private pages before the book was released for edits from the larger Kickstarter backer pool. It was similar to being on the alpha team and pushing changes to the beta team. Working more closely also meant I needed to devote more time and work on their schedule. This was difficult at first, but soon I found an editing strategy that worked for me.\nThe majority of my edits through September were only grammar suggestions, but around October, I understood enough about neural networks to begin making some small changes there as well. Though many of my edits didn\u0026rsquo;t cut it, I did make a few helpful suggestions and, to me, that was amazing. I went from only knowing how to throw Tensorflow or PyTorch at machine learning problems, to understanding the backend enough to improve it.\nNear the release of NNFS, Harrison began to upload the NNFS YouTube series. Covering the same topics as the book, this tutorial series proved incredibly popular and well-made.\nThrough editing NNFS, I went from having a typical computer science student\u0026rsquo;s understanding of machine learning to knowing enough to get first place in three AI hackathons.\n","date":"2021-05-18T00:00:00Z","image":"https://slc.is/images/nnfs1.webp","permalink":"https://slc.is/archive/neural-networks-from-scratch/","title":"Neural Networks From Scratch"},{"content":"Shortly after becoming an IBM Qiskit Advocate, I was introduced to the Unitary Fund. After writing a story where the reader uses Shor\u0026rsquo;s algorithm to decrypt a stock listing, I wanted to create more stories teaching quantum algorithms.\nWith the help of the Unitary Fund, I was able to realize this dream. I created a series of stories that teach various quantum algorithms. The stories are all rooted in classic fairy tales from around the world, except the protagonist now employees their quantum prowess to succeed.\nThis project is ongoing and will hopefully cover a wide range of algorithms and tales alike. The QuantumTales site will have the most up-to-date information as well as previews. The GitHub repository is the second place to look for code and additional information.\n","date":"2021-05-18T00:00:00Z","image":"https://slc.is/images/quantumTales.webp","permalink":"https://slc.is/archive/quantum-tales/","title":"Quantum Tales"},{"content":"Half a year ago, I began the process of writing my first book. This book is special to me because it attempts to teach middle schoolers and those without experience, quantum. By using fairy tales everyone is familiar with, it is easier to teach new topics. I found that younger audiences were able to learn new material better when that knowledge was introduced in the context of popular stories. In this way, I will use stories from around the world to help teach many people the basics of quantum and inspire them to learn more.\nWhen writing this book, I found a few valuable resources to ensure writing quality and consistency. Google Ngram was particularly useful as I could often find the \u0026ldquo;perfect\u0026rdquo; word for a phrase (really the most common). I also used Google Ngram to determine which words were more common, thus, writing a more timeless book. Secondly, I reduced unintentional repetition using online-utility\u0026rsquo;s word analyzer; however, this tool only reported the total frequency of each word and I needed to know if I used the same word in close proximity.\nTo handle this issue and have many tabs of the same sites, I wrote a web extension that helped with the writing process tremendously. I called it Writest — much like better to best, Writest brings you from a writer to the writest. With this extension, I could quickly analyze my book without needing to copy and paste it into three different websites. Instead, I\u0026rsquo;d click the extension and get all the information I needed:\n readability, lexical density, n-gram search, phrase frequency, and window frequency.  When writing a book, be sure to check out the Repetition Analyzer and Google Ngram, and if you\u0026rsquo;d like an all-in-one writing tool, my Writest extension should help.\nWhen I was finally ready to have more eyes on my writing, I was grateful to have written it on Google Docs. I could simply share a link and have my friends and family make suggestions and fixes. I recommend using a word processor that allows you to share your work and collaborate easily. It made requesting help simple, encouraging me to get more edits than otherwise.\nFinally, I needed an illustrator to bring my vision to life. I used Fiverr to find an incredibly talented artist and she made my book something I will always treasure.\nHaving a professional touch to your work makes you proud, but it also encourages you to continually improve it.\n It became very difficult to continue working at times; however, the illustrations reinspired me again and again.\n I hope you found these tips helpful! I\u0026rsquo;ve linked my favorite resources below, and, in case the extension is unavailable, click hereto download it.\n  Fiverr: https://www.fiverr.com/\n  Google Docs: https://docs.google.com/\n  Google Ngram: https://books.google.com/ngrams\n  Repetion Analyzer: https://www.online-utility.org/text/analyzer.jsp\n  Writest: https://chrome.google.com/webstore/detail/writest/bicihfnmkdnfelbedknblndigjejbgcc\n  ","date":"2021-05-15T00:00:00Z","image":"https://slc.is/images/blog.webp","permalink":"https://slc.is/archive/tools-for-writing/","title":"Tools For Writing"},{"content":"I bought this domain (splch.zil) today! I have a .dev/net domain, but I don\u0026rsquo;t like the idea of renting a space. When I discovered blockchain domain names and IPFShosting, I knew it suited me.\nIt all depends on security and privacy Now, I don\u0026rsquo;t know what the future holds for blockchain and IPFS internet, but I think that the importance of publicly served domains will increase by considering present privacy trends. Specifically, as governments continue subpoenaing and gagging hosting services, people will move to more decentralized networks. I hope blockchain domains will be integrated into more browsers, though, because using IPFS gateways is… well, cumbersome. Considering how Signal and Telegram\u0026rsquo;s growths indicate a public shift toward privacy, I do believe that more blockchain domain names will resolve in more browsers soon.\nAs for the support of the .zil domain, I\u0026rsquo;m curious what will happen… As blockchain backends improve, I wonder if .zil will become outdated. Either way, multiple blockchain NFTs can redirect to my website\u0026rsquo;s IPFS hash 😜 I do hope I can keep using the Zilliqa blockchain, granted they can improve transaction speeds at lower energy costs.\nMy current worry is keeping this site small enough to be held in many IPFS nodes. I preemptively made a modular loading system for my posts, but I want to include pictures and files \u0026gt;.\u0026lt; In addition, I might implement LZString compression on posts to further reduce size; however, this would mean creating a decoder when writing (maybe an add-on to vscode), which is a bit tedious.\nDespite what the future holds for blockchain domains, this is the start of a hopefully long stream of thoughts and things I come across!\n As I stand on the edge of quantum, it only seems right that I support the new IPFS internet.\n ","date":"2021-05-14T00:00:00Z","image":"https://slc.is/images/blockchain.webp","permalink":"https://slc.is/archive/future-of-blockchain-domains/","title":"Future of Blockchain Domains"},{"content":"In a Flutter appI started — and eventually stopped — working on, I was converting country codes to their corresponding flag emojis in Dart. This was a fun problem to solve and it\u0026rsquo;s actually my highest rated solution on StackOverflow, so I wanted to save it here!\n 1 2 3 4  String countryCode = \u0026#39;us\u0026#39;; String flag = countryCode.toUpperCase().replaceAllMapped(RegExp(r\u0026#39;[A-Z]\u0026#39;), (match) =\u0026gt; String.fromCharCode(match.group(0).codeUnitAt(0) + 127397)); print(flag);     .toUpperCase() Make all characters uppercase\n us → US    RegExp(r'[A-Z]') Select each character with regex\n  .replaceAllMapped() Get each matched character\n U S    .codeUnitAt(0) Convert each character to a rune\n 85 83    + 127397 Convert each rune to a regional indicator symbol\n 127397 = 127462 (🇦\u0026rsquo;s HTML code) - 65 (A\u0026rsquo;s rune value).\n  85 + 127397 = 127482 83 + 127397 = 127480    .fromCharCode() Convert the regional indicator symbols\u0026rsquo; values to a string (flag emoji)\n 🇺 🇸 → 🇺🇸     I like this solution since each step is explained. It could be converted to any language easily, which should be the goal of any algorithm explanation.\nAlso, learning that regional indicators exist to form country flags was surprising. I did some searching and one of the earliest examples of this conversion was from neroux; however, a more interesting discussion and explanation of the code comes from Ben Dodson\u0026rsquo;s post.\n","date":"2020-09-18T00:00:00Z","image":"https://slc.is/images/stackAnswer.webp","permalink":"https://slc.is/archive/converting-country-codes-to-flag-emojis/","title":"Converting Country Codes to Flag Emojis"},{"content":"Alexandre Alexandre, my trembling wings.\nYour dead are in the fields.\nOur fight was stretched on the forest.\nA wealth of shadow lies beneath the woodland hills.\nAn earth that is not mine.\n Skies A sky became a wave,\nand suddenly the breeze -\nazure floating on the hills.\nOur music was not of a god or spirit, not of that colour of the sea.\n falafel My falafel from the seas and palm-trees.\nThis magic, the stars have been held for.\nMysterious prophets and priests return to temptation.\nSleepy and strong, lay the falafel.\n","date":"2019-09-15T00:00:00Z","image":"https://slc.is/images/alexandre.jpg","permalink":"https://slc.is/archive/poems/","title":"Poems"},{"content":" \u0026ldquo;How feasible are deep neural networks in generating thematically diverse video game music?\u0026rdquo;\n  Introduction Research The purpose of this paper is to test the ability of deep neural networks (DNNs), using long short-term memory architecture to model video game (VG) music and evaluate its aptitude in expressing thematically diverse emotion. In other words, how feasible are deep neural networks in generating thematic video game music? My goal is to test whether a DNN can compose engaging music capable of accentuating themes presented in video games. Research conducted for this paper uses the open source Tensorflow library − Magenta, along with other necessary libraries.[1] The DNN analyzed 2,933 VG songs[2] chosen for being timeless classics, was trained from that data, then created a model for generating music. Because neural networks process information similarly to a brain; e.g. receiving input (VG music), sequencing it through neurons (LSTM cells), then learning from it (adjusting weights), they are effective — unreasonably effective[3] — especially when generalizing complex datasets. Music is an example of truly complex data.\nVideo game music adds to the canonical nature of music by not exclusively deriving value from aspects of traditional music such as jazz or classical scales, triplet eighth rhythms, or $\\frac{3}{4}$ time signatures, but from context presented in the game. In video games, music is essential. The storyline constantly presents a variety of scenes which convey emotion primarily through the use of engaging music.[4] For example, in scenes of intensity, VG music will tend to Ionian (major)\nmodes and quick tempos, while during spooky scenes, suspense is built through slower tempos and lower pitches in minor keys. My model composed a fitting example of a spooky song ― shown in Figure 1.\nFigure 1. Example of Spooky Music\nIn recent years, games have been structured with procedural generation[5] which makes for a more individually adaptive approach; however, designing music for various locations (such as cave or underwater scenes) has become complicated since the map[6] is consistently variable. To have the map and music generate as the user plays would lead to a completely unique gaming experience, far more immersive than games such as Minecraft or No Man’s Sky which only utilize procedural generation for game mapping. With the emergence of deep learning, generating music based on player action and context[7] is a promising development in computer science and this research attempts to lay the foundation for this advancement for video games.\nHistorical Context The intrinsic connection between math and music has drawn attention across time from great thinkers such as Pythagoras[8] and Euclid[9] who believed mathematics played an essential role in music. However, the application of mathematical rules proved incapable of replicating the nuances of music until 1957, when Frank Rosenblatt developed the alpha Perceptron.[10] His network parsed input data through matrices which recognized patterns of important features in the data. This statistical pattern recognition modeled neurons’ interactions (biological networking), bringing computer information processing closer to what is understood as \u0026ldquo;human.\u0026rdquo;\nResearchers tested the validity of more convoluted methods of data processing by creating models eventually capable of learning and generating music: some of these were Deep Neural Networks and Hidden Markov models (HMMs). Yet as a result of the lack of big data[11] and computing power (Graphical Processing Units or GPUs) in the late 20th century, neither the DNN nor the HMM were feasible methods of generating music. That is until 2016 when Flow Machine[12] composed Daddy’s Car using an HMM and Google released its open source deep learning library, Magenta[13], which utilized long short-term memory (LSTM) DNNs in art-specific modeling. Developments of deep learning have not only been fueled by increasing computing power (Moore’s law) and big data but by the emergence of publicly available machine learning programs such as Tensorflow, Keras, and MXNet. This open source revolution[14] enables individuals to learn about, participate in, and contribute to the cutting-edge development of AI.\n Theory Both the theory behind VG music and deep learning, as well as their interactions, is essential for this research. In games, the storyline provides an understanding of context while music provides a map for emotion. By influencing the engagement of the game, music pushes the player past a simple visual story and into a cinematic experience. With the development of procedurally generated game maps, this essential question arises: can the underlying idea of map generation be applied to the generation of music?\nMusic Initially, the answer seems simple: no. Music is one of the humanities; it needs human input. And human input is necessary, especially for this research. The foundation of the model is reliant upon analysis of human creation. The training dataset is human-made songs in MIDI format, but once the model is trained and learns how VG music sounds, it generates its own. Two important features are presented regarding what the model aims to classify: the characterization and the sound of VG music. Often people recognize VG sounds as only \u0026ldquo;bleeps and bloops,\u0026rdquo;[15] but they pose an important role in the reception of emotion. The tempo, for example, is influential in emotional response; action scenes present faster tempos than romantic scenes which both impact heart rate and stress levels differently. Dr. Rick Turner[16] studied the emotional effect a classic game, Space Invaders,[17]had on stress levels and concluded that as tempo increases (in response to dire situations) players’ heart and respiratory rates greatly increase relative to their baselines. This study supports the importance of the use of video game music in creating an emotional roadmap for context, and when done well, the effect is synergistic. Video game music is driven by the events taking place in the story and its sound is an attempt to enhance these events. Music influences emotion through three primary methods: tempo, octave, and key. An example of this is when players interpret a new character as a villain or hero by the type of music played; whether it is a quick or slow tempo, in a high or low octave, or in a major or minor key. In order for the DNN to be considered feasible, it must contain these elements representative of classic VG soundtracks — reflecting events and producing a response.Deep Learning In order to assess whether a computer can generate compelling music, it is necessary to understand that deep learning is currently the most suited method. Deep learning, an emulated biological method of machine learning, is still completely mathematical (matrix-based), not having reached the sophistication of general artificial intelligence; however, deep learning processes data as a brain would: passing it through a simulated neuron (LSTM cell in this paper’s case), then learning from it. Mathematically, the model is essentially plotting each MIDI song in a high-dimensional space depending on its features, then using kernel methods (𝛗)[18] to separate each song into their appropriate classifications.\nThe generation of songs according to what the model has learned is completed by having the model predict a point in the high dimensional learning space after training. Each point represents a MIDI song in the sense that the points’ coordinates are a list of unique features. The whole process can be separated and summarized in four parts: data collection, data processing, training, and generation.\n  Data Collection: Initially, a large data set of MIDI music is collected. A small collection of data results in a faulty model, unable to correctly identify the full-range of real-world data. Large datasets tend to aid in generalization rather than memorization.\n  Data Processing: The MIDI songs are then converted[19] into a single file (notesequences.tfrecord) containing their features. Each feature is a unique characteristic of the MIDI such as the note, note intensity, decay time, and vibrato rate. Then, the file is separated into training and evaluation datasets.[20] The purpose of separating the mass of MIDI files into these datasets is to prevent the model from overfitting, or memorizing, all the data, giving a high, but deceptive rate of accuracy. To protect against this, the model independently trains on the training dataset then assesses its accuracy by evaluating the evaluation dataset.\n  Training:[21] Using the training dataset of MIDI files, the model plots the MIDI files in a high dimensional plane, with each unique feature of the MIDIs representing a coordinate. After plotting the points, the model begins to learn patterns which yield similarities within groups of MIDI songs. The model uses kernel similarity methods, such as the multi-class support vector machine (SVM),[22] to calculate a hyperplane which separates the data into their respective classifications.\n  Figure 3. Visualization of Kernel Functions[23]\nThis process is the model’s way of learning how video game music in MIDI format is commonly composed. This learning, or generalization, occurs when the LSTM cells’ values, called weights and biases, are adjusted according to the data parsed through them. The model analyzes each feature and continually updates its many layers of cells, attempting to generalize rules for accurate predictions until the training is stopped. The model’s ability to generalize data is later tested by measuring the number of accurate predictions divided by the total predictions made — yielding an accuracy metric.\nGeneration: The DNN model is finally used to generate its own data. By using advanced probability distributions and analyzing the high dimensional training map, it predicts the most probable first datapoint, then, depending on the first point, determines what the following point should be. It continues this process until a song of X data points has been generated. As shown in Figure 4, the structure of the LSTM cell enables the accurate modification of the weights of matrices (systems of equations) of terms, $Cx^b_a$.  Figure 4. Architecture of an LSTM cell\nThese systems of equations create high dimensional graphs and are used able to generate each data point sequentially based on what it has learned from the analyzed training data. Simply put, the deep learning model learns complex patterns much like a human brain. By using the current and previous positions of the time step, the entire model determines what is probably the next data point to generate. \u0026ldquo;Essentially, the entire model is a big probability distribution.\u0026rdquo;[24]\nAccording to this design, the model should be structurally primed for generalizing complex data such as video game music. Furthermore, the DNN ― coupled with an LSTM architecture for long-term data structure ― is currently the most feasible method of generating music since it is able to emulate biological information processing. In addition, the LSTM architecture retains defining features to produce long-term structure with repetition, or refrains.\nThe application of this theory on a topic such as VG music is new since the writing of this paper (May 2018). This is important since this ability to have a DNN recognize and compose thematically diverse pieces highlights the progress achieved in machine learning research ― having produced a predominantly generalized DNN. The specific DNN using LSTM cells for learning is especially effective when dealing with complex data, making it the best available option for learning thematically distinct video game music.\n Neural Network The neural network used in this research is a deep neural network with an LSTM architecture. The most state-of-the-art machine learning program, Tensorflow, and its art modeling library, Magenta, were employed to process the information. After determining which libraries to use, I developed the model by first setting the number of input cells as the maximum possible outputs a MIDI could have per timestep (which is 24). Then to generalize, not memorize, information, I set up a bottleneck where the all possible data at any time-step is fed through 13 nodes (because of 12 notes in an octave and 1 note of silence, or rest), modulated, then passed to a layer of LSTM cells which are able to update matrices to retain long-term memory.\nDesign I used an LSTM instead of gated recurrent unit (GRU) architecture primarily because my goal was to generalize video game music as a whole and retain long-term structure. With the composition of music, two problems are common: one phrase is constantly repeated without elaboration or there are no motifs. LSTM networks solve both these problems. The activation function (or the identity function) of an LSTM-DNN is unique since it has a derivative of 1. This helps prevent against the vanishing or exploding gradient ― when the derivative of training or learning becomes either exponentially small or large ― since backpropagation remains constant because the identity function weighs at 1. The LSTM structure is able to accurately generalize long streams of information without overwriting important data in its matrices. Through the passing of huge amounts of data, the network can also begin to determine general features which define the data, or specifically, VG music.\n Training Data The MIDI files were carefully selected from a variety of retro (vintage) video games,[25] which rely more on music for their appeal than modern games which boast 3D graphics and immersive maps. I downloaded 2,933 VG songs to provide the DNN a large dataset to train and evaluate from. A popular game, Super Mario Bros., is a great example of a game mutually loved for its music as well as its gameplay. Designers recognize the importance of music to either evoke an enjoyable or Pavlovian response. In Super Mario Bros., the music at each level reflects the situations the player faces, i.e., underwater levels are enhanced with music using tremolo frequently, and the antagonist Bowser’s battles incorporating quick and intense music with blatant forte accents. Games in the retro era required captivating and recursive music as a means to draw the gamer deeper into the gaming dimension; thus, VG music inherently has the capability of representing a world through music. This capability to engage the player must be present in the compositions of the DNN in order for it to qualify as a method of feasible video game music generation.\nNormalization of Data Initially, I began with 4,164 sound files, but many of these files were sound effects or music compilations (often used for credits), so I removed all audio below $\\frac{1}{2}$ minute and above $7\\frac{1}{2}$ minutes.[26] Afterward my training data consisted of 2,933 songs in MIDI format. Then, for the DNN to use the data, I normalized it to a very large array.[27] The normalization modulated the songs in two important ways: first, it transposed them from -3 to +3 octaves (totalling 7 octaves including the tonic), then added 5 stretch factors to the data. As a result, my input data size increased by a factor of 35 compared to pre-normalization. Effectively, my dataset included 102,655 MIDI songs. This data was then parsed as a string of input vectors (tensors) and labels, retaining every feature. I separated 90% of the songs (92,389) in the array to the training dataset for training and the remaining 10% to the evaluation dataset[28] for finding the real-world accuracy of the model. I used a Magenta provided program to parse the data into these two arrays.[29] The data was then able to be understood and trained upon by the DNN.\nTraining Figure 5. Accuracy/ Learning Rate of the Neural Network\nDuring the training process, each of the 4 layers of the DNN extracted features, or information, it recognized as important. Accuracy in terms of machine learning means the ability of the network to compose music containing the important features it recognized. When the DNN correctly identified key or consistent features of the sample VG music, the accuracy of the generated music increased as seen in Figure 5.\nThe increase in accuracy reinforces the network to continue its effective methods of learning. Eventually, the model learns important aspects of the training data (VG music) and is able to generalize and create its own data with more accuracy. A quarter of the way through the training ( ≈ step 4.00k ), the model was capable of generating viable video game music with a 7.5% probability. As training continued, it eventually ( ≈ step 15.00k ) was producing music with a 70% success probability.\nAccuracy does not represent the nuances as the DNN further generalizes data, so although the accuracy may be reaching a logarithmic limit (Figure 5., asymptote ≈ .4), the generalization occurring can be at a much steeper derivative. In certain cases, with too many input nodes for a given sample size, the DNN memorizes instead of generalizing the data. The accuracy thus reaches a high but deceptive rate of 100% accuracy since the DNN is failing at creation by plagiarizing. Because of the deliberate bottleneck put on the DNN (number of input nodes and layers), it could not memorize the 2,933 MIDI songs, but was forced to learn their general structure instead.\nComposition Immediately after the DNN began training, I had it generate a song. It outputted a chaotic mess of notes thrown on a staff (Figure 6); yet, this was to be expected.\nFigure 6. Untrained Music Generation\nAfter 15,000 training iterations, the DNN started to produce music consistent with VG genres as it began to identify characteristic features. The DNN learned the differences between ominous, victorious, and other thematic genres primarily due to the LSTM cells’ effective handling of long-term dependencies with the identity function.\nFigure 7. Pleasant Generated Song\nNearing the end ( ≈ step 16.00k ) of the training process, 100% of the songs stayed in a specific key and contained refrains; yet, a majority ( ≈ 74% ) were basic and showed sparse creativity within musical phrases.\nThe song in Figure 6 lacks a discernible key[30] and repeated refrain. Figure 7 on the other hand has a refrain reminiscent of video game music and a flow with constant rhythm, key, and complexity in its variety of notes. Comparing the two songs highlights the importance of training and the effectiveness of the training data. After 6 days, the network progressed from total ignorance in musical composition to the ability to generate refrains appropriate for VG environments in a consistent key. Given 144 hours of training, the DNN with an LSTM architecture performed excellently and proved to be a highly feasible method of composing short refrains for VG soundtracks. If provided more training time, the DNN would be capable of producing longer pieces of music; however, the current unoptimized hyperparameters of the DNN would bottleneck the ability to take full advantage of the training data. This is seen in the asymptotic approach ( .4 ) of its accuracy (Figure 5).\n Evaluation Overview I evaluated this model by analyzing 320 songs generated by the DNN throughout the( ≈ 16.00k ) training steps. As expected, the quality (specifically of consistent scale patterns, constant rhythm, and note complexity) of the generated songs increased over training time (144 hours). Distinct themes were also learned from the DNN as the t-SNE visualization suggests (Figure 8). The DNN learned enough prevalent information in the huge arrays of parsed MIDIs to separate songs with minor keys and songs with quick tempos. This feature analysis is later confirmed by the ability of the DNN to compose songs with 26% chance of showing distinctly thematic phrases shown in Figure 8. This project confirms that machine learning has progressed immensely as it can produce, with a 26% chance, music viable enough to be implemented into a game. Despite this ability to compose music, the program still lacks consistency in the aesthetics of music. The network is currently not at a level where it can be implemented into a modern game; however, it can be used to create potential game songs, then expanded upon by VG music composers.\n Successes In terms of becoming more similar to a biological human mind, biological networking in DNNs advance artificial intelligence with deep learning and an LSTM architecture. This research furthers the merging of artistic and AI movements; however, the possibility of generating music procedurally would only be possible with more training, an efficient generation method, and more powerful hardware. Out of a batch of 10 generated songs, typically 3 are enjoyable to listen to and contain intriguing compositional elements. This would be helpful for independent (or indie) game developers looking for royalty-free music ideas rather than full-fledged integration into games. The goal of this research was to test how feasible deep neural networks are in the composition of video game music. My final conclusion is that the DNN is most feasible in providing ideas rather than an integration into games given its unoptimized hyperparameters.\nLimitations Only 30 years ago, the Nintendo Game Boy was struggling to balance music with sound effects on its arbitrary 4-bit wave channel, but now large AAA[31] video games often have world-renowned orchestras performing their music for a high quality gaming experience. This poses a difficulty for the DNN since it is based on MIDI generation. This DNN is only currently capable of generating music for a retro-styled game. For AAA VG usage, an implementation of direct wave transformation (similar to WaveNet)[32] using a DNN-LSTM design would eventually be able to procedurally generate orchestral sounding music on gaming devices of the near-future (in around 5 years according to Moore’s Law).\n Conclusion Background Until recently, only humans were capable of creative action to the extent of composing music; however, machine learning is challenging prior paradigms by leading computers to the frontier of artificial general intelligence. Computer-generated music has been in development since Alan Turing began the integration of technologies and arts[33] by transposing music for a computer to perform. Despite this capacity spanning over half a century, considerable progress only recently emerged due to the development of the graphical processing unit and deep learning in 2005. These advancements facilitated the paramount relationship between machine and human intelligence toward the creation of artificial intelligence.\nBy utilizing Google’s Tensorflow library, Magenta, I tested deep learning beyond previous bounds by training my model on video game music as a whole instead of focusing on only one genre such as romantic, reggae, or jazz. This challenged the capabilities of deep neural networks since throughout a game many themes are presented; ranging from war, defeat and victory, to love and death. The aesthetics of music are ultimately subjective; nevertheless, my analysis, in an attempt to mitigate biases, individually assigned value to consistent scale patterns, constant rhythm, and note complexity for each generated song.\nThis deep generative model, using a long short-term memory architecture, trained on 2,933 video game songs, recognized unique themes, then however short, created its own original and compelling refrains from them. Despite the successful brief compositions, the network is not yet feasible as a method of generating modern VG music since games require consistent musical quality. I predict within the next 5 years, research such as this will likely be implemented into video games to provide real-time procedural direct-wave music generation.\nAssessment This research resulted in the creation of a DNN capable of generating thematic and compelling motifs and phrases. These refrains however, were short and often repetitive beyond a 30 second time frame (slight vanishing gradient issue). How feasible was the DNN in generating video game music? This network was feasible in a raw sense, offering only the necessary catchy phrase to hook the player in momentarily. This project requires enhanced hardware and more effective machine learning libraries to provide real-time, high-fidelity music generation in video games, especially games with the expectation of direct-wave rather than MIDI music. Although this DNN is ineffective for large-scale, AAA games, it could be improved, then implemented in retro style games typically possessing MIDI/ 8-bit music. The recent interest in nostalgic gaming has sent indie games such as Shovel Knight and Celeste to the top of the charts ― this research proves very feasible for projects such as these. The conclusion for this paper is that, for nostalgic, 8-bit style games, this DNN is a feasible and innovative method of generating music.\n Works Cited Adams, Tarn. Procedural Generation in Game Design. Productivity Press, 2017.\nAgnello, Anthony John. \u0026ldquo;The 25 Greatest Video Game Soundtracks of All Time.\u0026rdquo; GamesRadar+, 29 June 2016, www.gamesradar.com/the-25-greatest-video-game-soundtracks-of-all-time/. Accessed 2 June 2017.\nArthur, Lisa. \u0026ldquo;What Is Big Data?\u0026rdquo; Forbes, Forbes Magazine, 15 Aug. 2013, www.forbes.com/sites/lisaarthur/2013/08/15/what-is-big-data/. Accessed 29 Oct. 2017.\nDeMaria, Rusel, and Johnny L. Wilson. High Score!: the Illustrated History of Electronic Games. 1, McGraw-Hill/ Osborne, 2004. ISBN 0-07-222428-2.\nEck, Douglas. \u0026ldquo;Magenta.\u0026rdquo; Magenta, Google, 2016, www.magenta.tensorflow.org/. Accessed 27 Aug. 2017.\nEuclid. \u0026ldquo;Στοιχεῖα Stoicheia.\u0026rdquo; The Elements, 300 BCE.\nFitzpatrick, Alex. \u0026ldquo;Best Video Games of All Time: TIME\u0026rsquo;s Top 50.\u0026rdquo; Time, Time, 23 Aug. 2016, www.time.com/4458554/best-video-games-all-time/. Accessed 30 May 2017.\nHawthorne, Curtis. \u0026ldquo;Tensorflow/Magenta.\u0026rdquo; GitHub, Google, 30 Oct. 2017, www.github.com/tensorflow/magenta/blob/master/magenta/scripts/convert_dir_to_note_se quences.py. Accessed 5 Nov. 2017.\nKarpathy, Andrej. \u0026ldquo;The Unreasonable Effectiveness of Recurrent Neural Networks.\u0026rdquo; The Unreasonable Effectiveness of Recurrent Neural Networks, www.karpathy.github.io/2015/05/21/rnn-effectiveness/. Accessed 20 Sep. 2017.\nKung, S. Y. \u0026ldquo;Machine Learning and Kernel Vector Spaces.\u0026rdquo; Kernel Methods and Machine Learning, June 2014, pp. 1–2., doi:10.1017/cbo9781139176224.002.\nMurphy, Kevin P. Machine Learning: a Probabilistic Perspective. MIT Press, 2013.\nNishikado, Tomohiro. \u0026ldquo;Space Invaders.\u0026rdquo; Space Invaders, Taito, 1978, www.spaceinvaders.net/. Accessed 4 Dec. 2017.\nNPR. \u0026ldquo;The Evolution of Video Game Music.\u0026rdquo; NPR, 13 Apr. 2008, www.npr.org/templates/story/story.php?storyId=89565567. Accessed 4 Nov. 2017.\nPachet, François. \u0026ldquo;AI Music-Making.\u0026rdquo; Flow Machines, Sony CSL, 19 Sept. 2016, www.flow-machines.com/. Accessed 27 Aug. 2017.\nPlans, David \u0026amp; Morelli, Davide. (2012). Experience-Driven Procedural Music Generation for Games. Computational Intelligence and AI in Games, IEEE Transactions on. 4. 192-198. 10.1109/TCIAIG.2012.2212899.\nPythagoras. \u0026ldquo;Musica Universalis.\u0026rdquo; Harmony of the Spheres, 6th Century BCE.\nRoberts, Adam. \u0026ldquo;Tensorflow/Magenta.\u0026rdquo; GitHub, Google, 23 May 2017, www.github.com/tensorflow/magenta/blob/master/magenta/models/melody_rnn/melody_rn n_generate.py Accessed 22 June 2017.\nRosenblatt, Frank. The perceptron, a perceiving and recognizing automaton Project Para. Cornell Aeronautical Laboratory, 1957.\nSchillinger, Raymond. \u0026ldquo;The Open Source Revolution.\u0026rdquo; The Huffington Post, TheHuffingtonPost.com, 15 Feb. 2011, www.huffingtonpost.com/raymond-schillinger/the-open-source-revolutio_b_823112.html Accessed 29 Oct. 2017.\nSeabrook, Andrea, and Jack Wall. \u0026ldquo;All Things Considered.\u0026rdquo; The Evolution of Video Game Music, National Public Radio, 13 Apr. 2008.\nSimon, Ian. \u0026ldquo;Tensorflow/Magenta.\u0026rdquo; GitHub, Google, 19 June 2017, www.github.com/tensorflow/magenta/blob/master/magenta/models/melody_rnn/melody_rn n_create_datset.py. Accessed 22 June 2017.\nTang, Yuan. Kernel Mapping. Digital image. Improving Linear Models Using Explicit Kernel Methods. Google, 2 Nov. 2017. Web. \u0026lt;www.tensorflow.org/tutorials/kernel_methods\u0026gt;. Accessed 3 Dec. 2017.\nTurner, J. R., Carroll, D. and Courtney, H. (1983), Cardiac and Metabolic Responses to \u0026ldquo;Space Invaders\u0026rdquo;: An Instance of Metabolically-Exaggerated Cardiac Adjustment?. Psychophysiology, 20: 544–549. doi:10.1111/j.1469-8986.1983.tb03010.x\nVan Den Oord, Aaron, et al. \u0026ldquo;Wavenet: A generative model for raw audio.\u0026rdquo; arXiv preprint arXiv:1609.03499 (2016). VGMusic. \u0026ldquo;Video Game Music Archive.\u0026rdquo; VGMusic - XX,XXX Game Music MIDI Files, Shane Evans, www.vgmusic.com/. Accessed 3 June 2017.\nWellington, Agence France-Presse in. \u0026ldquo;First Recording of Computer-Generated Music\u0026rdquo; The Guardian, Guardian News and Media, 26 Sept. 2016, www.theguardian.com/science/2016/sep/26/first-recording-computer-generated-music-created-alan-turing-restored-enigma-code. Accessed 10 Oct. 2017.\nWang, Zhe, and Xiangyang Xue. \u0026ldquo;Multi-Class Support Vector Machine.\u0026rdquo; Support Vector Machines Applications, 2014, pp. 23–48., doi:10.1007/978-3-319-02300-7_2.\n Appendices Appendix A ─ Video Games[34], [35]  Super Mario Bros. Pokémon Tetris Zelda Kirby Donkey Kong Metroid Halo Galaga Chrono Trigger Street Fighter Metal Gear Solid Castlevania Mass Effect Advance Wars Kingdom Hearts Professor Layton Fire Emblem Mega Man Final Fantasy Sonic the Hedgehog Elder Scrolls Baldur’s Gate  Appendix B ─ Data Preparation MIDI Size Sorter:\nMIDI Sequencer:[36]\nCreate Datasets (Training and Evaluation):[37] Appendix C ─ Deep Neural Network Model:\nTraining:Generate:[38]Appendix D ─ Midi Analysis Song 1 (Note Breakdown):Song 1 (Sheet Music ~ Pleasant):\nSong 2 (Note Breakdown):Song 2 (Sheet Music ~ Spooky):\nSong 3 (Note Breakdown):\nSong 3 (Sheet Music ~ Funky):\nSong 4 (Note Breakdown):\nSong 4 (Sheet Music ~ Chaotic):\n Appendix E ─ Outlines Computer - Google Virtual Machine (Training Model ~ 6 Days):\nCPU:\n (8) Intel® Xeon® Processor E5-2660  RAM:\n 52 Gigabytes of DDR4  OS:\n Linux (Debian 8 \u0026ldquo;Jessie\u0026rdquo;)  Libraries:\n Python 2.7 Python-pip matplotlib, scipy, bokeh, IPython, pandas Tensorflow Magenta Bazel  Commands\n  Note Sequence: ./bazel-bin/magenta/scripts/convert_dir_to_note_sequences \u0026ndash;input_dir=~/ee/midi/ \u0026ndash;output_file=~/ee/res/notesequences.tfrecord \u0026ndash;num_threads=64 \u0026ndash;log=INFO\n  Dataset: ./bazel-bin/magenta/melody_rnn_create_dataset \u0026ndash;config=attention_rnn \u0026ndash;input=~/ee/res/notesequences.tfrecord \u0026ndash;output_dir=~/ee/res/out/ \u0026ndash;eval_ratio=0.01\n  Train: ./bazel-bin/magenta/train \u0026ndash;config=attention_rnn \u0026ndash;run_dir=~/ee/res/rundir/ \u0026ndash;sequence_example_file=~/ee/res/out/training_melodies.tfrecord \u0026ndash;hparams=\u0026ldquo;batch_size=512,rnn_layer_sizes=[64,64]\u0026rdquo;\n  Generate: ./bazel-bin/magenta/generate \u0026ndash;config=attention_rnn \u0026ndash;run_dir=~/ee/res/rundir/ \u0026ndash;output_dir=~/ee/res/generated/ \u0026ndash;num_outputs=10 \u0026ndash;num_steps=480 \u0026ndash;hparams=\u0026ldquo;batch_size=512,rnn_layer_sizes=[64,64]\u0026rdquo; \u0026ndash;primer_melody=\u0026quot;[]\u0026quot;\n  Appendix F ─ Sound Files  Song 1 (Audio ~ Pleasant)  www.soundcloud.com/splch/growing?in=splch/sets/magenta-video-game-music\nSong 2 (Audio ~ Spooky)  www.soundcloud.com/splch/spooky?in=splch/sets/magenta-video-game-music\nSong 3 (Audio ~ Funky)  www.soundcloud.com/splch/technocafe?in=splch/sets/magenta-video-game-music\nSong 4 (Audio ~ Chaotic)  www.soundcloud.com/splch/mash?in=splch/sets/magenta-video-game-music\n [1] Appendix E, 2.2.1\n[2] \u0026ldquo;Video Game Music Archive.\u0026rdquo; VGMusic - XX,XXX Game Music MIDI Files, Shane Evans, www.vgmusic.com/. Accessed 3 June 2017.\n[3] Karpathy, Andrej. \u0026ldquo;The Unreasonable Effectiveness of Recurrent Neural Networks.\u0026rdquo; The Unreasonable Effectiveness of Recurrent Neural Networks, www.karpathy.github.io/2015/05/21/rnn-effectiveness/. Accessed 20 Sep. 2017.\n[4] \u0026ldquo;The Evolution of Video Game Music.\u0026rdquo; NPR, NPR, 13 Apr. 2008, www.npr.org/templates/story/story.php?storyId=89565567. Accessed 4 Nov. 2017.\n[5] Adams, Tarn. Procedural Generation in Game Design. Productivity Press, 2017.\n[6] The total space available to the player during the course of completing a discrete objective.\n[7] Plans, David \u0026amp; Morelli, Davide. (2012). Experience-Driven Procedural Music Generation for Games. Computational Intelligence and AI in Games, IEEE Transactions on. 4. 192-198. 10.1109/TCIAIG.2012.2212899.\n[8] Pythagoras. \u0026ldquo;Musica Universalis.\u0026rdquo; Harmony of the Spheres, 6th Century BCE.\n[9] Euclid. \u0026ldquo;Στοιχεῖα Stoicheia.\u0026rdquo; The Elements, 300 BCE.\n[10] Rosenblatt, Frank. The perceptron, a perceiving and recognizing automaton Project Para. Cornell Aeronautical Laboratory, 1957.\n[11] Arthur, Lisa. \u0026ldquo;What Is Big Data?\u0026rdquo; Forbes, Forbes Magazine, 15 Aug. 2013, www.forbes.com/sites/lisaarthur/2013/08/15/what-is-big-data/. Accessed 29 Oct. 2017.\n[12] Pachet, François. \u0026ldquo;AI Music-Making.\u0026rdquo; Flow Machines, Sony CSL, 19 Sept. 2016, www.flow-machines.com/. Accessed 20 Aug. 2017.\n[13] Eck, Douglas. \u0026ldquo;Magenta.\u0026rdquo; Magenta, Google, 2016, www.magenta.tensorflow.org/. Accessed 27 Aug. 2017.\n[14] Schillinger, Raymond. \u0026ldquo;The Open Source Revolution.\u0026rdquo; The Huffington Post, TheHuffingtonPost.com, 15 Feb. 2011, www.huffingtonpost.com/raymond-schillinger/the-open-source-revolutio_b_823112.html. Accessed 29 Oct. 2017.\n[15] Seabrook, Andrea, and Jack Wall. \u0026ldquo;All Things Considered.\u0026rdquo; The Evolution of Video Game Music, National Public Radio, 13 Apr. 2008.\n[16] Turner, J. R., Carroll, D. and Courtney, H. (1983), Cardiac and Metabolic Responses to \u0026ldquo;Space Invaders\u0026rdquo;: An Instance of Metabolically-Exaggerated Cardiac Adjustment?. Psychophysiology, 20: 544–549. doi:10.1111/j.1469-8986.1983.tb03010.x\n[17] Nishikado, Tomohiro. \u0026ldquo;Space Invaders.\u0026rdquo; Space Invaders, Taito, 1978, www.spaceinvaders.net/. Accessed 4 Dec. 2017.\n[18] Kung, S. Y. \u0026ldquo;Machine Learning and Kernel Vector Spaces.\u0026rdquo; Kernel Methods and Machine Learning, June 2014, pp. 1–2., doi:10.1017/cbo9781139176224.002.\n[19] Appendix E, 3.1.1\n[20] Appendix E, 3.2.1\n[21] Appendix E, 3.3.1\n[22] Wang, Zhe, and Xiangyang Xue. \u0026ldquo;Multi-Class Support Vector Machine.\u0026rdquo; Support Vector Machines Applications, 2014, pp. 23–48., doi:10.1007/978-3-319-02300-7_2.\n[23] Tang, Yuan. Kernel Mapping. Digital image. Improving Linear Models Using Explicit Kernel Methods. Google, 2 Nov. 2017. Web. \u0026lt;www.tensorflow.org/tutorials/kernel_methods\u0026gt;. Accessed 3 Dec. 2017.\n[24] Murphy, Kevin P. Machine Learning: a Probabilistic Perspective. MIT Press, 2013.\n[25] Appendix A\n[26] Appendix B, MIDI Size Sorter\n[27] Appendix B, MIDI Sequencer\n[28] Appendix E, 3.2.1\n[29] Appendix B, Create Datasets (Training and Evaluation)\n[30] Appendix D, Song 4 (Note Breakdown)\n[31] DeMaria, Rusel, and Johnny L. Wilson. High Score!: the Illustrated History of Electronic Games. 1, McGraw-Hill/ Osborne, 2004. ISBN 0-07-222428-2.\n[32] Van Den Oord, Aaron, et al. \u0026ldquo;Wavenet: A generative model for raw audio.\u0026rdquo; arXiv preprint arXiv:1609.03499 (2016).\n[33] Wellington, Agence France-Presse in. \u0026ldquo;First Recording of Computer-Generated Music\u0026rdquo; The Guardian, Guardian News and Media, 26 Sept. 2016, www.theguardian.com/science/2016/sep/26/first-recording-computer-generated-music-created-alan-turing-restored-enigma-code. Accessed 10 Oct. 2017.\n[34] Agnello, Anthony John. \u0026ldquo;The 25 Greatest Video Game Soundtracks of All Time.\u0026rdquo; GamesRadar+, 29 June 2016, www.gamesradar.com/the-25-greatest-video-game-soundtracks-of-all-time/. Accessed 2 June 2017.\n[35] Fitzpatrick, Alex. \u0026ldquo;Best Video Games of All Time: TIME\u0026rsquo;s Top 50.\u0026rdquo; Time, Time, 23 Aug. 2016, www.time.com/4458554/best-video-games-all-time/. Accessed 30 May 2017.\n[36] Hawthorne, Curtis. \u0026ldquo;Tensorflow/Magenta.\u0026rdquo; GitHub, Google, 30 Oct. 2017, www.github.com/tensorflow/magenta/blob/master/magenta/scripts/convert_dir_to_note_sequences.py. Accessed 5 Nov. 2017.\n[37] Simon, Ian. \u0026ldquo;Tensorflow/Magenta.\u0026rdquo; GitHub, Google, 19 June 2017, www.github.com/tensorflow/magenta/blob/master/magenta/models/melody_rnn/melody_rnn_create_datset.py. Accessed 22 June 2017.\n[38] Roberts, Adam. \u0026ldquo;Tensorflow/Magenta.\u0026rdquo; GitHub, Google, 23 May 2017, www.github.com/tensorflow/magenta/blob/master/magenta/models/melody_rnn/melody_rnn_generate.py Accessed 22 June 2017.\n","date":"2018-03-14T00:00:00Z","image":"https://slc.is/images/tcgj/image24.png","permalink":"https://slc.is/archive/ib-cs-extended-essay/","title":"IB CS Extended Essay"},{"content":"One of my first projects was AI projects was taking the OpenWorm C. Elegans brain map and connecting it to a Raspberry Pi. The Pi was integrated with Lego Mindstorms, so the Lego motors would move in the direction the worm wanted to go.\nrickPi3 Worm Brain # Written by Spencer Churchill 2016, in Python 2.7 # The BrickPi3 Worm Brain uses a Postsynaptic dictionary based on the C Elegans Connectome Model # This application can be ran on the Raspberry Pi BrickPi robot with an ultrasonic sensor that represents Nose Touch when activated from BrickPi import * import time BrickPiSetup() # setup the serial port for communication BrickPi.MotorEnable[PORT_A] = 1 #Enable the Motor A BrickPi.MotorEnable[PORT_B] = 1 #Enable the Motor D BrickPi.SensorType[PORT_3] = TYPE_SENSOR_ULTRASONIC_CONT\t#Setting the type of sensor at PORT3 BrickPiSetupSensors() #Send the properties of sensors to BrickPi global speed speed = -200 def fwd(): BrickPi.MotorSpeed[PORT_A] = -speed BrickPi.MotorSpeed[PORT_B] = -speed def bwd(): BrickPi.MotorSpeed[PORT_A] = speed BrickPi.MotorSpeed[PORT_B] = speed def left_rot(): BrickPi.MotorSpeed[PORT_A] = speed BrickPi.MotorSpeed[PORT_B] = 0 def right_rot(): BrickPi.MotorSpeed[PORT_A] = 0 BrickPi.MotorSpeed[PORT_B] = speed def stop(): BrickPi.MotorSpeed[PORT_A] = 0 BrickPi.MotorSpeed[PORT_B] = 0 def set_speed(spd): global speed speed = spd # The postsynaptic dictionary contains the accumulated weighted values as the # connectome is executed postsynaptic = {} global thisState global nextState thisState = 0 nextState = 1 # The Threshold is the maximum accumulated value that must be exceeded before # the Neurite will fire threshold = 30 # Accumulators are used to decide the value to send to the Left and Right motors # of the GoPiGo robot accumleft = 0 accumright = 0 # Used to remove from Axon firing since muscles cannot fire. muscles = [\u0026#39;MVU\u0026#39;, \u0026#39;MVL\u0026#39;, \u0026#39;MDL\u0026#39;, \u0026#39;MVR\u0026#39;, \u0026#39;MDR\u0026#39;] # Used to accumulate muscle weighted values in body muscles 07-23 = worm locomotion musDleft = [\u0026#39;MDL07\u0026#39;, \u0026#39;MDL08\u0026#39;, \u0026#39;MDL09\u0026#39;, \u0026#39;MDL10\u0026#39;, \u0026#39;MDL11\u0026#39;, \u0026#39;MDL12\u0026#39;, \u0026#39;MDL13\u0026#39;, \u0026#39;MDL14\u0026#39;, \u0026#39;MDL15\u0026#39;, \u0026#39;MDL16\u0026#39;, \u0026#39;MDL17\u0026#39;, \u0026#39;MDL18\u0026#39;, \u0026#39;MDL19\u0026#39;, \u0026#39;MDL20\u0026#39;, \u0026#39;MDL21\u0026#39;, \u0026#39;MDL22\u0026#39;, \u0026#39;MDL23\u0026#39;] musVleft = [\u0026#39;MVL07\u0026#39;, \u0026#39;MVL08\u0026#39;, \u0026#39;MVL09\u0026#39;, \u0026#39;MVL10\u0026#39;, \u0026#39;MVL11\u0026#39;, \u0026#39;MVL12\u0026#39;, \u0026#39;MVL13\u0026#39;, \u0026#39;MVL14\u0026#39;, \u0026#39;MVL15\u0026#39;, \u0026#39;MVL16\u0026#39;, \u0026#39;MVL17\u0026#39;, \u0026#39;MVL18\u0026#39;, \u0026#39;MVL19\u0026#39;, \u0026#39;MVL20\u0026#39;, \u0026#39;MVL21\u0026#39;, \u0026#39;MVL22\u0026#39;, \u0026#39;MVL23\u0026#39;] musDright = [\u0026#39;MDR07\u0026#39;, \u0026#39;MDR08\u0026#39;, \u0026#39;MDR09\u0026#39;, \u0026#39;MDR10\u0026#39;, \u0026#39;MDR11\u0026#39;, \u0026#39;MDR12\u0026#39;, \u0026#39;MDR13\u0026#39;, \u0026#39;MDR14\u0026#39;, \u0026#39;MDR15\u0026#39;, \u0026#39;MDR16\u0026#39;, \u0026#39;MDR17\u0026#39;, \u0026#39;MDR18\u0026#39;, \u0026#39;MDR19\u0026#39;, \u0026#39;MDR20\u0026#39;, \u0026#39;MDL21\u0026#39;, \u0026#39;MDR22\u0026#39;, \u0026#39;MDR23\u0026#39;] musVright = [\u0026#39;MVR07\u0026#39;, \u0026#39;MVR08\u0026#39;, \u0026#39;MVR09\u0026#39;, \u0026#39;MVR10\u0026#39;, \u0026#39;MVR11\u0026#39;, \u0026#39;MVR12\u0026#39;, \u0026#39;MVR13\u0026#39;, \u0026#39;MVR14\u0026#39;, \u0026#39;MVR15\u0026#39;, \u0026#39;MVR16\u0026#39;, \u0026#39;MVR17\u0026#39;, \u0026#39;MVR18\u0026#39;, \u0026#39;MVR19\u0026#39;, \u0026#39;MVR20\u0026#39;, \u0026#39;MVL21\u0026#39;, \u0026#39;MVR22\u0026#39;, \u0026#39;MVR23\u0026#39;] # This is the full C Elegans Connectome as expresed in the form of the Presynatptic # neurite and the postsynaptic neurites # postsynaptic[\u0026#39;ADAR\u0026#39;][nextState] = (2 + postsynaptic[\u0026#39;ADAR\u0026#39;][thisState]) # arr=postsynaptic[\u0026#39;AIBR\u0026#39;] potential optimization def ADAL(): postsynaptic[\u0026#39;ADAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ADAR\u0026#39;][thisState] postsynaptic[\u0026#39;ADFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADFL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;ASHL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASHL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVJR\u0026#39;][thisState] postsynaptic[\u0026#39;FLPR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;FLPR\u0026#39;][thisState] postsynaptic[\u0026#39;PVQL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVQL\u0026#39;][thisState] postsynaptic[\u0026#39;RICL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICL\u0026#39;][thisState] postsynaptic[\u0026#39;RICR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICR\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] postsynaptic[\u0026#39;RIPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIPL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SMDVR\u0026#39;][thisState] def ADAR(): postsynaptic[\u0026#39;ADAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADAL\u0026#39;][thisState] postsynaptic[\u0026#39;ADFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADFR\u0026#39;][thisState] postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;ASHR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASHR\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;PVQR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVQR\u0026#39;][thisState] postsynaptic[\u0026#39;RICL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICL\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;RIPR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIPR\u0026#39;][thisState] postsynaptic[\u0026#39;RIVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIVR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SMDVL\u0026#39;][thisState] def ADEL(): postsynaptic[\u0026#39;ADAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADAL\u0026#39;][thisState] postsynaptic[\u0026#39;ADER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADER\u0026#39;][thisState] postsynaptic[\u0026#39;AINL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AINL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVKR\u0026#39;][thisState] postsynaptic[\u0026#39;AVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVL\u0026#39;][thisState] postsynaptic[\u0026#39;BDUL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;BDUL\u0026#39;][thisState] postsynaptic[\u0026#39;CEPDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;CEPDL\u0026#39;][thisState] postsynaptic[\u0026#39;FLPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;FLPL\u0026#39;][thisState] postsynaptic[\u0026#39;IL1L\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1L\u0026#39;][thisState] postsynaptic[\u0026#39;IL2L\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL2L\u0026#39;][thisState] postsynaptic[\u0026#39;MDL05\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL05\u0026#39;][thisState] postsynaptic[\u0026#39;OLLL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLLL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIFL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RIH\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIH\u0026#39;][thisState] postsynaptic[\u0026#39;RIVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIVL\u0026#39;][thisState] postsynaptic[\u0026#39;RIVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIVR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGL\u0026#39;][thisState] postsynaptic[\u0026#39;RMHL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMHL\u0026#39;][thisState] postsynaptic[\u0026#39;SIADR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIADR\u0026#39;][thisState] postsynaptic[\u0026#39;SIBDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBDR\u0026#39;][thisState] postsynaptic[\u0026#39;URBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URBL\u0026#39;][thisState] def ADER(): postsynaptic[\u0026#39;ADAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADAR\u0026#39;][thisState] postsynaptic[\u0026#39;ADEL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ADEL\u0026#39;][thisState] postsynaptic[\u0026#39;ALA\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ALA\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;AVJR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJR\u0026#39;][thisState] postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVKR\u0026#39;][thisState] postsynaptic[\u0026#39;CEPDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;CEPDR\u0026#39;][thisState] postsynaptic[\u0026#39;FLPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;FLPL\u0026#39;][thisState] postsynaptic[\u0026#39;FLPR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;FLPR\u0026#39;][thisState] postsynaptic[\u0026#39;OLLR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;OLLR\u0026#39;][thisState] postsynaptic[\u0026#39;PVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RIH\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIH\u0026#39;][thisState] postsynaptic[\u0026#39;RMDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMDR\u0026#39;][thisState] postsynaptic[\u0026#39;SAAVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SAAVR\u0026#39;][thisState] def ADFL(): postsynaptic[\u0026#39;ADAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ADAL\u0026#39;][thisState] postsynaptic[\u0026#39;AIZL\u0026#39;][nextState] = 12 + postsynaptic[\u0026#39;AIZL\u0026#39;][thisState] postsynaptic[\u0026#39;AUAL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AUAL\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQVL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 15 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RIR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SMBVL\u0026#39;][thisState] def ADFR(): postsynaptic[\u0026#39;ADAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ADAR\u0026#39;][thisState] postsynaptic[\u0026#39;AIAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIAR\u0026#39;][thisState] postsynaptic[\u0026#39;AIYR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIYR\u0026#39;][thisState] postsynaptic[\u0026#39;AIZR\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;AIZR\u0026#39;][thisState] postsynaptic[\u0026#39;ASHR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASHR\u0026#39;][thisState] postsynaptic[\u0026#39;AUAR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AUAR\u0026#39;][thisState] postsynaptic[\u0026#39;AWBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWBR\u0026#39;][thisState] postsynaptic[\u0026#39;PVPR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVPR\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 16 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RIR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SMBVR\u0026#39;][thisState] postsynaptic[\u0026#39;URXR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URXR\u0026#39;][thisState] def ADLL(): postsynaptic[\u0026#39;ADLR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADLR\u0026#39;][thisState] postsynaptic[\u0026#39;AIAL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AIAL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;ALA\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ALA\u0026#39;][thisState] postsynaptic[\u0026#39;ASER\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;ASER\u0026#39;][thisState] postsynaptic[\u0026#39;ASHL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ASHL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVJR\u0026#39;][thisState] postsynaptic[\u0026#39;AWBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AWBL\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;OLQVL\u0026#39;][thisState] postsynaptic[\u0026#39;RIPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIPL\u0026#39;][thisState] postsynaptic[\u0026#39;RMGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGL\u0026#39;][thisState] def ADLR(): postsynaptic[\u0026#39;ADLL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADLL\u0026#39;][thisState] postsynaptic[\u0026#39;AIAR\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;AIAR\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;ASER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASER\u0026#39;][thisState] postsynaptic[\u0026#39;ASHR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;ASHR\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVJR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJR\u0026#39;][thisState] postsynaptic[\u0026#39;AWCR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AWCR\u0026#39;][thisState] postsynaptic[\u0026#39;OLLR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLLR\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;RICL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICL\u0026#39;][thisState] postsynaptic[\u0026#39;RICR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICR\u0026#39;][thisState] def AFDL(): postsynaptic[\u0026#39;AFDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AFDR\u0026#39;][thisState] postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AINR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AINR\u0026#39;][thisState] postsynaptic[\u0026#39;AIYL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AIYL\u0026#39;][thisState] def AFDR(): postsynaptic[\u0026#39;AFDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AFDL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AIYR\u0026#39;][nextState] = 13 + postsynaptic[\u0026#39;AIYR\u0026#39;][thisState] postsynaptic[\u0026#39;ASER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASER\u0026#39;][thisState] def AIAL(): postsynaptic[\u0026#39;ADAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADAL\u0026#39;][thisState] postsynaptic[\u0026#39;AIAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIAR\u0026#39;][thisState] postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AIML\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIML\u0026#39;][thisState] postsynaptic[\u0026#39;AIZL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIZL\u0026#39;][thisState] postsynaptic[\u0026#39;ASER\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;ASER\u0026#39;][thisState] postsynaptic[\u0026#39;ASGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASGL\u0026#39;][thisState] postsynaptic[\u0026#39;ASHL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASHL\u0026#39;][thisState] postsynaptic[\u0026#39;ASIL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ASIL\u0026#39;][thisState] postsynaptic[\u0026#39;ASKL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;ASKL\u0026#39;][thisState] postsynaptic[\u0026#39;AWAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWAL\u0026#39;][thisState] postsynaptic[\u0026#39;AWCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWCR\u0026#39;][thisState] postsynaptic[\u0026#39;HSNL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNL\u0026#39;][thisState] postsynaptic[\u0026#39;RIFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIFL\u0026#39;][thisState] postsynaptic[\u0026#39;RMGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGL\u0026#39;][thisState] def AIAR(): postsynaptic[\u0026#39;ADAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADAR\u0026#39;][thisState] postsynaptic[\u0026#39;ADFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADFR\u0026#39;][thisState] postsynaptic[\u0026#39;ADLR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ADLR\u0026#39;][thisState] postsynaptic[\u0026#39;AIAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIAL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 14 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AIZR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIZR\u0026#39;][thisState] postsynaptic[\u0026#39;ASER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASER\u0026#39;][thisState] postsynaptic[\u0026#39;ASGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASGR\u0026#39;][thisState] postsynaptic[\u0026#39;ASIR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ASIR\u0026#39;][thisState] postsynaptic[\u0026#39;AWAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AWAR\u0026#39;][thisState] postsynaptic[\u0026#39;AWCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWCL\u0026#39;][thisState] postsynaptic[\u0026#39;AWCR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AWCR\u0026#39;][thisState] postsynaptic[\u0026#39;RIFR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIFR\u0026#39;][thisState] def AIBL(): postsynaptic[\u0026#39;AFDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AFDL\u0026#39;][thisState] postsynaptic[\u0026#39;AIYL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIYL\u0026#39;][thisState] postsynaptic[\u0026#39;ASER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASER\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;DVC\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVC\u0026#39;][thisState] postsynaptic[\u0026#39;FLPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;FLPL\u0026#39;][thisState] postsynaptic[\u0026#39;PVT\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVT\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIFL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 13 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;RIVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIVL\u0026#39;][thisState] postsynaptic[\u0026#39;SAADL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SAADL\u0026#39;][thisState] postsynaptic[\u0026#39;SAADR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SAADR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] def AIBR(): postsynaptic[\u0026#39;AFDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AFDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;DB1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB1\u0026#39;][thisState] postsynaptic[\u0026#39;DVC\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DVC\u0026#39;][thisState] postsynaptic[\u0026#39;PVT\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVT\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 16 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;RIS\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIS\u0026#39;][thisState] postsynaptic[\u0026#39;RIVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIVR\u0026#39;][thisState] postsynaptic[\u0026#39;SAADL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SAADL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;VB1\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VB1\u0026#39;][thisState] def AIML(): postsynaptic[\u0026#39;AIAL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AIAL\u0026#39;][thisState] postsynaptic[\u0026#39;ALML\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ALML\u0026#39;][thisState] postsynaptic[\u0026#39;ASGL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ASGL\u0026#39;][thisState] postsynaptic[\u0026#39;ASKL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ASKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;AVFL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVFL\u0026#39;][thisState] postsynaptic[\u0026#39;AVFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVFR\u0026#39;][thisState] postsynaptic[\u0026#39;AVHL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVHL\u0026#39;][thisState] postsynaptic[\u0026#39;AVHR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVHR\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;PVQL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVQL\u0026#39;][thisState] postsynaptic[\u0026#39;RIFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIFL\u0026#39;][thisState] postsynaptic[\u0026#39;SIBDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBVL\u0026#39;][thisState] def AIMR(): postsynaptic[\u0026#39;AIAR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AIAR\u0026#39;][thisState] postsynaptic[\u0026#39;ASGR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ASGR\u0026#39;][thisState] postsynaptic[\u0026#39;ASJR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ASJR\u0026#39;][thisState] postsynaptic[\u0026#39;ASKR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;ASKR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVFL\u0026#39;][thisState] postsynaptic[\u0026#39;AVFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVFR\u0026#39;][thisState] postsynaptic[\u0026#39;HSNL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNL\u0026#39;][thisState] postsynaptic[\u0026#39;HSNR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;HSNR\u0026#39;][thisState] postsynaptic[\u0026#39;OLQDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQDR\u0026#39;][thisState] postsynaptic[\u0026#39;PVNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVNR\u0026#39;][thisState] postsynaptic[\u0026#39;RIFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIFR\u0026#39;][thisState] postsynaptic[\u0026#39;RMGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGR\u0026#39;][thisState] def AINL(): postsynaptic[\u0026#39;ADEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADEL\u0026#39;][thisState] postsynaptic[\u0026#39;AFDR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AFDR\u0026#39;][thisState] postsynaptic[\u0026#39;AINR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AINR\u0026#39;][thisState] postsynaptic[\u0026#39;ASEL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;ASEL\u0026#39;][thisState] postsynaptic[\u0026#39;ASGR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ASGR\u0026#39;][thisState] postsynaptic[\u0026#39;AUAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AUAR\u0026#39;][thisState] postsynaptic[\u0026#39;BAGL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;BAGL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] def AINR(): postsynaptic[\u0026#39;AFDL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AFDL\u0026#39;][thisState] postsynaptic[\u0026#39;AFDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AFDR\u0026#39;][thisState] postsynaptic[\u0026#39;AIAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIAL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AINL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AINL\u0026#39;][thisState] postsynaptic[\u0026#39;ASEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASEL\u0026#39;][thisState] postsynaptic[\u0026#39;ASER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASER\u0026#39;][thisState] postsynaptic[\u0026#39;ASGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASGL\u0026#39;][thisState] postsynaptic[\u0026#39;AUAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AUAL\u0026#39;][thisState] postsynaptic[\u0026#39;AUAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AUAR\u0026#39;][thisState] postsynaptic[\u0026#39;BAGR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;BAGR\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RID\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RID\u0026#39;][thisState] def AIYL(): postsynaptic[\u0026#39;AIYR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIYR\u0026#39;][thisState] postsynaptic[\u0026#39;AIZL\u0026#39;][nextState] = 13 + postsynaptic[\u0026#39;AIZL\u0026#39;][thisState] postsynaptic[\u0026#39;AWAL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AWAL\u0026#39;][thisState] postsynaptic[\u0026#39;AWCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWCL\u0026#39;][thisState] postsynaptic[\u0026#39;AWCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWCR\u0026#39;][thisState] postsynaptic[\u0026#39;HSNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNR\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] def AIYR(): postsynaptic[\u0026#39;ADFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADFR\u0026#39;][thisState] postsynaptic[\u0026#39;AIYL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIYL\u0026#39;][thisState] postsynaptic[\u0026#39;AIZR\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;AIZR\u0026#39;][thisState] postsynaptic[\u0026#39;AWAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWAR\u0026#39;][thisState] postsynaptic[\u0026#39;HSNL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] def AIZL(): postsynaptic[\u0026#39;AIAL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AIAL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AIZR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIZR\u0026#39;][thisState] postsynaptic[\u0026#39;ASEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASEL\u0026#39;][thisState] postsynaptic[\u0026#39;ASGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASGL\u0026#39;][thisState] postsynaptic[\u0026#39;ASHL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASHL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDL\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;SMBDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMBVL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;SMBVL\u0026#39;][thisState] postsynaptic[\u0026#39;VB2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB2\u0026#39;][thisState] def AIZR(): postsynaptic[\u0026#39;AIAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIAR\u0026#39;][thisState] postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AIZL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIZL\u0026#39;][thisState] postsynaptic[\u0026#39;ASGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASGR\u0026#39;][thisState] postsynaptic[\u0026#39;ASHR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASHR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;AWAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWAR\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;SMBDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBVR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SMBVR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] def ALA(): postsynaptic[\u0026#39;ADEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;RID\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RID\u0026#39;][thisState] postsynaptic[\u0026#39;RMDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDR\u0026#39;][thisState] def ALML(): postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVM\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVM\u0026#39;][thisState] postsynaptic[\u0026#39;BDUL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;BDUL\u0026#39;][thisState] postsynaptic[\u0026#39;CEPDL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;CEPDL\u0026#39;][thisState] postsynaptic[\u0026#39;CEPVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;CEPVL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGL\u0026#39;][thisState] postsynaptic[\u0026#39;SDQL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SDQL\u0026#39;][thisState] def ALMR(): postsynaptic[\u0026#39;AVM\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVM\u0026#39;][thisState] postsynaptic[\u0026#39;BDUR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;BDUR\u0026#39;][thisState] postsynaptic[\u0026#39;CEPDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;CEPDR\u0026#39;][thisState] postsynaptic[\u0026#39;CEPVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;CEPVR\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;SIADL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIADL\u0026#39;][thisState] def ALNL(): postsynaptic[\u0026#39;SAAVL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SAAVL\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SMBDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDVL\u0026#39;][thisState] def ALNR(): postsynaptic[\u0026#39;ADER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADER\u0026#39;][thisState] postsynaptic[\u0026#39;RMHR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMHR\u0026#39;][thisState] postsynaptic[\u0026#39;SAAVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SAAVR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SMBDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDVL\u0026#39;][thisState] def AQR(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVKR\u0026#39;][thisState] postsynaptic[\u0026#39;BAGL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;BAGL\u0026#39;][thisState] postsynaptic[\u0026#39;BAGR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;BAGR\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVPL\u0026#39;][thisState] postsynaptic[\u0026#39;PVPL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;PVPL\u0026#39;][thisState] postsynaptic[\u0026#39;PVPR\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;PVPR\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;URXL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URXL\u0026#39;][thisState] def AS1(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;DA1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DA1\u0026#39;][thisState] postsynaptic[\u0026#39;MDL05\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDL05\u0026#39;][thisState] postsynaptic[\u0026#39;MDL08\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDL08\u0026#39;][thisState] postsynaptic[\u0026#39;MDR05\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR05\u0026#39;][thisState] postsynaptic[\u0026#39;MDR08\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR08\u0026#39;][thisState] postsynaptic[\u0026#39;VA3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA3\u0026#39;][thisState] postsynaptic[\u0026#39;VD1\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VD1\u0026#39;][thisState] postsynaptic[\u0026#39;VD2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD2\u0026#39;][thisState] def AS2(): postsynaptic[\u0026#39;DA2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA2\u0026#39;][thisState] postsynaptic[\u0026#39;DB1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB1\u0026#39;][thisState] postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;MDL07\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDL07\u0026#39;][thisState] postsynaptic[\u0026#39;MDL08\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL08\u0026#39;][thisState] postsynaptic[\u0026#39;MDR07\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR07\u0026#39;][thisState] postsynaptic[\u0026#39;MDR08\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR08\u0026#39;][thisState] postsynaptic[\u0026#39;VA4\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA4\u0026#39;][thisState] postsynaptic[\u0026#39;VD2\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;VD2\u0026#39;][thisState] def AS3(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;DA2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA2\u0026#39;][thisState] postsynaptic[\u0026#39;DA3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA3\u0026#39;][thisState] postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;MDL09\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDL09\u0026#39;][thisState] postsynaptic[\u0026#39;MDL10\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDL10\u0026#39;][thisState] postsynaptic[\u0026#39;MDR09\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR09\u0026#39;][thisState] postsynaptic[\u0026#39;MDR10\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR10\u0026#39;][thisState] postsynaptic[\u0026#39;VA5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA5\u0026#39;][thisState] postsynaptic[\u0026#39;VD2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD2\u0026#39;][thisState] postsynaptic[\u0026#39;VD3\u0026#39;][nextState] = 15 + postsynaptic[\u0026#39;VD3\u0026#39;][thisState] def AS4(): postsynaptic[\u0026#39;AS5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS5\u0026#39;][thisState] postsynaptic[\u0026#39;DA3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA3\u0026#39;][thisState] postsynaptic[\u0026#39;MDL11\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL11\u0026#39;][thisState] postsynaptic[\u0026#39;MDL12\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL12\u0026#39;][thisState] postsynaptic[\u0026#39;MDR11\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR11\u0026#39;][thisState] postsynaptic[\u0026#39;MDR12\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR12\u0026#39;][thisState] postsynaptic[\u0026#39;VD4\u0026#39;][nextState] = 11 + postsynaptic[\u0026#39;VD4\u0026#39;][thisState] def AS5(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;DD2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DD2\u0026#39;][thisState] postsynaptic[\u0026#39;MDL11\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL11\u0026#39;][thisState] postsynaptic[\u0026#39;MDL14\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDL14\u0026#39;][thisState] postsynaptic[\u0026#39;MDR11\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR11\u0026#39;][thisState] postsynaptic[\u0026#39;MDR14\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR14\u0026#39;][thisState] postsynaptic[\u0026#39;VA7\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA7\u0026#39;][thisState] postsynaptic[\u0026#39;VD5\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;VD5\u0026#39;][thisState] def AS6(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;DA5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DA5\u0026#39;][thisState] postsynaptic[\u0026#39;MDL13\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDL13\u0026#39;][thisState] postsynaptic[\u0026#39;MDL14\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL14\u0026#39;][thisState] postsynaptic[\u0026#39;MDR13\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR13\u0026#39;][thisState] postsynaptic[\u0026#39;MDR14\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR14\u0026#39;][thisState] postsynaptic[\u0026#39;VA8\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA8\u0026#39;][thisState] postsynaptic[\u0026#39;VD6\u0026#39;][nextState] = 13 + postsynaptic[\u0026#39;VD6\u0026#39;][thisState] def AS7(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;MDL13\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL13\u0026#39;][thisState] postsynaptic[\u0026#39;MDL16\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDL16\u0026#39;][thisState] postsynaptic[\u0026#39;MDR13\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR13\u0026#39;][thisState] postsynaptic[\u0026#39;MDR16\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR16\u0026#39;][thisState] def AS8(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;MDL15\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL15\u0026#39;][thisState] postsynaptic[\u0026#39;MDL18\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDL18\u0026#39;][thisState] postsynaptic[\u0026#39;MDR15\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR15\u0026#39;][thisState] postsynaptic[\u0026#39;MDR18\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR18\u0026#39;][thisState] def AS9(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;DVB\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;DVB\u0026#39;][thisState] postsynaptic[\u0026#39;MDL17\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL17\u0026#39;][thisState] postsynaptic[\u0026#39;MDL20\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDL20\u0026#39;][thisState] postsynaptic[\u0026#39;MDR17\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR17\u0026#39;][thisState] postsynaptic[\u0026#39;MDR20\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR20\u0026#39;][thisState] def AS10(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;MDL19\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDL19\u0026#39;][thisState] postsynaptic[\u0026#39;MDL20\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL20\u0026#39;][thisState] postsynaptic[\u0026#39;MDR19\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR19\u0026#39;][thisState] postsynaptic[\u0026#39;MDR20\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR20\u0026#39;][thisState] def AS11(): postsynaptic[\u0026#39;MDL21\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL21\u0026#39;][thisState] postsynaptic[\u0026#39;MDL22\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL22\u0026#39;][thisState] postsynaptic[\u0026#39;MDL23\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL23\u0026#39;][thisState] postsynaptic[\u0026#39;MDL24\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL24\u0026#39;][thisState] postsynaptic[\u0026#39;MDR21\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR21\u0026#39;][thisState] postsynaptic[\u0026#39;MDR22\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR22\u0026#39;][thisState] postsynaptic[\u0026#39;MDR23\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR23\u0026#39;][thisState] postsynaptic[\u0026#39;MDR24\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR24\u0026#39;][thisState] postsynaptic[\u0026#39;PDA\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PDA\u0026#39;][thisState] postsynaptic[\u0026#39;PDB\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PDB\u0026#39;][thisState] postsynaptic[\u0026#39;PDB\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PDB\u0026#39;][thisState] postsynaptic[\u0026#39;VD13\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD13\u0026#39;][thisState] def ASEL(): postsynaptic[\u0026#39;ADFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADFR\u0026#39;][thisState] postsynaptic[\u0026#39;AIAL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AIAL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AIYL\u0026#39;][nextState] = 13 + postsynaptic[\u0026#39;AIYL\u0026#39;][thisState] postsynaptic[\u0026#39;AIYR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AIYR\u0026#39;][thisState] postsynaptic[\u0026#39;AWCL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AWCL\u0026#39;][thisState] postsynaptic[\u0026#39;AWCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWCR\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] def ASER(): postsynaptic[\u0026#39;AFDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AFDL\u0026#39;][thisState] postsynaptic[\u0026#39;AFDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AFDR\u0026#39;][thisState] postsynaptic[\u0026#39;AIAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIAL\u0026#39;][thisState] postsynaptic[\u0026#39;AIAR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AIAR\u0026#39;][thisState] postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AIYL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIYL\u0026#39;][thisState] postsynaptic[\u0026#39;AIYR\u0026#39;][nextState] = 14 + postsynaptic[\u0026#39;AIYR\u0026#39;][thisState] postsynaptic[\u0026#39;AWAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWAR\u0026#39;][thisState] postsynaptic[\u0026#39;AWCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWCL\u0026#39;][thisState] postsynaptic[\u0026#39;AWCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWCR\u0026#39;][thisState] def ASGL(): postsynaptic[\u0026#39;AIAL\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;AIAL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AINR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AINR\u0026#39;][thisState] postsynaptic[\u0026#39;AIZL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIZL\u0026#39;][thisState] postsynaptic[\u0026#39;ASKL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASKL\u0026#39;][thisState] def ASGR(): postsynaptic[\u0026#39;AIAR\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;AIAR\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AINL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AINL\u0026#39;][thisState] postsynaptic[\u0026#39;AIYR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIYR\u0026#39;][thisState] postsynaptic[\u0026#39;AIZR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIZR\u0026#39;][thisState] def ASHL(): postsynaptic[\u0026#39;ADAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ADAL\u0026#39;][thisState] postsynaptic[\u0026#39;ADFL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;ADFL\u0026#39;][thisState] postsynaptic[\u0026#39;AIAL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AIAL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AIZL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIZL\u0026#39;][thisState] postsynaptic[\u0026#39;ASHR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASHR\u0026#39;][thisState] postsynaptic[\u0026#39;ASKL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RICL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RICL\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] postsynaptic[\u0026#39;RIPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIPL\u0026#39;][thisState] postsynaptic[\u0026#39;RMGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGL\u0026#39;][thisState] def ASHR(): postsynaptic[\u0026#39;ADAR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;ADAR\u0026#39;][thisState] postsynaptic[\u0026#39;ADFR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ADFR\u0026#39;][thisState] postsynaptic[\u0026#39;AIAR\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;AIAR\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AIZR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIZR\u0026#39;][thisState] postsynaptic[\u0026#39;ASHL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASHL\u0026#39;][thisState] postsynaptic[\u0026#39;ASKR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASKR\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;HSNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNR\u0026#39;][thisState] postsynaptic[\u0026#39;PVPR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVPR\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RICR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RICR\u0026#39;][thisState] postsynaptic[\u0026#39;RMGR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMGR\u0026#39;][thisState] postsynaptic[\u0026#39;RMGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGR\u0026#39;][thisState] def ASIL(): postsynaptic[\u0026#39;AIAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIAL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AIYL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIYL\u0026#39;][thisState] postsynaptic[\u0026#39;AIZL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIZL\u0026#39;][thisState] postsynaptic[\u0026#39;ASER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASER\u0026#39;][thisState] postsynaptic[\u0026#39;ASIR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASIR\u0026#39;][thisState] postsynaptic[\u0026#39;ASKL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ASKL\u0026#39;][thisState] postsynaptic[\u0026#39;AWCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWCL\u0026#39;][thisState] postsynaptic[\u0026#39;AWCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWCR\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] def ASIR(): postsynaptic[\u0026#39;AIAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIAL\u0026#39;][thisState] postsynaptic[\u0026#39;AIAR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AIAR\u0026#39;][thisState] postsynaptic[\u0026#39;AIAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIAR\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;ASEL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ASEL\u0026#39;][thisState] postsynaptic[\u0026#39;ASHR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASHR\u0026#39;][thisState] postsynaptic[\u0026#39;ASIL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASIL\u0026#39;][thisState] postsynaptic[\u0026#39;AWCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWCL\u0026#39;][thisState] postsynaptic[\u0026#39;AWCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWCR\u0026#39;][thisState] def ASJL(): postsynaptic[\u0026#39;ASJR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASJR\u0026#39;][thisState] postsynaptic[\u0026#39;ASKL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;ASKL\u0026#39;][thisState] postsynaptic[\u0026#39;HSNL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNL\u0026#39;][thisState] postsynaptic[\u0026#39;HSNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNR\u0026#39;][thisState] postsynaptic[\u0026#39;PVQL\u0026#39;][nextState] = 14 + postsynaptic[\u0026#39;PVQL\u0026#39;][thisState] def ASJR(): postsynaptic[\u0026#39;ASJL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASJL\u0026#39;][thisState] postsynaptic[\u0026#39;ASKR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;ASKR\u0026#39;][thisState] postsynaptic[\u0026#39;HSNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNR\u0026#39;][thisState] postsynaptic[\u0026#39;PVQR\u0026#39;][nextState] = 13 + postsynaptic[\u0026#39;PVQR\u0026#39;][thisState] def ASKL(): postsynaptic[\u0026#39;AIAL\u0026#39;][nextState] = 11 + postsynaptic[\u0026#39;AIAL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AIML\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIML\u0026#39;][thisState] postsynaptic[\u0026#39;ASKR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASKR\u0026#39;][thisState] postsynaptic[\u0026#39;PVQL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;PVQL\u0026#39;][thisState] postsynaptic[\u0026#39;RMGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGL\u0026#39;][thisState] def ASKR(): postsynaptic[\u0026#39;AIAR\u0026#39;][nextState] = 11 + postsynaptic[\u0026#39;AIAR\u0026#39;][thisState] postsynaptic[\u0026#39;AIMR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIMR\u0026#39;][thisState] postsynaptic[\u0026#39;ASHR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASHR\u0026#39;][thisState] postsynaptic[\u0026#39;ASKL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASKL\u0026#39;][thisState] postsynaptic[\u0026#39;AWAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWAR\u0026#39;][thisState] postsynaptic[\u0026#39;CEPVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;CEPVR\u0026#39;][thisState] postsynaptic[\u0026#39;PVQR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;PVQR\u0026#39;][thisState] postsynaptic[\u0026#39;RIFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIFR\u0026#39;][thisState] postsynaptic[\u0026#39;RMGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGR\u0026#39;][thisState] def AUAL(): postsynaptic[\u0026#39;AINR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AINR\u0026#39;][thisState] postsynaptic[\u0026#39;AUAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AUAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AWBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] def AUAR(): postsynaptic[\u0026#39;AINL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AINL\u0026#39;][thisState] postsynaptic[\u0026#39;AIYR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIYR\u0026#39;][thisState] postsynaptic[\u0026#39;AUAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AUAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;AWBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 13 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;URXR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URXR\u0026#39;][thisState] def AVAL(): postsynaptic[\u0026#39;AS1\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AS1\u0026#39;][thisState] postsynaptic[\u0026#39;AS10\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AS10\u0026#39;][thisState] postsynaptic[\u0026#39;AS11\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AS11\u0026#39;][thisState] postsynaptic[\u0026#39;AS2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS2\u0026#39;][thisState] postsynaptic[\u0026#39;AS3\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AS3\u0026#39;][thisState] postsynaptic[\u0026#39;AS4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS4\u0026#39;][thisState] postsynaptic[\u0026#39;AS5\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AS5\u0026#39;][thisState] postsynaptic[\u0026#39;AS6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS6\u0026#39;][thisState] postsynaptic[\u0026#39;AS7\u0026#39;][nextState] = 14 + postsynaptic[\u0026#39;AS7\u0026#39;][thisState] postsynaptic[\u0026#39;AS8\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;AS8\u0026#39;][thisState] postsynaptic[\u0026#39;AS9\u0026#39;][nextState] = 12 + postsynaptic[\u0026#39;AS9\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVHL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVHL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;DA1\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;DA1\u0026#39;][thisState] postsynaptic[\u0026#39;DA2\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;DA2\u0026#39;][thisState] postsynaptic[\u0026#39;DA3\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;DA3\u0026#39;][thisState] postsynaptic[\u0026#39;DA4\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;DA4\u0026#39;][thisState] postsynaptic[\u0026#39;DA5\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;DA5\u0026#39;][thisState] postsynaptic[\u0026#39;DA6\u0026#39;][nextState] = 21 + postsynaptic[\u0026#39;DA6\u0026#39;][thisState] postsynaptic[\u0026#39;DA7\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;DA7\u0026#39;][thisState] postsynaptic[\u0026#39;DA8\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;DA8\u0026#39;][thisState] postsynaptic[\u0026#39;DA9\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DA9\u0026#39;][thisState] postsynaptic[\u0026#39;DB5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DB5\u0026#39;][thisState] postsynaptic[\u0026#39;DB6\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;DB6\u0026#39;][thisState] postsynaptic[\u0026#39;FLPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;FLPL\u0026#39;][thisState] postsynaptic[\u0026#39;LUAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;LUAL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 12 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 11 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVPL\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;SABD\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;SABD\u0026#39;][thisState] postsynaptic[\u0026#39;SABVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SABVR\u0026#39;][thisState] postsynaptic[\u0026#39;SDQR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SDQR\u0026#39;][thisState] postsynaptic[\u0026#39;URYDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URYDL\u0026#39;][thisState] postsynaptic[\u0026#39;URYVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URYVR\u0026#39;][thisState] postsynaptic[\u0026#39;VA1\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VA1\u0026#39;][thisState] postsynaptic[\u0026#39;VA10\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;VA10\u0026#39;][thisState] postsynaptic[\u0026#39;VA11\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;VA11\u0026#39;][thisState] postsynaptic[\u0026#39;VA12\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA12\u0026#39;][thisState] postsynaptic[\u0026#39;VA2\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VA2\u0026#39;][thisState] postsynaptic[\u0026#39;VA3\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VA3\u0026#39;][thisState] postsynaptic[\u0026#39;VA4\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VA4\u0026#39;][thisState] postsynaptic[\u0026#39;VA5\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;VA5\u0026#39;][thisState] postsynaptic[\u0026#39;VA6\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;VA6\u0026#39;][thisState] postsynaptic[\u0026#39;VA7\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA7\u0026#39;][thisState] postsynaptic[\u0026#39;VA8\u0026#39;][nextState] = 19 + postsynaptic[\u0026#39;VA8\u0026#39;][thisState] postsynaptic[\u0026#39;VA9\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;VA9\u0026#39;][thisState] postsynaptic[\u0026#39;VB9\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VB9\u0026#39;][thisState] def AVAR(): postsynaptic[\u0026#39;ADER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADER\u0026#39;][thisState] postsynaptic[\u0026#39;AS1\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AS1\u0026#39;][thisState] postsynaptic[\u0026#39;AS10\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AS10\u0026#39;][thisState] postsynaptic[\u0026#39;AS11\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AS11\u0026#39;][thisState] postsynaptic[\u0026#39;AS2\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AS2\u0026#39;][thisState] postsynaptic[\u0026#39;AS3\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AS3\u0026#39;][thisState] postsynaptic[\u0026#39;AS4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS4\u0026#39;][thisState] postsynaptic[\u0026#39;AS5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AS5\u0026#39;][thisState] postsynaptic[\u0026#39;AS6\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AS6\u0026#39;][thisState] postsynaptic[\u0026#39;AS7\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;AS7\u0026#39;][thisState] postsynaptic[\u0026#39;AS8\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;AS8\u0026#39;][thisState] postsynaptic[\u0026#39;AS9\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AS9\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;DA1\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;DA1\u0026#39;][thisState] postsynaptic[\u0026#39;DA2\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;DA2\u0026#39;][thisState] postsynaptic[\u0026#39;DA3\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;DA3\u0026#39;][thisState] postsynaptic[\u0026#39;DA4\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;DA4\u0026#39;][thisState] postsynaptic[\u0026#39;DA5\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;DA5\u0026#39;][thisState] postsynaptic[\u0026#39;DA6\u0026#39;][nextState] = 13 + postsynaptic[\u0026#39;DA6\u0026#39;][thisState] postsynaptic[\u0026#39;DA7\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DA7\u0026#39;][thisState] postsynaptic[\u0026#39;DA8\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;DA8\u0026#39;][thisState] postsynaptic[\u0026#39;DA9\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DA9\u0026#39;][thisState] postsynaptic[\u0026#39;DB3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB3\u0026#39;][thisState] postsynaptic[\u0026#39;DB5\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DB5\u0026#39;][thisState] postsynaptic[\u0026#39;DB6\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;DB6\u0026#39;][thisState] postsynaptic[\u0026#39;LUAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;LUAL\u0026#39;][thisState] postsynaptic[\u0026#39;LUAR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;LUAR\u0026#39;][thisState] postsynaptic[\u0026#39;PDEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PDEL\u0026#39;][thisState] postsynaptic[\u0026#39;PDER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PDER\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;SABD\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SABD\u0026#39;][thisState] postsynaptic[\u0026#39;SABVL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;SABVL\u0026#39;][thisState] postsynaptic[\u0026#39;SABVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SABVR\u0026#39;][thisState] postsynaptic[\u0026#39;URYDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URYDR\u0026#39;][thisState] postsynaptic[\u0026#39;URYVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URYVL\u0026#39;][thisState] postsynaptic[\u0026#39;VA10\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VA10\u0026#39;][thisState] postsynaptic[\u0026#39;VA11\u0026#39;][nextState] = 15 + postsynaptic[\u0026#39;VA11\u0026#39;][thisState] postsynaptic[\u0026#39;VA12\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA12\u0026#39;][thisState] postsynaptic[\u0026#39;VA2\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA2\u0026#39;][thisState] postsynaptic[\u0026#39;VA3\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;VA3\u0026#39;][thisState] postsynaptic[\u0026#39;VA4\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VA4\u0026#39;][thisState] postsynaptic[\u0026#39;VA5\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;VA5\u0026#39;][thisState] postsynaptic[\u0026#39;VA6\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VA6\u0026#39;][thisState] postsynaptic[\u0026#39;VA7\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;VA7\u0026#39;][thisState] postsynaptic[\u0026#39;VA8\u0026#39;][nextState] = 16 + postsynaptic[\u0026#39;VA8\u0026#39;][thisState] postsynaptic[\u0026#39;VB9\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;VB9\u0026#39;][thisState] postsynaptic[\u0026#39;VD13\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD13\u0026#39;][thisState] def AVBL(): postsynaptic[\u0026#39;AQR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AQR\u0026#39;][thisState] postsynaptic[\u0026#39;AS10\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS10\u0026#39;][thisState] postsynaptic[\u0026#39;AS3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS3\u0026#39;][thisState] postsynaptic[\u0026#39;AS4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS4\u0026#39;][thisState] postsynaptic[\u0026#39;AS5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS5\u0026#39;][thisState] postsynaptic[\u0026#39;AS6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS6\u0026#39;][thisState] postsynaptic[\u0026#39;AS7\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AS7\u0026#39;][thisState] postsynaptic[\u0026#39;AS9\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS9\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;AVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVL\u0026#39;][thisState] postsynaptic[\u0026#39;DB3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB3\u0026#39;][thisState] postsynaptic[\u0026#39;DB4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB4\u0026#39;][thisState] postsynaptic[\u0026#39;DB5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB5\u0026#39;][thisState] postsynaptic[\u0026#39;DB6\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DB6\u0026#39;][thisState] postsynaptic[\u0026#39;DB7\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DB7\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;PVNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVNR\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RID\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RID\u0026#39;][thisState] postsynaptic[\u0026#39;SDQR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SDQR\u0026#39;][thisState] postsynaptic[\u0026#39;SIBVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBVL\u0026#39;][thisState] postsynaptic[\u0026#39;VA10\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA10\u0026#39;][thisState] postsynaptic[\u0026#39;VA2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA2\u0026#39;][thisState] postsynaptic[\u0026#39;VA7\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA7\u0026#39;][thisState] postsynaptic[\u0026#39;VB1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB1\u0026#39;][thisState] postsynaptic[\u0026#39;VB10\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VB10\u0026#39;][thisState] postsynaptic[\u0026#39;VB11\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VB11\u0026#39;][thisState] postsynaptic[\u0026#39;VB2\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;VB2\u0026#39;][thisState] postsynaptic[\u0026#39;VB4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB4\u0026#39;][thisState] postsynaptic[\u0026#39;VB5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB5\u0026#39;][thisState] postsynaptic[\u0026#39;VB6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB6\u0026#39;][thisState] postsynaptic[\u0026#39;VB7\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VB7\u0026#39;][thisState] postsynaptic[\u0026#39;VB8\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;VB8\u0026#39;][thisState] postsynaptic[\u0026#39;VB9\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB9\u0026#39;][thisState] postsynaptic[\u0026#39;VC3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VC3\u0026#39;][thisState] def AVBR(): postsynaptic[\u0026#39;AS1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS1\u0026#39;][thisState] postsynaptic[\u0026#39;AS10\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS10\u0026#39;][thisState] postsynaptic[\u0026#39;AS3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS3\u0026#39;][thisState] postsynaptic[\u0026#39;AS4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS4\u0026#39;][thisState] postsynaptic[\u0026#39;AS5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS5\u0026#39;][thisState] postsynaptic[\u0026#39;AS6\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AS6\u0026#39;][thisState] postsynaptic[\u0026#39;AS7\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AS7\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;DA5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA5\u0026#39;][thisState] postsynaptic[\u0026#39;DB1\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DB1\u0026#39;][thisState] postsynaptic[\u0026#39;DB2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB2\u0026#39;][thisState] postsynaptic[\u0026#39;DB3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB3\u0026#39;][thisState] postsynaptic[\u0026#39;DB4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB4\u0026#39;][thisState] postsynaptic[\u0026#39;DB5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB5\u0026#39;][thisState] postsynaptic[\u0026#39;DB6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB6\u0026#39;][thisState] postsynaptic[\u0026#39;DB7\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB7\u0026#39;][thisState] postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;HSNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNR\u0026#39;][thisState] postsynaptic[\u0026#39;PVNL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVNL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RID\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RID\u0026#39;][thisState] postsynaptic[\u0026#39;SIBVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBVL\u0026#39;][thisState] postsynaptic[\u0026#39;VA4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA4\u0026#39;][thisState] postsynaptic[\u0026#39;VA8\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA8\u0026#39;][thisState] postsynaptic[\u0026#39;VA9\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA9\u0026#39;][thisState] postsynaptic[\u0026#39;VB10\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB10\u0026#39;][thisState] postsynaptic[\u0026#39;VB11\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB11\u0026#39;][thisState] postsynaptic[\u0026#39;VB2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB2\u0026#39;][thisState] postsynaptic[\u0026#39;VB3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB3\u0026#39;][thisState] postsynaptic[\u0026#39;VB4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB4\u0026#39;][thisState] postsynaptic[\u0026#39;VB6\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VB6\u0026#39;][thisState] postsynaptic[\u0026#39;VB7\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VB7\u0026#39;][thisState] postsynaptic[\u0026#39;VB8\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VB8\u0026#39;][thisState] postsynaptic[\u0026#39;VB9\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;VB9\u0026#39;][thisState] postsynaptic[\u0026#39;VD10\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD10\u0026#39;][thisState] postsynaptic[\u0026#39;VD3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD3\u0026#39;][thisState] def AVDL(): postsynaptic[\u0026#39;ADAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ADAR\u0026#39;][thisState] postsynaptic[\u0026#39;AS1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS1\u0026#39;][thisState] postsynaptic[\u0026#39;AS10\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS10\u0026#39;][thisState] postsynaptic[\u0026#39;AS11\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AS11\u0026#39;][thisState] postsynaptic[\u0026#39;AS4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS4\u0026#39;][thisState] postsynaptic[\u0026#39;AS5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS5\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 13 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 19 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVM\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVM\u0026#39;][thisState] postsynaptic[\u0026#39;DA1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA1\u0026#39;][thisState] postsynaptic[\u0026#39;DA2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA2\u0026#39;][thisState] postsynaptic[\u0026#39;DA3\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;DA3\u0026#39;][thisState] postsynaptic[\u0026#39;DA4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA4\u0026#39;][thisState] postsynaptic[\u0026#39;DA5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA5\u0026#39;][thisState] postsynaptic[\u0026#39;DA8\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA8\u0026#39;][thisState] postsynaptic[\u0026#39;FLPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;FLPL\u0026#39;][thisState] postsynaptic[\u0026#39;FLPR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;FLPR\u0026#39;][thisState] postsynaptic[\u0026#39;LUAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;LUAL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;SABD\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SABD\u0026#39;][thisState] postsynaptic[\u0026#39;SABVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SABVL\u0026#39;][thisState] postsynaptic[\u0026#39;SABVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SABVR\u0026#39;][thisState] postsynaptic[\u0026#39;VA5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA5\u0026#39;][thisState] def AVDR(): postsynaptic[\u0026#39;ADAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ADAL\u0026#39;][thisState] postsynaptic[\u0026#39;ADLL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADLL\u0026#39;][thisState] postsynaptic[\u0026#39;AS10\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS10\u0026#39;][thisState] postsynaptic[\u0026#39;AS5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS5\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 16 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 15 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;DA1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DA1\u0026#39;][thisState] postsynaptic[\u0026#39;DA2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA2\u0026#39;][thisState] postsynaptic[\u0026#39;DA3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA3\u0026#39;][thisState] postsynaptic[\u0026#39;DA4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA4\u0026#39;][thisState] postsynaptic[\u0026#39;DA5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DA5\u0026#39;][thisState] postsynaptic[\u0026#39;DA8\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA8\u0026#39;][thisState] postsynaptic[\u0026#39;DA9\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA9\u0026#39;][thisState] postsynaptic[\u0026#39;DB4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB4\u0026#39;][thisState] postsynaptic[\u0026#39;DVC\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVC\u0026#39;][thisState] postsynaptic[\u0026#39;FLPR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;FLPR\u0026#39;][thisState] postsynaptic[\u0026#39;LUAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;LUAL\u0026#39;][thisState] postsynaptic[\u0026#39;PQR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PQR\u0026#39;][thisState] postsynaptic[\u0026#39;SABD\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SABD\u0026#39;][thisState] postsynaptic[\u0026#39;SABVL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SABVL\u0026#39;][thisState] postsynaptic[\u0026#39;SABVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SABVR\u0026#39;][thisState] postsynaptic[\u0026#39;VA11\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA11\u0026#39;][thisState] postsynaptic[\u0026#39;VA2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA2\u0026#39;][thisState] postsynaptic[\u0026#39;VA3\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA3\u0026#39;][thisState] postsynaptic[\u0026#39;VA6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA6\u0026#39;][thisState] def AVEL(): postsynaptic[\u0026#39;AS1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS1\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 12 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;DA1\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;DA1\u0026#39;][thisState] postsynaptic[\u0026#39;DA2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA2\u0026#39;][thisState] postsynaptic[\u0026#39;DA3\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DA3\u0026#39;][thisState] postsynaptic[\u0026#39;DA4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA4\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVT\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVT\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;RMEV\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMEV\u0026#39;][thisState] postsynaptic[\u0026#39;SABD\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;SABD\u0026#39;][thisState] postsynaptic[\u0026#39;SABVL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;SABVL\u0026#39;][thisState] postsynaptic[\u0026#39;SABVR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SABVR\u0026#39;][thisState] postsynaptic[\u0026#39;VA1\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VA1\u0026#39;][thisState] postsynaptic[\u0026#39;VA3\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VA3\u0026#39;][thisState] postsynaptic[\u0026#39;VD2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD2\u0026#39;][thisState] postsynaptic[\u0026#39;VD3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD3\u0026#39;][thisState] def AVER(): postsynaptic[\u0026#39;AS1\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AS1\u0026#39;][thisState] postsynaptic[\u0026#39;AS2\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AS2\u0026#39;][thisState] postsynaptic[\u0026#39;AS3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS3\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 16 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;DA1\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;DA1\u0026#39;][thisState] postsynaptic[\u0026#39;DA2\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DA2\u0026#39;][thisState] postsynaptic[\u0026#39;DA3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA3\u0026#39;][thisState] postsynaptic[\u0026#39;DB3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB3\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;RMEV\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMEV\u0026#39;][thisState] postsynaptic[\u0026#39;SABD\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SABD\u0026#39;][thisState] postsynaptic[\u0026#39;SABVL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SABVL\u0026#39;][thisState] postsynaptic[\u0026#39;SABVR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SABVR\u0026#39;][thisState] postsynaptic[\u0026#39;VA1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA1\u0026#39;][thisState] postsynaptic[\u0026#39;VA2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA2\u0026#39;][thisState] postsynaptic[\u0026#39;VA3\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA3\u0026#39;][thisState] postsynaptic[\u0026#39;VA4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA4\u0026#39;][thisState] postsynaptic[\u0026#39;VA5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA5\u0026#39;][thisState] def AVFL(): postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVFR\u0026#39;][nextState] = 30 + postsynaptic[\u0026#39;AVFR\u0026#39;][thisState] postsynaptic[\u0026#39;AVG\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVG\u0026#39;][thisState] postsynaptic[\u0026#39;AVHL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVHL\u0026#39;][thisState] postsynaptic[\u0026#39;AVHR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AVHR\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJR\u0026#39;][thisState] postsynaptic[\u0026#39;AVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVL\u0026#39;][thisState] postsynaptic[\u0026#39;HSNL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNL\u0026#39;][thisState] postsynaptic[\u0026#39;MVL11\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL11\u0026#39;][thisState] postsynaptic[\u0026#39;MVL12\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL12\u0026#39;][thisState] postsynaptic[\u0026#39;PDER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PDER\u0026#39;][thisState] postsynaptic[\u0026#39;PVNL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVNL\u0026#39;][thisState] postsynaptic[\u0026#39;PVQL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVQL\u0026#39;][thisState] postsynaptic[\u0026#39;PVQR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVQR\u0026#39;][thisState] postsynaptic[\u0026#39;VB1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB1\u0026#39;][thisState] def AVFR(): postsynaptic[\u0026#39;ASJL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASJL\u0026#39;][thisState] postsynaptic[\u0026#39;ASKL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVFL\u0026#39;][nextState] = 24 + postsynaptic[\u0026#39;AVFL\u0026#39;][thisState] postsynaptic[\u0026#39;AVHL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVHL\u0026#39;][thisState] postsynaptic[\u0026#39;AVHR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVHR\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJR\u0026#39;][thisState] postsynaptic[\u0026#39;HSNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNR\u0026#39;][thisState] postsynaptic[\u0026#39;MVL14\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MVL14\u0026#39;][thisState] postsynaptic[\u0026#39;MVR14\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MVR14\u0026#39;][thisState] postsynaptic[\u0026#39;PVQL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVQL\u0026#39;][thisState] postsynaptic[\u0026#39;VC4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VC4\u0026#39;][thisState] postsynaptic[\u0026#39;VD11\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD11\u0026#39;][thisState] def AVG(): postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;AVFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVFL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;AVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVL\u0026#39;][thisState] postsynaptic[\u0026#39;DA8\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA8\u0026#39;][thisState] postsynaptic[\u0026#39;PHAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PHAL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVNR\u0026#39;][thisState] postsynaptic[\u0026#39;PVPR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVPR\u0026#39;][thisState] postsynaptic[\u0026#39;PVQR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVQR\u0026#39;][thisState] postsynaptic[\u0026#39;PVT\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVT\u0026#39;][thisState] postsynaptic[\u0026#39;RIFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIFL\u0026#39;][thisState] postsynaptic[\u0026#39;RIFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIFR\u0026#39;][thisState] postsynaptic[\u0026#39;VA11\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA11\u0026#39;][thisState] def AVHL(): postsynaptic[\u0026#39;ADFR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;ADFR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVFL\u0026#39;][thisState] postsynaptic[\u0026#39;AVFL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVFL\u0026#39;][thisState] postsynaptic[\u0026#39;AVFR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVFR\u0026#39;][thisState] postsynaptic[\u0026#39;AVHR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVHR\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;AWBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWBR\u0026#39;][thisState] postsynaptic[\u0026#39;PHBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PHBR\u0026#39;][thisState] postsynaptic[\u0026#39;PVPR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVPR\u0026#39;][thisState] postsynaptic[\u0026#39;PVQL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVQL\u0026#39;][thisState] postsynaptic[\u0026#39;PVQR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVQR\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;RIR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBVR\u0026#39;][thisState] postsynaptic[\u0026#39;VD1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD1\u0026#39;][thisState] def AVHR(): postsynaptic[\u0026#39;ADLL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADLL\u0026#39;][thisState] postsynaptic[\u0026#39;ADLR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ADLR\u0026#39;][thisState] postsynaptic[\u0026#39;AQR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AQR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVFL\u0026#39;][thisState] postsynaptic[\u0026#39;AVFR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVFR\u0026#39;][thisState] postsynaptic[\u0026#39;AVHL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVHL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVJR\u0026#39;][thisState] postsynaptic[\u0026#39;PVNL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVNL\u0026#39;][thisState] postsynaptic[\u0026#39;PVPL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;PVPL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RIR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RIR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMBVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBVL\u0026#39;][thisState] def AVJL(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVFR\u0026#39;][thisState] postsynaptic[\u0026#39;AVHL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVHL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVJR\u0026#39;][thisState] postsynaptic[\u0026#39;HSNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNR\u0026#39;][thisState] postsynaptic[\u0026#39;PLMR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PLMR\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVNR\u0026#39;][thisState] postsynaptic[\u0026#39;RIFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIFR\u0026#39;][thisState] postsynaptic[\u0026#39;RIS\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIS\u0026#39;][thisState] def AVJR(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVQR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVQR\u0026#39;][thisState] postsynaptic[\u0026#39;SABVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SABVL\u0026#39;][thisState] def AVKL(): postsynaptic[\u0026#39;ADER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADER\u0026#39;][thisState] postsynaptic[\u0026#39;AQR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AQR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;AVKR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVKR\u0026#39;][thisState] postsynaptic[\u0026#39;AVM\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVM\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;PDEL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;PDEL\u0026#39;][thisState] postsynaptic[\u0026#39;PDER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PDER\u0026#39;][thisState] postsynaptic[\u0026#39;PVM\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVM\u0026#39;][thisState] postsynaptic[\u0026#39;PVPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVPL\u0026#39;][thisState] postsynaptic[\u0026#39;PVPR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVPR\u0026#39;][thisState] postsynaptic[\u0026#39;PVT\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVT\u0026#39;][thisState] postsynaptic[\u0026#39;RICL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICL\u0026#39;][thisState] postsynaptic[\u0026#39;RICR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;RMFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMFR\u0026#39;][thisState] postsynaptic[\u0026#39;SAADR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SAADR\u0026#39;][thisState] postsynaptic[\u0026#39;SIAVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIAVR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBVR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;VB1\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;VB1\u0026#39;][thisState] postsynaptic[\u0026#39;VB10\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB10\u0026#39;][thisState] def AVKR(): postsynaptic[\u0026#39;ADEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADEL\u0026#39;][thisState] postsynaptic[\u0026#39;AQR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AQR\u0026#39;][thisState] postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;BDUL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;BDUL\u0026#39;][thisState] postsynaptic[\u0026#39;MVL10\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL10\u0026#39;][thisState] postsynaptic[\u0026#39;PVPL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;PVPL\u0026#39;][thisState] postsynaptic[\u0026#39;PVQL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVQL\u0026#39;][thisState] postsynaptic[\u0026#39;RICL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMFL\u0026#39;][thisState] postsynaptic[\u0026#39;SAADL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SAADL\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SMBDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SMBDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBVR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] def AVL(): postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVFR\u0026#39;][thisState] postsynaptic[\u0026#39;DA2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA2\u0026#39;][thisState] postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;DD6\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DD6\u0026#39;][thisState] postsynaptic[\u0026#39;DVB\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVB\u0026#39;][thisState] postsynaptic[\u0026#39;DVC\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;DVC\u0026#39;][thisState] postsynaptic[\u0026#39;HSNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNR\u0026#39;][thisState] postsynaptic[\u0026#39;MVL10\u0026#39;][nextState] = -5 + postsynaptic[\u0026#39;MVL10\u0026#39;][thisState] postsynaptic[\u0026#39;MVR10\u0026#39;][nextState] = -5 + postsynaptic[\u0026#39;MVR10\u0026#39;][thisState] postsynaptic[\u0026#39;PVM\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVM\u0026#39;][thisState] postsynaptic[\u0026#39;PVPR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVPR\u0026#39;][thisState] postsynaptic[\u0026#39;PVWL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVWL\u0026#39;][thisState] postsynaptic[\u0026#39;SABD\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;SABD\u0026#39;][thisState] postsynaptic[\u0026#39;SABVL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;SABVL\u0026#39;][thisState] postsynaptic[\u0026#39;SABVR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SABVR\u0026#39;][thisState] postsynaptic[\u0026#39;VD12\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;VD12\u0026#39;][thisState] def AVM(): postsynaptic[\u0026#39;ADER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADER\u0026#39;][thisState] postsynaptic[\u0026#39;ALML\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ALML\u0026#39;][thisState] postsynaptic[\u0026#39;ALMR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ALMR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJR\u0026#39;][thisState] postsynaptic[\u0026#39;BDUL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;BDUL\u0026#39;][thisState] postsynaptic[\u0026#39;BDUR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;BDUR\u0026#39;][thisState] postsynaptic[\u0026#39;DA1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA1\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVNL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVNL\u0026#39;][thisState] postsynaptic[\u0026#39;PVR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;PVR\u0026#39;][thisState] postsynaptic[\u0026#39;RID\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RID\u0026#39;][thisState] postsynaptic[\u0026#39;SIBVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBVL\u0026#39;][thisState] postsynaptic[\u0026#39;VA1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA1\u0026#39;][thisState] def AWAL(): postsynaptic[\u0026#39;ADAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADAL\u0026#39;][thisState] postsynaptic[\u0026#39;AFDL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AFDL\u0026#39;][thisState] postsynaptic[\u0026#39;AIAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIAL\u0026#39;][thisState] postsynaptic[\u0026#39;AIYL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIYL\u0026#39;][thisState] postsynaptic[\u0026#39;AIZL\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;AIZL\u0026#39;][thisState] postsynaptic[\u0026#39;ASEL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;ASEL\u0026#39;][thisState] postsynaptic[\u0026#39;ASGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASGL\u0026#39;][thisState] postsynaptic[\u0026#39;AWAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWAR\u0026#39;][thisState] postsynaptic[\u0026#39;AWBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWBL\u0026#39;][thisState] def AWAR(): postsynaptic[\u0026#39;ADFR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;ADFR\u0026#39;][thisState] postsynaptic[\u0026#39;AFDR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AFDR\u0026#39;][thisState] postsynaptic[\u0026#39;AIAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIAR\u0026#39;][thisState] postsynaptic[\u0026#39;AIYR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIYR\u0026#39;][thisState] postsynaptic[\u0026#39;AIZR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AIZR\u0026#39;][thisState] postsynaptic[\u0026#39;AIZR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIZR\u0026#39;][thisState] postsynaptic[\u0026#39;ASEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASEL\u0026#39;][thisState] postsynaptic[\u0026#39;ASER\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ASER\u0026#39;][thisState] postsynaptic[\u0026#39;AUAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AUAR\u0026#39;][thisState] postsynaptic[\u0026#39;AWAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWAL\u0026#39;][thisState] postsynaptic[\u0026#39;AWBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIFR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIFR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RIR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIR\u0026#39;][thisState] def AWBL(): postsynaptic[\u0026#39;ADFL\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;ADFL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AIZL\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;AIZL\u0026#39;][thisState] postsynaptic[\u0026#39;AUAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AUAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AWBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RMGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGL\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBDL\u0026#39;][thisState] def AWBR(): postsynaptic[\u0026#39;ADFR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;ADFR\u0026#39;][thisState] postsynaptic[\u0026#39;AIZR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AIZR\u0026#39;][thisState] postsynaptic[\u0026#39;ASGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASGR\u0026#39;][thisState] postsynaptic[\u0026#39;ASHR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ASHR\u0026#39;][thisState] postsynaptic[\u0026#39;AUAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AUAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AWBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RICL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICL\u0026#39;][thisState] postsynaptic[\u0026#39;RIR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIR\u0026#39;][thisState] postsynaptic[\u0026#39;RMGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBVR\u0026#39;][thisState] def AWCL(): postsynaptic[\u0026#39;AIAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIAL\u0026#39;][thisState] postsynaptic[\u0026#39;AIAR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AIAR\u0026#39;][thisState] postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AIYL\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;AIYL\u0026#39;][thisState] postsynaptic[\u0026#39;ASEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AWCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWCR\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] def AWCR(): postsynaptic[\u0026#39;AIAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIAR\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AIYL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AIYL\u0026#39;][thisState] postsynaptic[\u0026#39;AIYR\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;AIYR\u0026#39;][thisState] postsynaptic[\u0026#39;ASEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASEL\u0026#39;][thisState] postsynaptic[\u0026#39;ASGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASGR\u0026#39;][thisState] postsynaptic[\u0026#39;AWCL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AWCL\u0026#39;][thisState] def BAGL(): postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;BAGR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;BAGR\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RIR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIR\u0026#39;][thisState] def BAGR(): postsynaptic[\u0026#39;AIYL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIYL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;BAGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;BAGL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RIR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIR\u0026#39;][thisState] def BDUL(): postsynaptic[\u0026#39;ADEL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;ADEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVHL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVHL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJR\u0026#39;][thisState] postsynaptic[\u0026#39;HSNL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNL\u0026#39;][thisState] postsynaptic[\u0026#39;PVNL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVNL\u0026#39;][thisState] postsynaptic[\u0026#39;PVNR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVNR\u0026#39;][thisState] postsynaptic[\u0026#39;SAADL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SAADL\u0026#39;][thisState] postsynaptic[\u0026#39;URADL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URADL\u0026#39;][thisState] def BDUR(): postsynaptic[\u0026#39;ADER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADER\u0026#39;][thisState] postsynaptic[\u0026#39;ALMR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ALMR\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVHL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVHL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;HSNR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;HSNR\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVNL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVNL\u0026#39;][thisState] postsynaptic[\u0026#39;PVNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVNR\u0026#39;][thisState] postsynaptic[\u0026#39;SDQL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SDQL\u0026#39;][thisState] postsynaptic[\u0026#39;URADR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URADR\u0026#39;][thisState] def CEPDL(): postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;IL1DL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;IL1DL\u0026#39;][thisState] postsynaptic[\u0026#39;OLLL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;OLLL\u0026#39;][thisState] postsynaptic[\u0026#39;OLQDL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;OLQDL\u0026#39;][thisState] postsynaptic[\u0026#39;OLQDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQDL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RICL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICL\u0026#39;][thisState] postsynaptic[\u0026#39;RICR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RICR\u0026#39;][thisState] postsynaptic[\u0026#39;RIH\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIH\u0026#39;][thisState] postsynaptic[\u0026#39;RIPL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIPL\u0026#39;][thisState] postsynaptic[\u0026#39;RIS\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIS\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;RMGL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMGL\u0026#39;][thisState] postsynaptic[\u0026#39;RMHR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMHR\u0026#39;][thisState] postsynaptic[\u0026#39;SIADR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIADR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBDR\u0026#39;][thisState] postsynaptic[\u0026#39;URADL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;URADL\u0026#39;][thisState] postsynaptic[\u0026#39;URBL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;URBL\u0026#39;][thisState] postsynaptic[\u0026#39;URYDL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;URYDL\u0026#39;][thisState] def CEPDR(): postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;BDUR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;BDUR\u0026#39;][thisState] postsynaptic[\u0026#39;IL1DR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;IL1DR\u0026#39;][thisState] postsynaptic[\u0026#39;IL1R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1R\u0026#39;][thisState] postsynaptic[\u0026#39;OLLR\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;OLLR\u0026#39;][thisState] postsynaptic[\u0026#39;OLQDR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;OLQDR\u0026#39;][thisState] postsynaptic[\u0026#39;OLQDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;OLQDR\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RICL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RICL\u0026#39;][thisState] postsynaptic[\u0026#39;RICR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RICR\u0026#39;][thisState] postsynaptic[\u0026#39;RIH\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIH\u0026#39;][thisState] postsynaptic[\u0026#39;RIS\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIS\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;RMGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGR\u0026#39;][thisState] postsynaptic[\u0026#39;RMHL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMHL\u0026#39;][thisState] postsynaptic[\u0026#39;RMHR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMHR\u0026#39;][thisState] postsynaptic[\u0026#39;SIADL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIADL\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBDR\u0026#39;][thisState] postsynaptic[\u0026#39;URADR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URADR\u0026#39;][thisState] postsynaptic[\u0026#39;URBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;URBR\u0026#39;][thisState] postsynaptic[\u0026#39;URYDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URYDR\u0026#39;][thisState] def CEPVL(): postsynaptic[\u0026#39;ADLL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADLL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;IL1VL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;IL1VL\u0026#39;][thisState] postsynaptic[\u0026#39;MVL03\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL03\u0026#39;][thisState] postsynaptic[\u0026#39;OLLL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;OLLL\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;OLQVL\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQVL\u0026#39;][thisState] postsynaptic[\u0026#39;RICL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;RICL\u0026#39;][thisState] postsynaptic[\u0026#39;RICR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RICR\u0026#39;][thisState] postsynaptic[\u0026#39;RIH\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIH\u0026#39;][thisState] postsynaptic[\u0026#39;RIPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIPL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMHL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMHL\u0026#39;][thisState] postsynaptic[\u0026#39;SIAVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIAVL\u0026#39;][thisState] postsynaptic[\u0026#39;URAVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;URAVL\u0026#39;][thisState] def CEPVR(): postsynaptic[\u0026#39;ASGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASGR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;IL1VR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1VR\u0026#39;][thisState] postsynaptic[\u0026#39;IL2VR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;IL2VR\u0026#39;][thisState] postsynaptic[\u0026#39;MVR04\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR04\u0026#39;][thisState] postsynaptic[\u0026#39;OLLR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;OLLR\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;OLQVR\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQVR\u0026#39;][thisState] postsynaptic[\u0026#39;RICL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RICL\u0026#39;][thisState] postsynaptic[\u0026#39;RICR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RICR\u0026#39;][thisState] postsynaptic[\u0026#39;RIH\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIH\u0026#39;][thisState] postsynaptic[\u0026#39;RIPR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIPR\u0026#39;][thisState] postsynaptic[\u0026#39;RIVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIVL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMHR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMHR\u0026#39;][thisState] postsynaptic[\u0026#39;SIAVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SIAVR\u0026#39;][thisState] postsynaptic[\u0026#39;URAVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URAVR\u0026#39;][thisState] def DA1(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;DA4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA4\u0026#39;][thisState] postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;MDL08\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;MDL08\u0026#39;][thisState] postsynaptic[\u0026#39;MDR08\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;MDR08\u0026#39;][thisState] postsynaptic[\u0026#39;SABVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SABVL\u0026#39;][thisState] postsynaptic[\u0026#39;SABVR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SABVR\u0026#39;][thisState] postsynaptic[\u0026#39;VD1\u0026#39;][nextState] = 17 + postsynaptic[\u0026#39;VD1\u0026#39;][thisState] postsynaptic[\u0026#39;VD2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD2\u0026#39;][thisState] def DA2(): postsynaptic[\u0026#39;AS2\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AS2\u0026#39;][thisState] postsynaptic[\u0026#39;AS3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS3\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;MDL07\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL07\u0026#39;][thisState] postsynaptic[\u0026#39;MDL08\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL08\u0026#39;][thisState] postsynaptic[\u0026#39;MDL09\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL09\u0026#39;][thisState] postsynaptic[\u0026#39;MDL10\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL10\u0026#39;][thisState] postsynaptic[\u0026#39;MDR07\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR07\u0026#39;][thisState] postsynaptic[\u0026#39;MDR08\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR08\u0026#39;][thisState] postsynaptic[\u0026#39;MDR09\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR09\u0026#39;][thisState] postsynaptic[\u0026#39;MDR10\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR10\u0026#39;][thisState] postsynaptic[\u0026#39;SABVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SABVL\u0026#39;][thisState] postsynaptic[\u0026#39;VA1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA1\u0026#39;][thisState] postsynaptic[\u0026#39;VD1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD1\u0026#39;][thisState] postsynaptic[\u0026#39;VD2\u0026#39;][nextState] = 11 + postsynaptic[\u0026#39;VD2\u0026#39;][thisState] postsynaptic[\u0026#39;VD3\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VD3\u0026#39;][thisState] def DA3(): postsynaptic[\u0026#39;AS4\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AS4\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;DA4\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DA4\u0026#39;][thisState] postsynaptic[\u0026#39;DB3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB3\u0026#39;][thisState] postsynaptic[\u0026#39;DD2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DD2\u0026#39;][thisState] postsynaptic[\u0026#39;MDL09\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MDL09\u0026#39;][thisState] postsynaptic[\u0026#39;MDL10\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MDL10\u0026#39;][thisState] postsynaptic[\u0026#39;MDL12\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MDL12\u0026#39;][thisState] postsynaptic[\u0026#39;MDR09\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MDR09\u0026#39;][thisState] postsynaptic[\u0026#39;MDR10\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MDR10\u0026#39;][thisState] postsynaptic[\u0026#39;MDR12\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MDR12\u0026#39;][thisState] postsynaptic[\u0026#39;VD3\u0026#39;][nextState] = 25 + postsynaptic[\u0026#39;VD3\u0026#39;][thisState] postsynaptic[\u0026#39;VD4\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;VD4\u0026#39;][thisState] def DA4(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;DA1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA1\u0026#39;][thisState] postsynaptic[\u0026#39;DA3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA3\u0026#39;][thisState] postsynaptic[\u0026#39;DB3\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DB3\u0026#39;][thisState] postsynaptic[\u0026#39;DD2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DD2\u0026#39;][thisState] postsynaptic[\u0026#39;MDL11\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDL11\u0026#39;][thisState] postsynaptic[\u0026#39;MDL12\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDL12\u0026#39;][thisState] postsynaptic[\u0026#39;MDL14\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MDL14\u0026#39;][thisState] postsynaptic[\u0026#39;MDR11\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR11\u0026#39;][thisState] postsynaptic[\u0026#39;MDR12\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR12\u0026#39;][thisState] postsynaptic[\u0026#39;MDR14\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MDR14\u0026#39;][thisState] postsynaptic[\u0026#39;VB6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB6\u0026#39;][thisState] postsynaptic[\u0026#39;VD4\u0026#39;][nextState] = 12 + postsynaptic[\u0026#39;VD4\u0026#39;][thisState] postsynaptic[\u0026#39;VD5\u0026#39;][nextState] = 15 + postsynaptic[\u0026#39;VD5\u0026#39;][thisState] def DA5(): postsynaptic[\u0026#39;AS6\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AS6\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;DB4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB4\u0026#39;][thisState] postsynaptic[\u0026#39;MDL13\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MDL13\u0026#39;][thisState] postsynaptic[\u0026#39;MDL14\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDL14\u0026#39;][thisState] postsynaptic[\u0026#39;MDR13\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MDR13\u0026#39;][thisState] postsynaptic[\u0026#39;MDR14\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR14\u0026#39;][thisState] postsynaptic[\u0026#39;VA4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA4\u0026#39;][thisState] postsynaptic[\u0026#39;VA5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA5\u0026#39;][thisState] postsynaptic[\u0026#39;VD5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD5\u0026#39;][thisState] postsynaptic[\u0026#39;VD6\u0026#39;][nextState] = 16 + postsynaptic[\u0026#39;VD6\u0026#39;][thisState] def DA6(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;MDL11\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MDL11\u0026#39;][thisState] postsynaptic[\u0026#39;MDL12\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDL12\u0026#39;][thisState] postsynaptic[\u0026#39;MDL13\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDL13\u0026#39;][thisState] postsynaptic[\u0026#39;MDL14\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDL14\u0026#39;][thisState] postsynaptic[\u0026#39;MDL16\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDL16\u0026#39;][thisState] postsynaptic[\u0026#39;MDR11\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR11\u0026#39;][thisState] postsynaptic[\u0026#39;MDR12\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR12\u0026#39;][thisState] postsynaptic[\u0026#39;MDR13\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR13\u0026#39;][thisState] postsynaptic[\u0026#39;MDR14\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR14\u0026#39;][thisState] postsynaptic[\u0026#39;MDR16\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR16\u0026#39;][thisState] postsynaptic[\u0026#39;VD4\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;VD4\u0026#39;][thisState] postsynaptic[\u0026#39;VD5\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VD5\u0026#39;][thisState] postsynaptic[\u0026#39;VD6\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VD6\u0026#39;][thisState] def DA7(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;MDL15\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDL15\u0026#39;][thisState] postsynaptic[\u0026#39;MDL17\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDL17\u0026#39;][thisState] postsynaptic[\u0026#39;MDL18\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDL18\u0026#39;][thisState] postsynaptic[\u0026#39;MDR15\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR15\u0026#39;][thisState] postsynaptic[\u0026#39;MDR17\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR17\u0026#39;][thisState] postsynaptic[\u0026#39;MDR18\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR18\u0026#39;][thisState] def DA8(): postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;DA9\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA9\u0026#39;][thisState] postsynaptic[\u0026#39;MDL17\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDL17\u0026#39;][thisState] postsynaptic[\u0026#39;MDL19\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDL19\u0026#39;][thisState] postsynaptic[\u0026#39;MDL20\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDL20\u0026#39;][thisState] postsynaptic[\u0026#39;MDR17\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR17\u0026#39;][thisState] postsynaptic[\u0026#39;MDR19\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR19\u0026#39;][thisState] postsynaptic[\u0026#39;MDR20\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR20\u0026#39;][thisState] def DA9(): postsynaptic[\u0026#39;DA8\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA8\u0026#39;][thisState] postsynaptic[\u0026#39;DD6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DD6\u0026#39;][thisState] postsynaptic[\u0026#39;MDL19\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDL19\u0026#39;][thisState] postsynaptic[\u0026#39;MDL21\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDL21\u0026#39;][thisState] postsynaptic[\u0026#39;MDL22\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDL22\u0026#39;][thisState] postsynaptic[\u0026#39;MDL23\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDL23\u0026#39;][thisState] postsynaptic[\u0026#39;MDL24\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDL24\u0026#39;][thisState] postsynaptic[\u0026#39;MDR19\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR19\u0026#39;][thisState] postsynaptic[\u0026#39;MDR21\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR21\u0026#39;][thisState] postsynaptic[\u0026#39;MDR22\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR22\u0026#39;][thisState] postsynaptic[\u0026#39;MDR23\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR23\u0026#39;][thisState] postsynaptic[\u0026#39;MDR24\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR24\u0026#39;][thisState] postsynaptic[\u0026#39;PDA\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PDA\u0026#39;][thisState] postsynaptic[\u0026#39;PHCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PHCL\u0026#39;][thisState] postsynaptic[\u0026#39;RID\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RID\u0026#39;][thisState] postsynaptic[\u0026#39;VD13\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD13\u0026#39;][thisState] def DB1(): postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AS1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS1\u0026#39;][thisState] postsynaptic[\u0026#39;AS2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS2\u0026#39;][thisState] postsynaptic[\u0026#39;AS3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS3\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;DB2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB2\u0026#39;][thisState] postsynaptic[\u0026#39;DB4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB4\u0026#39;][thisState] postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;MDL07\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL07\u0026#39;][thisState] postsynaptic[\u0026#39;MDL08\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL08\u0026#39;][thisState] postsynaptic[\u0026#39;MDR07\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR07\u0026#39;][thisState] postsynaptic[\u0026#39;MDR08\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR08\u0026#39;][thisState] postsynaptic[\u0026#39;RID\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RID\u0026#39;][thisState] postsynaptic[\u0026#39;RIS\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIS\u0026#39;][thisState] postsynaptic[\u0026#39;VB3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB3\u0026#39;][thisState] postsynaptic[\u0026#39;VB4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB4\u0026#39;][thisState] postsynaptic[\u0026#39;VD1\u0026#39;][nextState] = 21 + postsynaptic[\u0026#39;VD1\u0026#39;][thisState] postsynaptic[\u0026#39;VD2\u0026#39;][nextState] = 15 + postsynaptic[\u0026#39;VD2\u0026#39;][thisState] postsynaptic[\u0026#39;VD3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD3\u0026#39;][thisState] def DB2(): postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;DA3\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;DA3\u0026#39;][thisState] postsynaptic[\u0026#39;DB1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB1\u0026#39;][thisState] postsynaptic[\u0026#39;DB3\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;DB3\u0026#39;][thisState] postsynaptic[\u0026#39;DD2\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DD2\u0026#39;][thisState] postsynaptic[\u0026#39;MDL09\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDL09\u0026#39;][thisState] postsynaptic[\u0026#39;MDL10\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDL10\u0026#39;][thisState] postsynaptic[\u0026#39;MDL11\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDL11\u0026#39;][thisState] postsynaptic[\u0026#39;MDL12\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDL12\u0026#39;][thisState] postsynaptic[\u0026#39;MDR09\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR09\u0026#39;][thisState] postsynaptic[\u0026#39;MDR10\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR10\u0026#39;][thisState] postsynaptic[\u0026#39;MDR11\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR11\u0026#39;][thisState] postsynaptic[\u0026#39;MDR12\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR12\u0026#39;][thisState] postsynaptic[\u0026#39;VB1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VB1\u0026#39;][thisState] postsynaptic[\u0026#39;VD3\u0026#39;][nextState] = 23 + postsynaptic[\u0026#39;VD3\u0026#39;][thisState] postsynaptic[\u0026#39;VD4\u0026#39;][nextState] = 14 + postsynaptic[\u0026#39;VD4\u0026#39;][thisState] postsynaptic[\u0026#39;VD5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD5\u0026#39;][thisState] def DB3(): postsynaptic[\u0026#39;AS4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS4\u0026#39;][thisState] postsynaptic[\u0026#39;AS5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS5\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;DA4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA4\u0026#39;][thisState] postsynaptic[\u0026#39;DB2\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;DB2\u0026#39;][thisState] postsynaptic[\u0026#39;DB4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB4\u0026#39;][thisState] postsynaptic[\u0026#39;DD2\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;DD2\u0026#39;][thisState] postsynaptic[\u0026#39;DD3\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;DD3\u0026#39;][thisState] postsynaptic[\u0026#39;MDL11\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDL11\u0026#39;][thisState] postsynaptic[\u0026#39;MDL12\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDL12\u0026#39;][thisState] postsynaptic[\u0026#39;MDL13\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDL13\u0026#39;][thisState] postsynaptic[\u0026#39;MDL14\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDL14\u0026#39;][thisState] postsynaptic[\u0026#39;MDR11\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR11\u0026#39;][thisState] postsynaptic[\u0026#39;MDR12\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR12\u0026#39;][thisState] postsynaptic[\u0026#39;MDR13\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR13\u0026#39;][thisState] postsynaptic[\u0026#39;MDR14\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR14\u0026#39;][thisState] postsynaptic[\u0026#39;VD4\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;VD4\u0026#39;][thisState] postsynaptic[\u0026#39;VD5\u0026#39;][nextState] = 26 + postsynaptic[\u0026#39;VD5\u0026#39;][thisState] postsynaptic[\u0026#39;VD6\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;VD6\u0026#39;][thisState] def DB4(): postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;DB1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB1\u0026#39;][thisState] postsynaptic[\u0026#39;DB3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB3\u0026#39;][thisState] postsynaptic[\u0026#39;DD3\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DD3\u0026#39;][thisState] postsynaptic[\u0026#39;MDL13\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL13\u0026#39;][thisState] postsynaptic[\u0026#39;MDL14\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL14\u0026#39;][thisState] postsynaptic[\u0026#39;MDL16\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL16\u0026#39;][thisState] postsynaptic[\u0026#39;MDR13\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR13\u0026#39;][thisState] postsynaptic[\u0026#39;MDR14\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR14\u0026#39;][thisState] postsynaptic[\u0026#39;MDR16\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR16\u0026#39;][thisState] postsynaptic[\u0026#39;VB2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB2\u0026#39;][thisState] postsynaptic[\u0026#39;VB4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB4\u0026#39;][thisState] postsynaptic[\u0026#39;VD6\u0026#39;][nextState] = 13 + postsynaptic[\u0026#39;VD6\u0026#39;][thisState] def DB5(): postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;MDL15\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL15\u0026#39;][thisState] postsynaptic[\u0026#39;MDL17\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL17\u0026#39;][thisState] postsynaptic[\u0026#39;MDL18\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL18\u0026#39;][thisState] postsynaptic[\u0026#39;MDR15\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR15\u0026#39;][thisState] postsynaptic[\u0026#39;MDR17\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR17\u0026#39;][thisState] postsynaptic[\u0026#39;MDR18\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR18\u0026#39;][thisState] def DB6(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;MDL17\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL17\u0026#39;][thisState] postsynaptic[\u0026#39;MDL19\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL19\u0026#39;][thisState] postsynaptic[\u0026#39;MDL20\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL20\u0026#39;][thisState] postsynaptic[\u0026#39;MDR17\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR17\u0026#39;][thisState] postsynaptic[\u0026#39;MDR19\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR19\u0026#39;][thisState] postsynaptic[\u0026#39;MDR20\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR20\u0026#39;][thisState] def DB7(): postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;MDL19\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL19\u0026#39;][thisState] postsynaptic[\u0026#39;MDL21\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL21\u0026#39;][thisState] postsynaptic[\u0026#39;MDL22\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL22\u0026#39;][thisState] postsynaptic[\u0026#39;MDL23\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL23\u0026#39;][thisState] postsynaptic[\u0026#39;MDL24\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL24\u0026#39;][thisState] postsynaptic[\u0026#39;MDR19\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR19\u0026#39;][thisState] postsynaptic[\u0026#39;MDR21\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR21\u0026#39;][thisState] postsynaptic[\u0026#39;MDR22\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR22\u0026#39;][thisState] postsynaptic[\u0026#39;MDR23\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR23\u0026#39;][thisState] postsynaptic[\u0026#39;MDR24\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR24\u0026#39;][thisState] postsynaptic[\u0026#39;VD13\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD13\u0026#39;][thisState] def DD1(): postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;DD2\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DD2\u0026#39;][thisState] postsynaptic[\u0026#39;MDL07\u0026#39;][nextState] = -6 + postsynaptic[\u0026#39;MDL07\u0026#39;][thisState] postsynaptic[\u0026#39;MDL08\u0026#39;][nextState] = -6 + postsynaptic[\u0026#39;MDL08\u0026#39;][thisState] postsynaptic[\u0026#39;MDL09\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDL09\u0026#39;][thisState] postsynaptic[\u0026#39;MDL10\u0026#39;][nextState] = -6 + postsynaptic[\u0026#39;MDL10\u0026#39;][thisState] postsynaptic[\u0026#39;MDR07\u0026#39;][nextState] = -6 + postsynaptic[\u0026#39;MDR07\u0026#39;][thisState] postsynaptic[\u0026#39;MDR08\u0026#39;][nextState] = -6 + postsynaptic[\u0026#39;MDR08\u0026#39;][thisState] postsynaptic[\u0026#39;MDR09\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDR09\u0026#39;][thisState] postsynaptic[\u0026#39;MDR10\u0026#39;][nextState] = -6 + postsynaptic[\u0026#39;MDR10\u0026#39;][thisState] postsynaptic[\u0026#39;VD1\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;VD1\u0026#39;][thisState] postsynaptic[\u0026#39;VD2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD2\u0026#39;][thisState] postsynaptic[\u0026#39;VD2\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD2\u0026#39;][thisState] def DD2(): postsynaptic[\u0026#39;DA3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA3\u0026#39;][thisState] postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;DD3\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DD3\u0026#39;][thisState] postsynaptic[\u0026#39;MDL09\u0026#39;][nextState] = -6 + postsynaptic[\u0026#39;MDL09\u0026#39;][thisState] postsynaptic[\u0026#39;MDL11\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDL11\u0026#39;][thisState] postsynaptic[\u0026#39;MDL12\u0026#39;][nextState] = -6 + postsynaptic[\u0026#39;MDL12\u0026#39;][thisState] postsynaptic[\u0026#39;MDR09\u0026#39;][nextState] = -6 + postsynaptic[\u0026#39;MDR09\u0026#39;][thisState] postsynaptic[\u0026#39;MDR11\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDR11\u0026#39;][thisState] postsynaptic[\u0026#39;MDR12\u0026#39;][nextState] = -6 + postsynaptic[\u0026#39;MDR12\u0026#39;][thisState] postsynaptic[\u0026#39;VD3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD3\u0026#39;][thisState] postsynaptic[\u0026#39;VD4\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VD4\u0026#39;][thisState] def DD3(): postsynaptic[\u0026#39;DD2\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DD2\u0026#39;][thisState] postsynaptic[\u0026#39;DD4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DD4\u0026#39;][thisState] postsynaptic[\u0026#39;MDL11\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDL11\u0026#39;][thisState] postsynaptic[\u0026#39;MDL13\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MDL13\u0026#39;][thisState] postsynaptic[\u0026#39;MDL14\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDL14\u0026#39;][thisState] postsynaptic[\u0026#39;MDR11\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDR11\u0026#39;][thisState] postsynaptic[\u0026#39;MDR13\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MDR13\u0026#39;][thisState] postsynaptic[\u0026#39;MDR14\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDR14\u0026#39;][thisState] def DD4(): postsynaptic[\u0026#39;DD3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DD3\u0026#39;][thisState] postsynaptic[\u0026#39;MDL13\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDL13\u0026#39;][thisState] postsynaptic[\u0026#39;MDL15\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDL15\u0026#39;][thisState] postsynaptic[\u0026#39;MDL16\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDL16\u0026#39;][thisState] postsynaptic[\u0026#39;MDR13\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDR13\u0026#39;][thisState] postsynaptic[\u0026#39;MDR15\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDR15\u0026#39;][thisState] postsynaptic[\u0026#39;MDR16\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDR16\u0026#39;][thisState] postsynaptic[\u0026#39;VC3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VC3\u0026#39;][thisState] postsynaptic[\u0026#39;VD8\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD8\u0026#39;][thisState] def DD5(): postsynaptic[\u0026#39;MDL17\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDL17\u0026#39;][thisState] postsynaptic[\u0026#39;MDL18\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDL18\u0026#39;][thisState] postsynaptic[\u0026#39;MDL20\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDL20\u0026#39;][thisState] postsynaptic[\u0026#39;MDR17\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDR17\u0026#39;][thisState] postsynaptic[\u0026#39;MDR18\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDR18\u0026#39;][thisState] postsynaptic[\u0026#39;MDR20\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDR20\u0026#39;][thisState] postsynaptic[\u0026#39;VB8\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB8\u0026#39;][thisState] postsynaptic[\u0026#39;VD10\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD10\u0026#39;][thisState] postsynaptic[\u0026#39;VD9\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD9\u0026#39;][thisState] def DD6(): postsynaptic[\u0026#39;MDL19\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDL19\u0026#39;][thisState] postsynaptic[\u0026#39;MDL21\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDL21\u0026#39;][thisState] postsynaptic[\u0026#39;MDL22\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDL22\u0026#39;][thisState] postsynaptic[\u0026#39;MDL23\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDL23\u0026#39;][thisState] postsynaptic[\u0026#39;MDL24\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDL24\u0026#39;][thisState] postsynaptic[\u0026#39;MDR19\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDR19\u0026#39;][thisState] postsynaptic[\u0026#39;MDR21\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDR21\u0026#39;][thisState] postsynaptic[\u0026#39;MDR22\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDR22\u0026#39;][thisState] postsynaptic[\u0026#39;MDR23\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDR23\u0026#39;][thisState] postsynaptic[\u0026#39;MDR24\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDR24\u0026#39;][thisState] def DVA(): postsynaptic[\u0026#39;AIZL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AIZL\u0026#39;][thisState] postsynaptic[\u0026#39;AQR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AQR\u0026#39;][thisState] postsynaptic[\u0026#39;AUAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AUAL\u0026#39;][thisState] postsynaptic[\u0026#39;AUAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AUAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;DB1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB1\u0026#39;][thisState] postsynaptic[\u0026#39;DB2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB2\u0026#39;][thisState] postsynaptic[\u0026#39;DB3\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DB3\u0026#39;][thisState] postsynaptic[\u0026#39;DB4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB4\u0026#39;][thisState] postsynaptic[\u0026#39;DB5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB5\u0026#39;][thisState] postsynaptic[\u0026#39;DB6\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DB6\u0026#39;][thisState] postsynaptic[\u0026#39;DB7\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB7\u0026#39;][thisState] postsynaptic[\u0026#39;PDEL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;PDEL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;PVR\u0026#39;][thisState] postsynaptic[\u0026#39;PVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVR\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;RIR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIR\u0026#39;][thisState] postsynaptic[\u0026#39;SAADR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SAADR\u0026#39;][thisState] postsynaptic[\u0026#39;SAAVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SAAVL\u0026#39;][thisState] postsynaptic[\u0026#39;SAAVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SAAVR\u0026#39;][thisState] postsynaptic[\u0026#39;SABD\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SABD\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SMBDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SMBDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBVL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SMBVL\u0026#39;][thisState] postsynaptic[\u0026#39;SMBVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SMBVR\u0026#39;][thisState] postsynaptic[\u0026#39;VA12\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA12\u0026#39;][thisState] postsynaptic[\u0026#39;VA2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA2\u0026#39;][thisState] postsynaptic[\u0026#39;VB1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB1\u0026#39;][thisState] postsynaptic[\u0026#39;VB11\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VB11\u0026#39;][thisState] def DVB(): postsynaptic[\u0026#39;AS9\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AS9\u0026#39;][thisState] postsynaptic[\u0026#39;AVL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVL\u0026#39;][thisState] postsynaptic[\u0026#39;AVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVL\u0026#39;][thisState] postsynaptic[\u0026#39;DA8\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DA8\u0026#39;][thisState] postsynaptic[\u0026#39;DD6\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DD6\u0026#39;][thisState] postsynaptic[\u0026#39;DVC\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DVC\u0026#39;][thisState] # postsynaptic[\u0026#39;MANAL\u0026#39;][nextState] = -5 + postsynaptic[\u0026#39;MANAL\u0026#39;][thisState] - just not needed or used postsynaptic[\u0026#39;PDA\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PDA\u0026#39;][thisState] postsynaptic[\u0026#39;PHCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PHCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVPL\u0026#39;][thisState] postsynaptic[\u0026#39;VA9\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA9\u0026#39;][thisState] postsynaptic[\u0026#39;VB9\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB9\u0026#39;][thisState] def DVC(): postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVKR\u0026#39;][thisState] postsynaptic[\u0026#39;AVL\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;AVL\u0026#39;][thisState] postsynaptic[\u0026#39;PVPL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVPL\u0026#39;][thisState] postsynaptic[\u0026#39;PVPR\u0026#39;][nextState] = 13 + postsynaptic[\u0026#39;PVPR\u0026#39;][thisState] postsynaptic[\u0026#39;PVT\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVT\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RMFL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMFL\u0026#39;][thisState] postsynaptic[\u0026#39;RMFR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMFR\u0026#39;][thisState] postsynaptic[\u0026#39;VA9\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA9\u0026#39;][thisState] postsynaptic[\u0026#39;VD1\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VD1\u0026#39;][thisState] postsynaptic[\u0026#39;VD10\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;VD10\u0026#39;][thisState] def FLPL(): postsynaptic[\u0026#39;ADEL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ADEL\u0026#39;][thisState] postsynaptic[\u0026#39;ADER\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ADER\u0026#39;][thisState] postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 15 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 17 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 13 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;FLPR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;FLPR\u0026#39;][thisState] postsynaptic[\u0026#39;RIH\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIH\u0026#39;][thisState] def FLPR(): postsynaptic[\u0026#39;ADER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADER\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 12 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;AVJR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJR\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;FLPL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;FLPL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;VB1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB1\u0026#39;][thisState] def HSNL(): postsynaptic[\u0026#39;AIAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIAL\u0026#39;][thisState] postsynaptic[\u0026#39;AIZL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIZL\u0026#39;][thisState] postsynaptic[\u0026#39;AIZR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIZR\u0026#39;][thisState] postsynaptic[\u0026#39;ASHL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASHL\u0026#39;][thisState] postsynaptic[\u0026#39;ASHR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ASHR\u0026#39;][thisState] postsynaptic[\u0026#39;ASJR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASJR\u0026#39;][thisState] postsynaptic[\u0026#39;ASKL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVFL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVFL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;AWBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWBL\u0026#39;][thisState] postsynaptic[\u0026#39;AWBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AWBR\u0026#39;][thisState] postsynaptic[\u0026#39;HSNR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;HSNR\u0026#39;][thisState] postsynaptic[\u0026#39;HSNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNR\u0026#39;][thisState] postsynaptic[\u0026#39;MVULVA\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;MVULVA\u0026#39;][thisState] postsynaptic[\u0026#39;RIFL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIFL\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] postsynaptic[\u0026#39;SABVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SABVL\u0026#39;][thisState] postsynaptic[\u0026#39;VC5\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VC5\u0026#39;][thisState] def HSNR(): postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AIZL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIZL\u0026#39;][thisState] postsynaptic[\u0026#39;AIZR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIZR\u0026#39;][thisState] postsynaptic[\u0026#39;AS5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS5\u0026#39;][thisState] postsynaptic[\u0026#39;ASHL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ASHL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVFL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;AVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVL\u0026#39;][thisState] postsynaptic[\u0026#39;AWBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWBL\u0026#39;][thisState] postsynaptic[\u0026#39;BDUR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;BDUR\u0026#39;][thisState] postsynaptic[\u0026#39;DA5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA5\u0026#39;][thisState] postsynaptic[\u0026#39;DA6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA6\u0026#39;][thisState] postsynaptic[\u0026#39;HSNL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;HSNL\u0026#39;][thisState] postsynaptic[\u0026#39;MVULVA\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVULVA\u0026#39;][thisState] postsynaptic[\u0026#39;PVNR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVNR\u0026#39;][thisState] postsynaptic[\u0026#39;PVQR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVQR\u0026#39;][thisState] postsynaptic[\u0026#39;RIFR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RIFR\u0026#39;][thisState] postsynaptic[\u0026#39;RMGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGR\u0026#39;][thisState] postsynaptic[\u0026#39;SABD\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SABD\u0026#39;][thisState] postsynaptic[\u0026#39;SABVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SABVR\u0026#39;][thisState] postsynaptic[\u0026#39;VA6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA6\u0026#39;][thisState] postsynaptic[\u0026#39;VC2\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VC2\u0026#39;][thisState] postsynaptic[\u0026#39;VC3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VC3\u0026#39;][thisState] postsynaptic[\u0026#39;VD4\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD4\u0026#39;][thisState] def I1L(): postsynaptic[\u0026#39;I1R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I1R\u0026#39;][thisState] postsynaptic[\u0026#39;I3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I3\u0026#39;][thisState] postsynaptic[\u0026#39;I5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I5\u0026#39;][thisState] postsynaptic[\u0026#39;RIPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIPL\u0026#39;][thisState] postsynaptic[\u0026#39;RIPR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIPR\u0026#39;][thisState] def I1R(): postsynaptic[\u0026#39;I1L\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I1L\u0026#39;][thisState] postsynaptic[\u0026#39;I3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I3\u0026#39;][thisState] postsynaptic[\u0026#39;I5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I5\u0026#39;][thisState] postsynaptic[\u0026#39;RIPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIPL\u0026#39;][thisState] postsynaptic[\u0026#39;RIPR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIPR\u0026#39;][thisState] def I2L(): postsynaptic[\u0026#39;I1L\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I1L\u0026#39;][thisState] postsynaptic[\u0026#39;I1R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I1R\u0026#39;][thisState] postsynaptic[\u0026#39;M1\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;M1\u0026#39;][thisState] def I2R(): postsynaptic[\u0026#39;I1L\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I1L\u0026#39;][thisState] postsynaptic[\u0026#39;I1R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I1R\u0026#39;][thisState] postsynaptic[\u0026#39;M1\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;M1\u0026#39;][thisState] def I3(): postsynaptic[\u0026#39;M1\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;M1\u0026#39;][thisState] postsynaptic[\u0026#39;M2L\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M2L\u0026#39;][thisState] postsynaptic[\u0026#39;M2R\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M2R\u0026#39;][thisState] def I4(): postsynaptic[\u0026#39;I2L\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;I2L\u0026#39;][thisState] postsynaptic[\u0026#39;I2R\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;I2R\u0026#39;][thisState] postsynaptic[\u0026#39;I5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;I5\u0026#39;][thisState] postsynaptic[\u0026#39;M1\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;M1\u0026#39;][thisState] def I5(): postsynaptic[\u0026#39;I1L\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;I1L\u0026#39;][thisState] postsynaptic[\u0026#39;I1R\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;I1R\u0026#39;][thisState] postsynaptic[\u0026#39;M1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M1\u0026#39;][thisState] postsynaptic[\u0026#39;M5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M5\u0026#39;][thisState] postsynaptic[\u0026#39;MI\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MI\u0026#39;][thisState] def I6(): postsynaptic[\u0026#39;I2L\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;I2L\u0026#39;][thisState] postsynaptic[\u0026#39;I2R\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;I2R\u0026#39;][thisState] postsynaptic[\u0026#39;I3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I3\u0026#39;][thisState] postsynaptic[\u0026#39;M4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;M4\u0026#39;][thisState] postsynaptic[\u0026#39;M5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M5\u0026#39;][thisState] postsynaptic[\u0026#39;NSML\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;NSML\u0026#39;][thisState] postsynaptic[\u0026#39;NSMR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;NSMR\u0026#39;][thisState] def IL1DL(): postsynaptic[\u0026#39;IL1DR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1DR\u0026#39;][thisState] postsynaptic[\u0026#39;IL1L\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1L\u0026#39;][thisState] postsynaptic[\u0026#39;MDL01\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL01\u0026#39;][thisState] postsynaptic[\u0026#39;MDL02\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL02\u0026#39;][thisState] postsynaptic[\u0026#39;MDL04\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL04\u0026#39;][thisState] postsynaptic[\u0026#39;OLLL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLLL\u0026#39;][thisState] postsynaptic[\u0026#39;PVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVR\u0026#39;][thisState] postsynaptic[\u0026#39;RIH\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIH\u0026#39;][thisState] postsynaptic[\u0026#39;RIPL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIPL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;RMEV\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMEV\u0026#39;][thisState] postsynaptic[\u0026#39;URYDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URYDL\u0026#39;][thisState] def IL1DR(): postsynaptic[\u0026#39;IL1DL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1DL\u0026#39;][thisState] postsynaptic[\u0026#39;IL1R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1R\u0026#39;][thisState] postsynaptic[\u0026#39;MDR01\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDR01\u0026#39;][thisState] postsynaptic[\u0026#39;MDR02\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR02\u0026#39;][thisState] postsynaptic[\u0026#39;OLLR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLLR\u0026#39;][thisState] postsynaptic[\u0026#39;RIPR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RIPR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;RMEV\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMEV\u0026#39;][thisState] def IL1L(): postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;IL1DL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;IL1DL\u0026#39;][thisState] postsynaptic[\u0026#39;IL1VL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1VL\u0026#39;][thisState] postsynaptic[\u0026#39;MDL01\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDL01\u0026#39;][thisState] postsynaptic[\u0026#39;MDL03\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDL03\u0026#39;][thisState] postsynaptic[\u0026#39;MDL05\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MDL05\u0026#39;][thisState] postsynaptic[\u0026#39;MVL01\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MVL01\u0026#39;][thisState] postsynaptic[\u0026#39;MVL03\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MVL03\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;RMER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMER\u0026#39;][thisState] def IL1R(): postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;IL1DR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;IL1DR\u0026#39;][thisState] postsynaptic[\u0026#39;IL1VR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1VR\u0026#39;][thisState] postsynaptic[\u0026#39;MDR01\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR01\u0026#39;][thisState] postsynaptic[\u0026#39;MDR03\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR03\u0026#39;][thisState] postsynaptic[\u0026#39;MVR01\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MVR01\u0026#39;][thisState] postsynaptic[\u0026#39;MVR03\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MVR03\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;RMEL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMEL\u0026#39;][thisState] postsynaptic[\u0026#39;RMHL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMHL\u0026#39;][thisState] postsynaptic[\u0026#39;URXR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;URXR\u0026#39;][thisState] def IL1VL(): postsynaptic[\u0026#39;IL1L\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;IL1L\u0026#39;][thisState] postsynaptic[\u0026#39;IL1VR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1VR\u0026#39;][thisState] postsynaptic[\u0026#39;MVL01\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL01\u0026#39;][thisState] postsynaptic[\u0026#39;MVL02\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MVL02\u0026#39;][thisState] postsynaptic[\u0026#39;RIPL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RIPL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMED\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMED\u0026#39;][thisState] postsynaptic[\u0026#39;URYVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URYVL\u0026#39;][thisState] def IL1VR(): postsynaptic[\u0026#39;IL1R\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;IL1R\u0026#39;][thisState] postsynaptic[\u0026#39;IL1VL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1VL\u0026#39;][thisState] postsynaptic[\u0026#39;IL2R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL2R\u0026#39;][thisState] postsynaptic[\u0026#39;IL2VR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL2VR\u0026#39;][thisState] postsynaptic[\u0026#39;MVR01\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR01\u0026#39;][thisState] postsynaptic[\u0026#39;MVR02\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR02\u0026#39;][thisState] postsynaptic[\u0026#39;RIPR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;RIPR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDR\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;RMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMER\u0026#39;][thisState] def IL2DL(): postsynaptic[\u0026#39;AUAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AUAL\u0026#39;][thisState] postsynaptic[\u0026#39;IL1DL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;IL1DL\u0026#39;][thisState] postsynaptic[\u0026#39;OLQDL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;OLQDL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIPL\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;RIPL\u0026#39;][thisState] postsynaptic[\u0026#39;RMEL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMEL\u0026#39;][thisState] postsynaptic[\u0026#39;RMER\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMER\u0026#39;][thisState] postsynaptic[\u0026#39;URADL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;URADL\u0026#39;][thisState] def IL2DR(): postsynaptic[\u0026#39;CEPDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;CEPDR\u0026#39;][thisState] postsynaptic[\u0026#39;IL1DR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;IL1DR\u0026#39;][thisState] postsynaptic[\u0026#39;RICR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICR\u0026#39;][thisState] postsynaptic[\u0026#39;RIPR\u0026#39;][nextState] = 11 + postsynaptic[\u0026#39;RIPR\u0026#39;][thisState] postsynaptic[\u0026#39;RMED\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMED\u0026#39;][thisState] postsynaptic[\u0026#39;RMEL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMEL\u0026#39;][thisState] postsynaptic[\u0026#39;RMER\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMER\u0026#39;][thisState] postsynaptic[\u0026#39;RMEV\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMEV\u0026#39;][thisState] postsynaptic[\u0026#39;URADR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;URADR\u0026#39;][thisState] def IL2L(): postsynaptic[\u0026#39;ADEL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ADEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;IL1L\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1L\u0026#39;][thisState] postsynaptic[\u0026#39;OLQDL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;OLQDL\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVL\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;OLQVL\u0026#39;][thisState] postsynaptic[\u0026#39;RICL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICL\u0026#39;][thisState] postsynaptic[\u0026#39;RIH\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;RIH\u0026#39;][thisState] postsynaptic[\u0026#39;RMDL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMER\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMER\u0026#39;][thisState] postsynaptic[\u0026#39;RMEV\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMEV\u0026#39;][thisState] postsynaptic[\u0026#39;RMGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGL\u0026#39;][thisState] postsynaptic[\u0026#39;URXL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;URXL\u0026#39;][thisState] def IL2R(): postsynaptic[\u0026#39;ADER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADER\u0026#39;][thisState] postsynaptic[\u0026#39;IL1R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1R\u0026#39;][thisState] postsynaptic[\u0026#39;IL1VR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1VR\u0026#39;][thisState] postsynaptic[\u0026#39;OLLR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLLR\u0026#39;][thisState] postsynaptic[\u0026#39;OLQDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;OLQDR\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;OLQVR\u0026#39;][thisState] postsynaptic[\u0026#39;RIH\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;RIH\u0026#39;][thisState] postsynaptic[\u0026#39;RMDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMEL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMEL\u0026#39;][thisState] postsynaptic[\u0026#39;RMEV\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMEV\u0026#39;][thisState] postsynaptic[\u0026#39;RMGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGR\u0026#39;][thisState] postsynaptic[\u0026#39;URBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URBR\u0026#39;][thisState] postsynaptic[\u0026#39;URXR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URXR\u0026#39;][thisState] def IL2VL(): postsynaptic[\u0026#39;BAGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;BAGR\u0026#39;][thisState] postsynaptic[\u0026#39;IL1VL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;IL1VL\u0026#39;][thisState] postsynaptic[\u0026#39;IL2L\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL2L\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQVL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIH\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIH\u0026#39;][thisState] postsynaptic[\u0026#39;RIPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIPL\u0026#39;][thisState] postsynaptic[\u0026#39;RMEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMEL\u0026#39;][thisState] postsynaptic[\u0026#39;RMER\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMER\u0026#39;][thisState] postsynaptic[\u0026#39;RMEV\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMEV\u0026#39;][thisState] postsynaptic[\u0026#39;URAVL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;URAVL\u0026#39;][thisState] def IL2VR(): postsynaptic[\u0026#39;IL1VR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;IL1VR\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQVR\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIH\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIH\u0026#39;][thisState] postsynaptic[\u0026#39;RIPR\u0026#39;][nextState] = 15 + postsynaptic[\u0026#39;RIPR\u0026#39;][thisState] postsynaptic[\u0026#39;RMEL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMEL\u0026#39;][thisState] postsynaptic[\u0026#39;RMER\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMER\u0026#39;][thisState] postsynaptic[\u0026#39;RMEV\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMEV\u0026#39;][thisState] postsynaptic[\u0026#39;URAVR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;URAVR\u0026#39;][thisState] postsynaptic[\u0026#39;URXR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URXR\u0026#39;][thisState] def LUAL(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;PHBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PHBL\u0026#39;][thisState] postsynaptic[\u0026#39;PLML\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PLML\u0026#39;][thisState] postsynaptic[\u0026#39;PVNL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVNL\u0026#39;][thisState] postsynaptic[\u0026#39;PVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVR\u0026#39;][thisState] postsynaptic[\u0026#39;PVWL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVWL\u0026#39;][thisState] def LUAR(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVJR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJR\u0026#39;][thisState] postsynaptic[\u0026#39;PLMR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PLMR\u0026#39;][thisState] postsynaptic[\u0026#39;PQR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PQR\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVR\u0026#39;][thisState] postsynaptic[\u0026#39;PVWL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVWL\u0026#39;][thisState] def M1(): postsynaptic[\u0026#39;I2L\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;I2L\u0026#39;][thisState] postsynaptic[\u0026#39;I2R\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;I2R\u0026#39;][thisState] postsynaptic[\u0026#39;I3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I3\u0026#39;][thisState] postsynaptic[\u0026#39;I4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I4\u0026#39;][thisState] def M2L(): postsynaptic[\u0026#39;I1L\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;I1L\u0026#39;][thisState] postsynaptic[\u0026#39;I1R\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;I1R\u0026#39;][thisState] postsynaptic[\u0026#39;I3\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;I3\u0026#39;][thisState] postsynaptic[\u0026#39;M2R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;M2R\u0026#39;][thisState] postsynaptic[\u0026#39;M5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;M5\u0026#39;][thisState] postsynaptic[\u0026#39;MI\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MI\u0026#39;][thisState] def M2R(): postsynaptic[\u0026#39;I1L\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;I1L\u0026#39;][thisState] postsynaptic[\u0026#39;I1R\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;I1R\u0026#39;][thisState] postsynaptic[\u0026#39;I3\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;I3\u0026#39;][thisState] postsynaptic[\u0026#39;M3L\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;M3L\u0026#39;][thisState] postsynaptic[\u0026#39;M3R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;M3R\u0026#39;][thisState] postsynaptic[\u0026#39;M5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;M5\u0026#39;][thisState] postsynaptic[\u0026#39;MI\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MI\u0026#39;][thisState] def M3L(): postsynaptic[\u0026#39;I1L\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;I1L\u0026#39;][thisState] postsynaptic[\u0026#39;I1R\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;I1R\u0026#39;][thisState] postsynaptic[\u0026#39;I4\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;I4\u0026#39;][thisState] postsynaptic[\u0026#39;I5\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;I5\u0026#39;][thisState] postsynaptic[\u0026#39;I6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I6\u0026#39;][thisState] postsynaptic[\u0026#39;M1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M1\u0026#39;][thisState] postsynaptic[\u0026#39;M3R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;M3R\u0026#39;][thisState] postsynaptic[\u0026#39;MCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MCL\u0026#39;][thisState] postsynaptic[\u0026#39;MCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MCR\u0026#39;][thisState] postsynaptic[\u0026#39;MI\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MI\u0026#39;][thisState] postsynaptic[\u0026#39;NSML\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;NSML\u0026#39;][thisState] postsynaptic[\u0026#39;NSMR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;NSMR\u0026#39;][thisState] def M3R(): postsynaptic[\u0026#39;I1L\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;I1L\u0026#39;][thisState] postsynaptic[\u0026#39;I1R\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;I1R\u0026#39;][thisState] postsynaptic[\u0026#39;I3\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;I3\u0026#39;][thisState] postsynaptic[\u0026#39;I4\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;I4\u0026#39;][thisState] postsynaptic[\u0026#39;I5\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;I5\u0026#39;][thisState] postsynaptic[\u0026#39;I6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I6\u0026#39;][thisState] postsynaptic[\u0026#39;M1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M1\u0026#39;][thisState] postsynaptic[\u0026#39;M3L\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;M3L\u0026#39;][thisState] postsynaptic[\u0026#39;MCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MCL\u0026#39;][thisState] postsynaptic[\u0026#39;MCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MCR\u0026#39;][thisState] postsynaptic[\u0026#39;MI\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MI\u0026#39;][thisState] postsynaptic[\u0026#39;NSML\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;NSML\u0026#39;][thisState] postsynaptic[\u0026#39;NSMR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;NSMR\u0026#39;][thisState] def M4(): postsynaptic[\u0026#39;I3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I3\u0026#39;][thisState] postsynaptic[\u0026#39;I5\u0026#39;][nextState] = 13 + postsynaptic[\u0026#39;I5\u0026#39;][thisState] postsynaptic[\u0026#39;I6\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;I6\u0026#39;][thisState] postsynaptic[\u0026#39;M2L\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;M2L\u0026#39;][thisState] postsynaptic[\u0026#39;M2R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;M2R\u0026#39;][thisState] postsynaptic[\u0026#39;M4\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;M4\u0026#39;][thisState] postsynaptic[\u0026#39;M5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;M5\u0026#39;][thisState] postsynaptic[\u0026#39;NSML\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;NSML\u0026#39;][thisState] postsynaptic[\u0026#39;NSMR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;NSMR\u0026#39;][thisState] def M5(): postsynaptic[\u0026#39;I5\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;I5\u0026#39;][thisState] postsynaptic[\u0026#39;I5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I5\u0026#39;][thisState] postsynaptic[\u0026#39;I6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I6\u0026#39;][thisState] postsynaptic[\u0026#39;M1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M1\u0026#39;][thisState] postsynaptic[\u0026#39;M2L\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M2L\u0026#39;][thisState] postsynaptic[\u0026#39;M2R\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M2R\u0026#39;][thisState] postsynaptic[\u0026#39;M5\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;M5\u0026#39;][thisState] def MCL(): postsynaptic[\u0026#39;I1L\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;I1L\u0026#39;][thisState] postsynaptic[\u0026#39;I1R\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;I1R\u0026#39;][thisState] postsynaptic[\u0026#39;I2L\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I2L\u0026#39;][thisState] postsynaptic[\u0026#39;I2R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I2R\u0026#39;][thisState] postsynaptic[\u0026#39;I3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I3\u0026#39;][thisState] postsynaptic[\u0026#39;M1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M1\u0026#39;][thisState] postsynaptic[\u0026#39;M2L\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M2L\u0026#39;][thisState] postsynaptic[\u0026#39;M2R\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M2R\u0026#39;][thisState] def MCR(): postsynaptic[\u0026#39;I1L\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;I1L\u0026#39;][thisState] postsynaptic[\u0026#39;I1R\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;I1R\u0026#39;][thisState] postsynaptic[\u0026#39;I3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I3\u0026#39;][thisState] postsynaptic[\u0026#39;M1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M1\u0026#39;][thisState] postsynaptic[\u0026#39;M2L\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M2L\u0026#39;][thisState] postsynaptic[\u0026#39;M2R\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M2R\u0026#39;][thisState] def MI(): postsynaptic[\u0026#39;I1L\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I1L\u0026#39;][thisState] postsynaptic[\u0026#39;I1R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I1R\u0026#39;][thisState] postsynaptic[\u0026#39;I3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I3\u0026#39;][thisState] postsynaptic[\u0026#39;I4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I4\u0026#39;][thisState] postsynaptic[\u0026#39;I5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;I5\u0026#39;][thisState] postsynaptic[\u0026#39;M1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;M1\u0026#39;][thisState] postsynaptic[\u0026#39;M2L\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M2L\u0026#39;][thisState] postsynaptic[\u0026#39;M2R\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M2R\u0026#39;][thisState] postsynaptic[\u0026#39;M3L\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;M3L\u0026#39;][thisState] postsynaptic[\u0026#39;M3R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;M3R\u0026#39;][thisState] postsynaptic[\u0026#39;MCL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MCL\u0026#39;][thisState] postsynaptic[\u0026#39;MCR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MCR\u0026#39;][thisState] def NSML(): postsynaptic[\u0026#39;I1L\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;I1L\u0026#39;][thisState] postsynaptic[\u0026#39;I1R\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;I1R\u0026#39;][thisState] postsynaptic[\u0026#39;I2L\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;I2L\u0026#39;][thisState] postsynaptic[\u0026#39;I2R\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;I2R\u0026#39;][thisState] postsynaptic[\u0026#39;I3\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;I3\u0026#39;][thisState] postsynaptic[\u0026#39;I4\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;I4\u0026#39;][thisState] postsynaptic[\u0026#39;I5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;I5\u0026#39;][thisState] postsynaptic[\u0026#39;I6\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;I6\u0026#39;][thisState] postsynaptic[\u0026#39;M3L\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M3L\u0026#39;][thisState] postsynaptic[\u0026#39;M3R\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M3R\u0026#39;][thisState] def NSMR(): postsynaptic[\u0026#39;I1L\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;I1L\u0026#39;][thisState] postsynaptic[\u0026#39;I1R\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;I1R\u0026#39;][thisState] postsynaptic[\u0026#39;I2L\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;I2L\u0026#39;][thisState] postsynaptic[\u0026#39;I2R\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;I2R\u0026#39;][thisState] postsynaptic[\u0026#39;I3\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;I3\u0026#39;][thisState] postsynaptic[\u0026#39;I4\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;I4\u0026#39;][thisState] postsynaptic[\u0026#39;I5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;I5\u0026#39;][thisState] postsynaptic[\u0026#39;I6\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;I6\u0026#39;][thisState] postsynaptic[\u0026#39;M3L\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M3L\u0026#39;][thisState] postsynaptic[\u0026#39;M3R\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;M3R\u0026#39;][thisState] def OLLL(): postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 21 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;CEPDL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;CEPDL\u0026#39;][thisState] postsynaptic[\u0026#39;CEPVL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;CEPVL\u0026#39;][thisState] postsynaptic[\u0026#39;IL1DL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1DL\u0026#39;][thisState] postsynaptic[\u0026#39;IL1VL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;IL1VL\u0026#39;][thisState] postsynaptic[\u0026#39;OLLR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;OLLR\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;RMEL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMEL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;SMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;URYDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URYDL\u0026#39;][thisState] def OLLR(): postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 16 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;CEPDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;CEPDR\u0026#39;][thisState] postsynaptic[\u0026#39;CEPVR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;CEPVR\u0026#39;][thisState] postsynaptic[\u0026#39;IL1DR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;IL1DR\u0026#39;][thisState] postsynaptic[\u0026#39;IL1VR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1VR\u0026#39;][thisState] postsynaptic[\u0026#39;IL2R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL2R\u0026#39;][thisState] postsynaptic[\u0026#39;OLLL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;OLLL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDR\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;RMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;RMER\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMER\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;SMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SMDVR\u0026#39;][thisState] def OLQDL(): postsynaptic[\u0026#39;CEPDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;CEPDL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RICR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;SIBVL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SIBVL\u0026#39;][thisState] postsynaptic[\u0026#39;URBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URBL\u0026#39;][thisState] def OLQDR(): postsynaptic[\u0026#39;CEPDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;CEPDR\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RICL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICL\u0026#39;][thisState] postsynaptic[\u0026#39;RICR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RIH\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIH\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;RMHR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMHR\u0026#39;][thisState] postsynaptic[\u0026#39;SIBVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SIBVR\u0026#39;][thisState] postsynaptic[\u0026#39;URBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URBR\u0026#39;][thisState] def OLQVL(): postsynaptic[\u0026#39;ADLL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADLL\u0026#39;][thisState] postsynaptic[\u0026#39;CEPVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;CEPVL\u0026#39;][thisState] postsynaptic[\u0026#39;IL1VL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1VL\u0026#39;][thisState] postsynaptic[\u0026#39;IL2VL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL2VL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RICL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RIH\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIH\u0026#39;][thisState] postsynaptic[\u0026#39;RIPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIPL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;SIBDL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SIBDL\u0026#39;][thisState] postsynaptic[\u0026#39;URBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URBL\u0026#39;][thisState] def OLQVR(): postsynaptic[\u0026#39;CEPVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;CEPVR\u0026#39;][thisState] postsynaptic[\u0026#39;IL1VR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1VR\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RICR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RIH\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIH\u0026#39;][thisState] postsynaptic[\u0026#39;RIPR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIPR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;RMER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMER\u0026#39;][thisState] postsynaptic[\u0026#39;SIBDR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;SIBDR\u0026#39;][thisState] postsynaptic[\u0026#39;URBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URBR\u0026#39;][thisState] def PDA(): postsynaptic[\u0026#39;AS11\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS11\u0026#39;][thisState] postsynaptic[\u0026#39;DA9\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA9\u0026#39;][thisState] postsynaptic[\u0026#39;DD6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DD6\u0026#39;][thisState] postsynaptic[\u0026#39;MDL21\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL21\u0026#39;][thisState] postsynaptic[\u0026#39;PVNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVNR\u0026#39;][thisState] postsynaptic[\u0026#39;VD13\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VD13\u0026#39;][thisState] def PDB(): postsynaptic[\u0026#39;AS11\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AS11\u0026#39;][thisState] postsynaptic[\u0026#39;MVL22\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL22\u0026#39;][thisState] postsynaptic[\u0026#39;MVR21\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR21\u0026#39;][thisState] postsynaptic[\u0026#39;RID\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RID\u0026#39;][thisState] postsynaptic[\u0026#39;VD13\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD13\u0026#39;][thisState] def PDEL(): postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 24 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;PDER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PDER\u0026#39;][thisState] postsynaptic[\u0026#39;PDER\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;PDER\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVM\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVM\u0026#39;][thisState] postsynaptic[\u0026#39;PVM\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVM\u0026#39;][thisState] postsynaptic[\u0026#39;PVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVR\u0026#39;][thisState] postsynaptic[\u0026#39;VA9\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA9\u0026#39;][thisState] postsynaptic[\u0026#39;VD11\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD11\u0026#39;][thisState] def PDER(): postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 16 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 35 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;PDEL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;PDEL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVM\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVM\u0026#39;][thisState] postsynaptic[\u0026#39;VA8\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA8\u0026#39;][thisState] postsynaptic[\u0026#39;VD9\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD9\u0026#39;][thisState] def PHAL(): postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVFL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVFL\u0026#39;][thisState] postsynaptic[\u0026#39;AVG\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVG\u0026#39;][thisState] postsynaptic[\u0026#39;AVHL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVHL\u0026#39;][thisState] postsynaptic[\u0026#39;AVHR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVHR\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;PHAR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;PHAR\u0026#39;][thisState] postsynaptic[\u0026#39;PHAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PHAR\u0026#39;][thisState] postsynaptic[\u0026#39;PHBL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;PHBL\u0026#39;][thisState] postsynaptic[\u0026#39;PHBR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;PHBR\u0026#39;][thisState] postsynaptic[\u0026#39;PVQL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVQL\u0026#39;][thisState] def PHAR(): postsynaptic[\u0026#39;AVG\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVG\u0026#39;][thisState] postsynaptic[\u0026#39;AVHR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVHR\u0026#39;][thisState] postsynaptic[\u0026#39;DA8\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA8\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;PHAL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;PHAL\u0026#39;][thisState] postsynaptic[\u0026#39;PHAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PHAL\u0026#39;][thisState] postsynaptic[\u0026#39;PHBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PHBL\u0026#39;][thisState] postsynaptic[\u0026#39;PHBR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;PHBR\u0026#39;][thisState] postsynaptic[\u0026#39;PVPL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;PVPL\u0026#39;][thisState] postsynaptic[\u0026#39;PVQL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVQL\u0026#39;][thisState] def PHBL(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;PHBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PHBR\u0026#39;][thisState] postsynaptic[\u0026#39;PHBR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;PHBR\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 13 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;VA12\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA12\u0026#39;][thisState] def PHBR(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVFL\u0026#39;][thisState] postsynaptic[\u0026#39;AVHL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVHL\u0026#39;][thisState] postsynaptic[\u0026#39;DA8\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA8\u0026#39;][thisState] postsynaptic[\u0026#39;PHBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PHBL\u0026#39;][thisState] postsynaptic[\u0026#39;PHBL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;PHBL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;VA12\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA12\u0026#39;][thisState] def PHCL(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;DA9\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;DA9\u0026#39;][thisState] postsynaptic[\u0026#39;DA9\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA9\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;LUAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;LUAL\u0026#39;][thisState] postsynaptic[\u0026#39;PHCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PHCR\u0026#39;][thisState] postsynaptic[\u0026#39;PLML\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PLML\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;VA12\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VA12\u0026#39;][thisState] def PHCR(): postsynaptic[\u0026#39;AVHR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVHR\u0026#39;][thisState] postsynaptic[\u0026#39;DA9\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DA9\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;LUAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;LUAR\u0026#39;][thisState] postsynaptic[\u0026#39;PHCL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PHCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;VA12\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA12\u0026#39;][thisState] def PLML(): postsynaptic[\u0026#39;HSNL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNL\u0026#39;][thisState] postsynaptic[\u0026#39;LUAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;LUAL\u0026#39;][thisState] postsynaptic[\u0026#39;PHCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PHCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] def PLMR(): postsynaptic[\u0026#39;AS6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS6\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;HSNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNR\u0026#39;][thisState] postsynaptic[\u0026#39;LUAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;LUAR\u0026#39;][thisState] postsynaptic[\u0026#39;PDEL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PDEL\u0026#39;][thisState] postsynaptic[\u0026#39;PDER\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;PDER\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVR\u0026#39;][thisState] def PLNL(): postsynaptic[\u0026#39;SAADL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;SAADL\u0026#39;][thisState] postsynaptic[\u0026#39;SMBVL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;SMBVL\u0026#39;][thisState] def PLNR(): postsynaptic[\u0026#39;SAADR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;SAADR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBVR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;SMBVR\u0026#39;][thisState] def PQR(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 11 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVG\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVG\u0026#39;][thisState] postsynaptic[\u0026#39;LUAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;LUAR\u0026#39;][thisState] postsynaptic[\u0026#39;PVNL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVNL\u0026#39;][thisState] postsynaptic[\u0026#39;PVPL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;PVPL\u0026#39;][thisState] def PVCL(): postsynaptic[\u0026#39;AS1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS1\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 12 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVJR\u0026#39;][thisState] postsynaptic[\u0026#39;DA2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA2\u0026#39;][thisState] postsynaptic[\u0026#39;DA5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA5\u0026#39;][thisState] postsynaptic[\u0026#39;DA6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA6\u0026#39;][thisState] postsynaptic[\u0026#39;DB2\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DB2\u0026#39;][thisState] postsynaptic[\u0026#39;DB3\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;DB3\u0026#39;][thisState] postsynaptic[\u0026#39;DB4\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DB4\u0026#39;][thisState] postsynaptic[\u0026#39;DB5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DB5\u0026#39;][thisState] postsynaptic[\u0026#39;DB6\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DB6\u0026#39;][thisState] postsynaptic[\u0026#39;DB7\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DB7\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;PLML\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PLML\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;RID\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RID\u0026#39;][thisState] postsynaptic[\u0026#39;RIS\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIS\u0026#39;][thisState] postsynaptic[\u0026#39;SIBVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SIBVL\u0026#39;][thisState] postsynaptic[\u0026#39;VB10\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VB10\u0026#39;][thisState] postsynaptic[\u0026#39;VB11\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB11\u0026#39;][thisState] postsynaptic[\u0026#39;VB3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB3\u0026#39;][thisState] postsynaptic[\u0026#39;VB4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB4\u0026#39;][thisState] postsynaptic[\u0026#39;VB5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB5\u0026#39;][thisState] postsynaptic[\u0026#39;VB6\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VB6\u0026#39;][thisState] postsynaptic[\u0026#39;VB8\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB8\u0026#39;][thisState] postsynaptic[\u0026#39;VB9\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VB9\u0026#39;][thisState] def PVCR(): postsynaptic[\u0026#39;AQR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AQR\u0026#39;][thisState] postsynaptic[\u0026#39;AS2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS2\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 12 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;AVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVL\u0026#39;][thisState] postsynaptic[\u0026#39;DA9\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA9\u0026#39;][thisState] postsynaptic[\u0026#39;DB2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB2\u0026#39;][thisState] postsynaptic[\u0026#39;DB3\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DB3\u0026#39;][thisState] postsynaptic[\u0026#39;DB4\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;DB4\u0026#39;][thisState] postsynaptic[\u0026#39;DB5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB5\u0026#39;][thisState] postsynaptic[\u0026#39;DB6\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DB6\u0026#39;][thisState] postsynaptic[\u0026#39;DB7\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB7\u0026#39;][thisState] postsynaptic[\u0026#39;FLPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;FLPL\u0026#39;][thisState] postsynaptic[\u0026#39;LUAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;LUAR\u0026#39;][thisState] postsynaptic[\u0026#39;PDEL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PDEL\u0026#39;][thisState] postsynaptic[\u0026#39;PHCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PHCR\u0026#39;][thisState] postsynaptic[\u0026#39;PLMR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PLMR\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVDL\u0026#39;][thisState] postsynaptic[\u0026#39;PVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVR\u0026#39;][thisState] postsynaptic[\u0026#39;PVWL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVWL\u0026#39;][thisState] postsynaptic[\u0026#39;PVWR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVWR\u0026#39;][thisState] postsynaptic[\u0026#39;RID\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RID\u0026#39;][thisState] postsynaptic[\u0026#39;SIBVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SIBVR\u0026#39;][thisState] postsynaptic[\u0026#39;VA8\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA8\u0026#39;][thisState] postsynaptic[\u0026#39;VA9\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA9\u0026#39;][thisState] postsynaptic[\u0026#39;VB10\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB10\u0026#39;][thisState] postsynaptic[\u0026#39;VB4\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VB4\u0026#39;][thisState] postsynaptic[\u0026#39;VB6\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VB6\u0026#39;][thisState] postsynaptic[\u0026#39;VB7\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VB7\u0026#39;][thisState] postsynaptic[\u0026#39;VB8\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB8\u0026#39;][thisState] def PVDL(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;DD5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DD5\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;VD10\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;VD10\u0026#39;][thisState] def PVDR(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 13 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVDL\u0026#39;][thisState] postsynaptic[\u0026#39;VA9\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA9\u0026#39;][thisState] def PVM(): postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 11 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVL\u0026#39;][thisState] postsynaptic[\u0026#39;AVM\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVM\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;PDEL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;PDEL\u0026#39;][thisState] postsynaptic[\u0026#39;PDEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PDEL\u0026#39;][thisState] postsynaptic[\u0026#39;PDER\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;PDER\u0026#39;][thisState] postsynaptic[\u0026#39;PDER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PDER\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVR\u0026#39;][thisState] def PVNL(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVFR\u0026#39;][thisState] postsynaptic[\u0026#39;AVG\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVG\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVJR\u0026#39;][thisState] postsynaptic[\u0026#39;AVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVL\u0026#39;][thisState] postsynaptic[\u0026#39;BDUL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;BDUL\u0026#39;][thisState] postsynaptic[\u0026#39;BDUR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;BDUR\u0026#39;][thisState] postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;MVL09\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MVL09\u0026#39;][thisState] postsynaptic[\u0026#39;PQR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PQR\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVNR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;PVNR\u0026#39;][thisState] postsynaptic[\u0026#39;PVQR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVQR\u0026#39;][thisState] postsynaptic[\u0026#39;PVT\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVT\u0026#39;][thisState] postsynaptic[\u0026#39;PVWL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVWL\u0026#39;][thisState] postsynaptic[\u0026#39;RIFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIFL\u0026#39;][thisState] def PVNR(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJR\u0026#39;][thisState] postsynaptic[\u0026#39;AVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVL\u0026#39;][thisState] postsynaptic[\u0026#39;BDUL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;BDUL\u0026#39;][thisState] postsynaptic[\u0026#39;BDUR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;BDUR\u0026#39;][thisState] postsynaptic[\u0026#39;DD3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DD3\u0026#39;][thisState] postsynaptic[\u0026#39;HSNR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;HSNR\u0026#39;][thisState] postsynaptic[\u0026#39;MVL12\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL12\u0026#39;][thisState] postsynaptic[\u0026#39;MVL13\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MVL13\u0026#39;][thisState] postsynaptic[\u0026#39;PQR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PQR\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVNL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVNL\u0026#39;][thisState] postsynaptic[\u0026#39;PVT\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVT\u0026#39;][thisState] postsynaptic[\u0026#39;PVWL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVWL\u0026#39;][thisState] postsynaptic[\u0026#39;VC2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VC2\u0026#39;][thisState] postsynaptic[\u0026#39;VC3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VC3\u0026#39;][thisState] postsynaptic[\u0026#39;VD12\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD12\u0026#39;][thisState] postsynaptic[\u0026#39;VD6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD6\u0026#39;][thisState] postsynaptic[\u0026#39;VD7\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD7\u0026#39;][thisState] def PVPL(): postsynaptic[\u0026#39;ADAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADAL\u0026#39;][thisState] postsynaptic[\u0026#39;AQR\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;AQR\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;AVHR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVHR\u0026#39;][thisState] postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVKR\u0026#39;][thisState] postsynaptic[\u0026#39;DVC\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DVC\u0026#39;][thisState] postsynaptic[\u0026#39;PHAR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;PHAR\u0026#39;][thisState] postsynaptic[\u0026#39;PQR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;PQR\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVPR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVPR\u0026#39;][thisState] postsynaptic[\u0026#39;PVT\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVT\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;VD13\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD13\u0026#39;][thisState] postsynaptic[\u0026#39;VD3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD3\u0026#39;][thisState] def PVPR(): postsynaptic[\u0026#39;ADFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADFR\u0026#39;][thisState] postsynaptic[\u0026#39;AQR\u0026#39;][nextState] = 11 + postsynaptic[\u0026#39;AQR\u0026#39;][thisState] postsynaptic[\u0026#39;ASHR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASHR\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVHL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVHL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVL\u0026#39;][thisState] postsynaptic[\u0026#39;DD2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DD2\u0026#39;][thisState] postsynaptic[\u0026#39;DVC\u0026#39;][nextState] = 14 + postsynaptic[\u0026#39;DVC\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVPL\u0026#39;][thisState] postsynaptic[\u0026#39;PVQR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVQR\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;RMGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGR\u0026#39;][thisState] postsynaptic[\u0026#39;VD4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD4\u0026#39;][thisState] postsynaptic[\u0026#39;VD5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD5\u0026#39;][thisState] def PVQL(): postsynaptic[\u0026#39;ADAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADAL\u0026#39;][thisState] postsynaptic[\u0026#39;AIAL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AIAL\u0026#39;][thisState] postsynaptic[\u0026#39;ASJL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASJL\u0026#39;][thisState] postsynaptic[\u0026#39;ASKL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;ASKL\u0026#39;][thisState] postsynaptic[\u0026#39;ASKL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;ASKL\u0026#39;][thisState] postsynaptic[\u0026#39;HSNL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;HSNL\u0026#39;][thisState] postsynaptic[\u0026#39;PVQR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVQR\u0026#39;][thisState] postsynaptic[\u0026#39;RMGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGL\u0026#39;][thisState] def PVQR(): postsynaptic[\u0026#39;ADAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADAR\u0026#39;][thisState] postsynaptic[\u0026#39;AIAR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AIAR\u0026#39;][thisState] postsynaptic[\u0026#39;ASER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASER\u0026#39;][thisState] postsynaptic[\u0026#39;ASKR\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;ASKR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVFL\u0026#39;][thisState] postsynaptic[\u0026#39;AVFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVFR\u0026#39;][thisState] postsynaptic[\u0026#39;AVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVL\u0026#39;][thisState] postsynaptic[\u0026#39;AWAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AWAR\u0026#39;][thisState] postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;DVC\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVC\u0026#39;][thisState] postsynaptic[\u0026#39;HSNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNR\u0026#39;][thisState] postsynaptic[\u0026#39;PVNL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVNL\u0026#39;][thisState] postsynaptic[\u0026#39;PVQL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVQL\u0026#39;][thisState] postsynaptic[\u0026#39;PVT\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVT\u0026#39;][thisState] postsynaptic[\u0026#39;RIFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIFR\u0026#39;][thisState] postsynaptic[\u0026#39;VD1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD1\u0026#39;][thisState] def PVR(): postsynaptic[\u0026#39;ADAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADAL\u0026#39;][thisState] postsynaptic[\u0026#39;ALML\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ALML\u0026#39;][thisState] postsynaptic[\u0026#39;AS6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS6\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVJR\u0026#39;][thisState] postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;DA9\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA9\u0026#39;][thisState] postsynaptic[\u0026#39;DB2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB2\u0026#39;][thisState] postsynaptic[\u0026#39;DB3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB3\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;IL1DL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1DL\u0026#39;][thisState] postsynaptic[\u0026#39;IL1DR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1DR\u0026#39;][thisState] postsynaptic[\u0026#39;IL1VL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1VL\u0026#39;][thisState] postsynaptic[\u0026#39;IL1VR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1VR\u0026#39;][thisState] postsynaptic[\u0026#39;LUAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;LUAL\u0026#39;][thisState] postsynaptic[\u0026#39;LUAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;LUAR\u0026#39;][thisState] postsynaptic[\u0026#39;PDEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PDEL\u0026#39;][thisState] postsynaptic[\u0026#39;PDER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PDER\u0026#39;][thisState] postsynaptic[\u0026#39;PLMR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PLMR\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;RIPL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIPL\u0026#39;][thisState] postsynaptic[\u0026#39;RIPR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIPR\u0026#39;][thisState] postsynaptic[\u0026#39;SABD\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SABD\u0026#39;][thisState] postsynaptic[\u0026#39;URADL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URADL\u0026#39;][thisState] def PVT(): postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AVKR\u0026#39;][thisState] postsynaptic[\u0026#39;AVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVL\u0026#39;][thisState] postsynaptic[\u0026#39;DVC\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DVC\u0026#39;][thisState] postsynaptic[\u0026#39;PVPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVPL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RIH\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIH\u0026#39;][thisState] postsynaptic[\u0026#39;RMEV\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMEV\u0026#39;][thisState] postsynaptic[\u0026#39;RMFL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMFL\u0026#39;][thisState] postsynaptic[\u0026#39;RMFR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMFR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBDR\u0026#39;][thisState] def PVWL(): postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVT\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVT\u0026#39;][thisState] postsynaptic[\u0026#39;PVWR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVWR\u0026#39;][thisState] postsynaptic[\u0026#39;VA12\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA12\u0026#39;][thisState] def PVWR(): postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVT\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVT\u0026#39;][thisState] postsynaptic[\u0026#39;VA12\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA12\u0026#39;][thisState] def RIAL(): postsynaptic[\u0026#39;CEPVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;CEPVL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIVL\u0026#39;][thisState] postsynaptic[\u0026#39;RIVR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RIVR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 12 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;RMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;RMDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;RMDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVL\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;RMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 11 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;SIADL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SIADL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDL\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;SMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;SMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVR\u0026#39;][nextState] = 11 + postsynaptic[\u0026#39;SMDVR\u0026#39;][thisState] def RIAR(): postsynaptic[\u0026#39;CEPVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;CEPVR\u0026#39;][thisState] postsynaptic[\u0026#39;IL1R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1R\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIVL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDR\u0026#39;][nextState] = 11 + postsynaptic[\u0026#39;RMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDR\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;RMDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVL\u0026#39;][nextState] = 12 + postsynaptic[\u0026#39;RMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;SAADR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SAADR\u0026#39;][thisState] postsynaptic[\u0026#39;SIADL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIADL\u0026#39;][thisState] postsynaptic[\u0026#39;SIADR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIADR\u0026#39;][thisState] postsynaptic[\u0026#39;SIAVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIAVL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;SMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVL\u0026#39;][nextState] = 13 + postsynaptic[\u0026#39;SMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;SMDVR\u0026#39;][thisState] def RIBL(): postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AUAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AUAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;BAGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;BAGR\u0026#39;][thisState] postsynaptic[\u0026#39;OLQDL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;OLQDL\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQVL\u0026#39;][thisState] postsynaptic[\u0026#39;PVT\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVT\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;SIADL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIADL\u0026#39;][thisState] postsynaptic[\u0026#39;SIAVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIAVL\u0026#39;][thisState] postsynaptic[\u0026#39;SIBDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBDL\u0026#39;][thisState] postsynaptic[\u0026#39;SIBVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBVL\u0026#39;][thisState] postsynaptic[\u0026#39;SIBVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBVR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;SMDVR\u0026#39;][thisState] def RIBR(): postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AIZR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIZR\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;BAGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;BAGL\u0026#39;][thisState] postsynaptic[\u0026#39;OLQDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;OLQDR\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQVR\u0026#39;][thisState] postsynaptic[\u0026#39;PVT\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVT\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RIH\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIH\u0026#39;][thisState] postsynaptic[\u0026#39;SIADR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIADR\u0026#39;][thisState] postsynaptic[\u0026#39;SIAVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIAVR\u0026#39;][thisState] postsynaptic[\u0026#39;SIBDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBDR\u0026#39;][thisState] postsynaptic[\u0026#39;SIBVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBVR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SMDVL\u0026#39;][thisState] def RICL(): postsynaptic[\u0026#39;ADAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADAR\u0026#39;][thisState] postsynaptic[\u0026#39;ASHL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ASHL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVKR\u0026#39;][thisState] postsynaptic[\u0026#39;AWBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;RIVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIVR\u0026#39;][thisState] postsynaptic[\u0026#39;RMFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMFR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SMBDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDVR\u0026#39;][thisState] def RICR(): postsynaptic[\u0026#39;ADAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADAR\u0026#39;][thisState] postsynaptic[\u0026#39;ASHR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ASHR\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;SMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDVR\u0026#39;][thisState] def RID(): postsynaptic[\u0026#39;ALA\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ALA\u0026#39;][thisState] postsynaptic[\u0026#39;AS2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS2\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;DA6\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DA6\u0026#39;][thisState] postsynaptic[\u0026#39;DA9\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA9\u0026#39;][thisState] postsynaptic[\u0026#39;DB1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB1\u0026#39;][thisState] postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;DD2\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;DD2\u0026#39;][thisState] postsynaptic[\u0026#39;DD3\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DD3\u0026#39;][thisState] postsynaptic[\u0026#39;MDL14\u0026#39;][nextState] = -2 + postsynaptic[\u0026#39;MDL14\u0026#39;][thisState] postsynaptic[\u0026#39;MDL21\u0026#39;][nextState] = -3 + postsynaptic[\u0026#39;MDL21\u0026#39;][thisState] postsynaptic[\u0026#39;PDB\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PDB\u0026#39;][thisState] postsynaptic[\u0026#39;VD13\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD13\u0026#39;][thisState] postsynaptic[\u0026#39;VD5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD5\u0026#39;][thisState] def RIFL(): postsynaptic[\u0026#39;ALML\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ALML\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVG\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVG\u0026#39;][thisState] postsynaptic[\u0026#39;AVHR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVHR\u0026#39;][thisState] postsynaptic[\u0026#39;AVJR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVJR\u0026#39;][thisState] postsynaptic[\u0026#39;PVPL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;PVPL\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] postsynaptic[\u0026#39;VD1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD1\u0026#39;][thisState] def RIFR(): postsynaptic[\u0026#39;ASHR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ASHR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 17 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVFL\u0026#39;][thisState] postsynaptic[\u0026#39;AVG\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVG\u0026#39;][thisState] postsynaptic[\u0026#39;AVHL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVHL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVJR\u0026#39;][thisState] postsynaptic[\u0026#39;HSNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNR\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVPR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;PVPR\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;RIPR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIPR\u0026#39;][thisState] def RIGL(): postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AIZR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIZR\u0026#39;][thisState] postsynaptic[\u0026#39;ALNL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ALNL\u0026#39;][thisState] postsynaptic[\u0026#39;AQR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AQR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVKR\u0026#39;][thisState] postsynaptic[\u0026#39;BAGR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;BAGR\u0026#39;][thisState] postsynaptic[\u0026#39;DVC\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVC\u0026#39;][thisState] postsynaptic[\u0026#39;OLLL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLLL\u0026#39;][thisState] postsynaptic[\u0026#39;OLQDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQDL\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQVL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RIR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIR\u0026#39;][thisState] postsynaptic[\u0026#39;RMEL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMEL\u0026#39;][thisState] postsynaptic[\u0026#39;RMHR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMHR\u0026#39;][thisState] postsynaptic[\u0026#39;URYDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URYDL\u0026#39;][thisState] postsynaptic[\u0026#39;URYVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URYVL\u0026#39;][thisState] postsynaptic[\u0026#39;VB2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB2\u0026#39;][thisState] postsynaptic[\u0026#39;VD1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD1\u0026#39;][thisState] def RIGR(): postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;ALNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ALNR\u0026#39;][thisState] postsynaptic[\u0026#39;AQR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AQR\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVKR\u0026#39;][thisState] postsynaptic[\u0026#39;BAGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;BAGL\u0026#39;][thisState] postsynaptic[\u0026#39;OLLR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLLR\u0026#39;][thisState] postsynaptic[\u0026#39;OLQDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQDR\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQVR\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RIR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIR\u0026#39;][thisState] postsynaptic[\u0026#39;RMHL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMHL\u0026#39;][thisState] postsynaptic[\u0026#39;URYDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URYDR\u0026#39;][thisState] postsynaptic[\u0026#39;URYVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URYVR\u0026#39;][thisState] def RIH(): postsynaptic[\u0026#39;ADFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADFR\u0026#39;][thisState] postsynaptic[\u0026#39;AIZL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AIZL\u0026#39;][thisState] postsynaptic[\u0026#39;AIZR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AIZR\u0026#39;][thisState] postsynaptic[\u0026#39;AUAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AUAR\u0026#39;][thisState] postsynaptic[\u0026#39;BAGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;BAGR\u0026#39;][thisState] postsynaptic[\u0026#39;CEPDL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;CEPDL\u0026#39;][thisState] postsynaptic[\u0026#39;CEPDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;CEPDR\u0026#39;][thisState] postsynaptic[\u0026#39;CEPVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;CEPVL\u0026#39;][thisState] postsynaptic[\u0026#39;CEPVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;CEPVR\u0026#39;][thisState] postsynaptic[\u0026#39;FLPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;FLPL\u0026#39;][thisState] postsynaptic[\u0026#39;IL2L\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;IL2L\u0026#39;][thisState] postsynaptic[\u0026#39;IL2R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL2R\u0026#39;][thisState] postsynaptic[\u0026#39;OLQDL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;OLQDL\u0026#39;][thisState] postsynaptic[\u0026#39;OLQDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;OLQDR\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQVL\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;OLQVR\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIPL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RIPL\u0026#39;][thisState] postsynaptic[\u0026#39;RIPR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;RIPR\u0026#39;][thisState] postsynaptic[\u0026#39;RMER\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMER\u0026#39;][thisState] postsynaptic[\u0026#39;RMEV\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMEV\u0026#39;][thisState] postsynaptic[\u0026#39;URYVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URYVR\u0026#39;][thisState] def RIML(): postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AIYL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIYL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;MDR05\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR05\u0026#39;][thisState] postsynaptic[\u0026#39;MVR05\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MVR05\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIS\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIS\u0026#39;][thisState] postsynaptic[\u0026#39;RMDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMFR\u0026#39;][thisState] postsynaptic[\u0026#39;SAADR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SAADR\u0026#39;][thisState] postsynaptic[\u0026#39;SAAVL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SAAVL\u0026#39;][thisState] postsynaptic[\u0026#39;SAAVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SAAVR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDVL\u0026#39;][thisState] def RIMR(): postsynaptic[\u0026#39;ADAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADAR\u0026#39;][thisState] postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AIYR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIYR\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;MDL05\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL05\u0026#39;][thisState] postsynaptic[\u0026#39;MDL07\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL07\u0026#39;][thisState] postsynaptic[\u0026#39;MVL05\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL05\u0026#39;][thisState] postsynaptic[\u0026#39;MVL07\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL07\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIS\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIS\u0026#39;][thisState] postsynaptic[\u0026#39;RMDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMFL\u0026#39;][thisState] postsynaptic[\u0026#39;RMFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMFR\u0026#39;][thisState] postsynaptic[\u0026#39;SAAVL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SAAVL\u0026#39;][thisState] postsynaptic[\u0026#39;SAAVR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SAAVR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] def RIPL(): postsynaptic[\u0026#39;OLQDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQDL\u0026#39;][thisState] postsynaptic[\u0026#39;OLQDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMED\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMED\u0026#39;][thisState] def RIPR(): postsynaptic[\u0026#39;OLQDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQDL\u0026#39;][thisState] postsynaptic[\u0026#39;OLQDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMED\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMED\u0026#39;][thisState] def RIR(): postsynaptic[\u0026#39;AFDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AFDR\u0026#39;][thisState] postsynaptic[\u0026#39;AIZL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AIZL\u0026#39;][thisState] postsynaptic[\u0026#39;AIZR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AIZR\u0026#39;][thisState] postsynaptic[\u0026#39;AUAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AUAL\u0026#39;][thisState] postsynaptic[\u0026#39;AWBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWBR\u0026#39;][thisState] postsynaptic[\u0026#39;BAGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;BAGL\u0026#39;][thisState] postsynaptic[\u0026#39;BAGR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;BAGR\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;HSNL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNL\u0026#39;][thisState] postsynaptic[\u0026#39;PVPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVPL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;URXL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;URXL\u0026#39;][thisState] postsynaptic[\u0026#39;URXR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URXR\u0026#39;][thisState] def RIS(): postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVKR\u0026#39;][thisState] postsynaptic[\u0026#39;AVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVL\u0026#39;][thisState] postsynaptic[\u0026#39;CEPDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;CEPDR\u0026#39;][thisState] postsynaptic[\u0026#39;CEPVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;CEPVL\u0026#39;][thisState] postsynaptic[\u0026#39;CEPVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;CEPVR\u0026#39;][thisState] postsynaptic[\u0026#39;DB1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB1\u0026#39;][thisState] postsynaptic[\u0026#39;OLLR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLLR\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;URYVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URYVR\u0026#39;][thisState] def RIVL(): postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;MVR05\u0026#39;][nextState] = -2 + postsynaptic[\u0026#39;MVR05\u0026#39;][thisState] postsynaptic[\u0026#39;MVR06\u0026#39;][nextState] = -2 + postsynaptic[\u0026#39;MVR06\u0026#39;][thisState] postsynaptic[\u0026#39;MVR08\u0026#39;][nextState] = -3 + postsynaptic[\u0026#39;MVR08\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIVR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMDL\u0026#39;][thisState] postsynaptic[\u0026#39;SAADR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SAADR\u0026#39;][thisState] postsynaptic[\u0026#39;SDQR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SDQR\u0026#39;][thisState] postsynaptic[\u0026#39;SIAVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SIAVR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDVL\u0026#39;][thisState] def RIVR(): postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;MVL05\u0026#39;][nextState] = -2 + postsynaptic[\u0026#39;MVL05\u0026#39;][thisState] postsynaptic[\u0026#39;MVL06\u0026#39;][nextState] = -2 + postsynaptic[\u0026#39;MVL06\u0026#39;][thisState] postsynaptic[\u0026#39;MVL08\u0026#39;][nextState] = -2 + postsynaptic[\u0026#39;MVL08\u0026#39;][thisState] postsynaptic[\u0026#39;MVR04\u0026#39;][nextState] = -2 + postsynaptic[\u0026#39;MVR04\u0026#39;][thisState] postsynaptic[\u0026#39;MVR06\u0026#39;][nextState] = -2 + postsynaptic[\u0026#39;MVR06\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIVL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;RMEV\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMEV\u0026#39;][thisState] postsynaptic[\u0026#39;SAADL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SAADL\u0026#39;][thisState] postsynaptic[\u0026#39;SDQR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SDQR\u0026#39;][thisState] postsynaptic[\u0026#39;SIAVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SIAVL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;SMDVR\u0026#39;][thisState] def RMDDL(): postsynaptic[\u0026#39;MDR01\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR01\u0026#39;][thisState] postsynaptic[\u0026#39;MDR02\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR02\u0026#39;][thisState] postsynaptic[\u0026#39;MDR03\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR03\u0026#39;][thisState] postsynaptic[\u0026#39;MDR04\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR04\u0026#39;][thisState] postsynaptic[\u0026#39;MDR08\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR08\u0026#39;][thisState] postsynaptic[\u0026#39;MVR01\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR01\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQVL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDDL\u0026#39;][thisState] def RMDDR(): postsynaptic[\u0026#39;MDL01\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL01\u0026#39;][thisState] postsynaptic[\u0026#39;MDL02\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL02\u0026#39;][thisState] postsynaptic[\u0026#39;MDL03\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL03\u0026#39;][thisState] postsynaptic[\u0026#39;MDL04\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL04\u0026#39;][thisState] postsynaptic[\u0026#39;MDR04\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR04\u0026#39;][thisState] postsynaptic[\u0026#39;MVR01\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR01\u0026#39;][thisState] postsynaptic[\u0026#39;MVR02\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR02\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQVR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVL\u0026#39;][nextState] = 12 + postsynaptic[\u0026#39;RMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;SAADR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SAADR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;URYDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URYDL\u0026#39;][thisState] def RMDL(): postsynaptic[\u0026#39;MDL03\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL03\u0026#39;][thisState] postsynaptic[\u0026#39;MDL05\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL05\u0026#39;][thisState] postsynaptic[\u0026#39;MDR01\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR01\u0026#39;][thisState] postsynaptic[\u0026#39;MDR03\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR03\u0026#39;][thisState] postsynaptic[\u0026#39;MVL01\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL01\u0026#39;][thisState] postsynaptic[\u0026#39;MVR01\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR01\u0026#39;][thisState] postsynaptic[\u0026#39;MVR03\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR03\u0026#39;][thisState] postsynaptic[\u0026#39;MVR05\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MVR05\u0026#39;][thisState] postsynaptic[\u0026#39;MVR07\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR07\u0026#39;][thisState] postsynaptic[\u0026#39;OLLR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;OLLR\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;RMER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMER\u0026#39;][thisState] postsynaptic[\u0026#39;RMFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMFL\u0026#39;][thisState] def RMDR(): postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;MDL03\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL03\u0026#39;][thisState] postsynaptic[\u0026#39;MDL05\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL05\u0026#39;][thisState] postsynaptic[\u0026#39;MDR05\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR05\u0026#39;][thisState] postsynaptic[\u0026#39;MVL03\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL03\u0026#39;][thisState] postsynaptic[\u0026#39;MVL05\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL05\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;RIS\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIS\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] def RMDVL(): postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;MDR01\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR01\u0026#39;][thisState] postsynaptic[\u0026#39;MVL04\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL04\u0026#39;][thisState] postsynaptic[\u0026#39;MVR01\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR01\u0026#39;][thisState] postsynaptic[\u0026#39;MVR02\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR02\u0026#39;][thisState] postsynaptic[\u0026#39;MVR03\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR03\u0026#39;][thisState] postsynaptic[\u0026#39;MVR04\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR04\u0026#39;][thisState] postsynaptic[\u0026#39;MVR05\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR05\u0026#39;][thisState] postsynaptic[\u0026#39;MVR06\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR06\u0026#39;][thisState] postsynaptic[\u0026#39;MVR08\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR08\u0026#39;][thisState] postsynaptic[\u0026#39;OLQDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;RMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;SAAVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SAAVL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDVL\u0026#39;][thisState] def RMDVR(): postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;MDL01\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL01\u0026#39;][thisState] postsynaptic[\u0026#39;MVL01\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL01\u0026#39;][thisState] postsynaptic[\u0026#39;MVL02\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL02\u0026#39;][thisState] postsynaptic[\u0026#39;MVL03\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL03\u0026#39;][thisState] postsynaptic[\u0026#39;MVL04\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL04\u0026#39;][thisState] postsynaptic[\u0026#39;MVL05\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL05\u0026#39;][thisState] postsynaptic[\u0026#39;MVL06\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL06\u0026#39;][thisState] postsynaptic[\u0026#39;MVL08\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL08\u0026#39;][thisState] postsynaptic[\u0026#39;MVR04\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR04\u0026#39;][thisState] postsynaptic[\u0026#39;MVR06\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR06\u0026#39;][thisState] postsynaptic[\u0026#39;MVR08\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR08\u0026#39;][thisState] postsynaptic[\u0026#39;OLQDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;SAAVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SAAVR\u0026#39;][thisState] postsynaptic[\u0026#39;SIBDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBDR\u0026#39;][thisState] postsynaptic[\u0026#39;SIBVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBVR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDVR\u0026#39;][thisState] def RMED(): postsynaptic[\u0026#39;IL1VL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1VL\u0026#39;][thisState] postsynaptic[\u0026#39;MVL02\u0026#39;][nextState] = -4 + postsynaptic[\u0026#39;MVL02\u0026#39;][thisState] postsynaptic[\u0026#39;MVL04\u0026#39;][nextState] = -4 + postsynaptic[\u0026#39;MVL04\u0026#39;][thisState] postsynaptic[\u0026#39;MVL06\u0026#39;][nextState] = -4 + postsynaptic[\u0026#39;MVL06\u0026#39;][thisState] postsynaptic[\u0026#39;MVR02\u0026#39;][nextState] = -4 + postsynaptic[\u0026#39;MVR02\u0026#39;][thisState] postsynaptic[\u0026#39;MVR04\u0026#39;][nextState] = -4 + postsynaptic[\u0026#39;MVR04\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIPL\u0026#39;][thisState] postsynaptic[\u0026#39;RIPR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIPR\u0026#39;][thisState] postsynaptic[\u0026#39;RMEV\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMEV\u0026#39;][thisState] def RMEL(): postsynaptic[\u0026#39;MDR01\u0026#39;][nextState] = -5 + postsynaptic[\u0026#39;MDR01\u0026#39;][thisState] postsynaptic[\u0026#39;MDR03\u0026#39;][nextState] = -5 + postsynaptic[\u0026#39;MDR03\u0026#39;][thisState] postsynaptic[\u0026#39;MVR01\u0026#39;][nextState] = -5 + postsynaptic[\u0026#39;MVR01\u0026#39;][thisState] postsynaptic[\u0026#39;MVR03\u0026#39;][nextState] = -5 + postsynaptic[\u0026#39;MVR03\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RMEV\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMEV\u0026#39;][thisState] def RMER(): postsynaptic[\u0026#39;MDL01\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDL01\u0026#39;][thisState] postsynaptic[\u0026#39;MDL03\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MDL03\u0026#39;][thisState] postsynaptic[\u0026#39;MVL01\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MVL01\u0026#39;][thisState] postsynaptic[\u0026#39;RMEV\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMEV\u0026#39;][thisState] def RMEV(): postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;IL1DL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1DL\u0026#39;][thisState] postsynaptic[\u0026#39;IL1DR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1DR\u0026#39;][thisState] postsynaptic[\u0026#39;MDL02\u0026#39;][nextState] = -3 + postsynaptic[\u0026#39;MDL02\u0026#39;][thisState] postsynaptic[\u0026#39;MDL04\u0026#39;][nextState] = -3 + postsynaptic[\u0026#39;MDL04\u0026#39;][thisState] postsynaptic[\u0026#39;MDL06\u0026#39;][nextState] = -3 + postsynaptic[\u0026#39;MDL06\u0026#39;][thisState] postsynaptic[\u0026#39;MDR02\u0026#39;][nextState] = -3 + postsynaptic[\u0026#39;MDR02\u0026#39;][thisState] postsynaptic[\u0026#39;MDR04\u0026#39;][nextState] = -3 + postsynaptic[\u0026#39;MDR04\u0026#39;][thisState] postsynaptic[\u0026#39;RMED\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMED\u0026#39;][thisState] postsynaptic[\u0026#39;RMEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMEL\u0026#39;][thisState] postsynaptic[\u0026#39;RMER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMER\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] def RMFL(): postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVKR\u0026#39;][thisState] postsynaptic[\u0026#39;MDR03\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR03\u0026#39;][thisState] postsynaptic[\u0026#39;MVR01\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR01\u0026#39;][thisState] postsynaptic[\u0026#39;MVR03\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR03\u0026#39;][thisState] postsynaptic[\u0026#39;PVT\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVT\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGR\u0026#39;][thisState] postsynaptic[\u0026#39;URBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URBR\u0026#39;][thisState] def RMFR(): postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVKR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMDL\u0026#39;][thisState] def RMGL(): postsynaptic[\u0026#39;ADAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADAL\u0026#39;][thisState] postsynaptic[\u0026#39;ADLL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADLL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;ALML\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ALML\u0026#39;][thisState] postsynaptic[\u0026#39;ALNL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ALNL\u0026#39;][thisState] postsynaptic[\u0026#39;ASHL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ASHL\u0026#39;][thisState] postsynaptic[\u0026#39;ASKL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ASKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AWBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWBL\u0026#39;][thisState] postsynaptic[\u0026#39;CEPDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;CEPDL\u0026#39;][thisState] postsynaptic[\u0026#39;IL2L\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL2L\u0026#39;][thisState] postsynaptic[\u0026#39;MDL05\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL05\u0026#39;][thisState] postsynaptic[\u0026#39;MVL05\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MVL05\u0026#39;][thisState] postsynaptic[\u0026#39;RID\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RID\u0026#39;][thisState] postsynaptic[\u0026#39;RMDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;RMHL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMHL\u0026#39;][thisState] postsynaptic[\u0026#39;RMHR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMHR\u0026#39;][thisState] postsynaptic[\u0026#39;SIAVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIAVL\u0026#39;][thisState] postsynaptic[\u0026#39;SIBVL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SIBVL\u0026#39;][thisState] postsynaptic[\u0026#39;SIBVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBVR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBVL\u0026#39;][thisState] postsynaptic[\u0026#39;URXL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;URXL\u0026#39;][thisState] def RMGR(): postsynaptic[\u0026#39;ADAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADAR\u0026#39;][thisState] postsynaptic[\u0026#39;AIMR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIMR\u0026#39;][thisState] postsynaptic[\u0026#39;ALNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ALNR\u0026#39;][thisState] postsynaptic[\u0026#39;ASHR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ASHR\u0026#39;][thisState] postsynaptic[\u0026#39;ASKR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASKR\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;AVJL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJL\u0026#39;][thisState] postsynaptic[\u0026#39;AWBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AWBR\u0026#39;][thisState] postsynaptic[\u0026#39;IL2R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL2R\u0026#39;][thisState] postsynaptic[\u0026#39;MDR05\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR05\u0026#39;][thisState] postsynaptic[\u0026#39;MVR05\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR05\u0026#39;][thisState] postsynaptic[\u0026#39;MVR07\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR07\u0026#39;][thisState] postsynaptic[\u0026#39;RIR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;RMHR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMHR\u0026#39;][thisState] postsynaptic[\u0026#39;URXR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;URXR\u0026#39;][thisState] def RMHL(): postsynaptic[\u0026#39;MDR01\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR01\u0026#39;][thisState] postsynaptic[\u0026#39;MDR03\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR03\u0026#39;][thisState] postsynaptic[\u0026#39;MVR01\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MVR01\u0026#39;][thisState] postsynaptic[\u0026#39;RMDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMGL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMGL\u0026#39;][thisState] postsynaptic[\u0026#39;SIBVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBVR\u0026#39;][thisState] def RMHR(): postsynaptic[\u0026#39;MDL01\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL01\u0026#39;][thisState] postsynaptic[\u0026#39;MDL03\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL03\u0026#39;][thisState] postsynaptic[\u0026#39;MDL05\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL05\u0026#39;][thisState] postsynaptic[\u0026#39;MVL01\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MVL01\u0026#39;][thisState] postsynaptic[\u0026#39;RMER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMER\u0026#39;][thisState] postsynaptic[\u0026#39;RMGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGL\u0026#39;][thisState] postsynaptic[\u0026#39;RMGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGR\u0026#39;][thisState] def SAADL(): postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;RMGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBDL\u0026#39;][thisState] def SAADR(): postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;OLLL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLLL\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMFL\u0026#39;][thisState] postsynaptic[\u0026#39;RMGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGL\u0026#39;][thisState] def SAAVL(): postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;ALNL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ALNL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 16 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;OLLR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLLR\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 12 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;RMFR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMFR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBVR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SMBVR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] def SAAVR(): postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 13 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] postsynaptic[\u0026#39;RIMR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIMR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SMBVL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;SMDDL\u0026#39;][thisState] def SABD(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;VA2\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;VA2\u0026#39;][thisState] postsynaptic[\u0026#39;VA3\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA3\u0026#39;][thisState] postsynaptic[\u0026#39;VA4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA4\u0026#39;][thisState] def SABVL(): postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;DA1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DA1\u0026#39;][thisState] postsynaptic[\u0026#39;DA2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA2\u0026#39;][thisState] def SABVR(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;DA1\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DA1\u0026#39;][thisState] def SDQL(): postsynaptic[\u0026#39;ALML\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;ALML\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;FLPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;FLPL\u0026#39;][thisState] postsynaptic[\u0026#39;RICR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICR\u0026#39;][thisState] postsynaptic[\u0026#39;RIS\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIS\u0026#39;][thisState] postsynaptic[\u0026#39;RMFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMFL\u0026#39;][thisState] postsynaptic[\u0026#39;SDQR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SDQR\u0026#39;][thisState] def SDQR(): postsynaptic[\u0026#39;ADLL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADLL\u0026#39;][thisState] postsynaptic[\u0026#39;AIBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AIBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;RICR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICR\u0026#39;][thisState] postsynaptic[\u0026#39;RIVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIVL\u0026#39;][thisState] postsynaptic[\u0026#39;RIVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIVR\u0026#39;][thisState] postsynaptic[\u0026#39;RMHL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMHL\u0026#39;][thisState] postsynaptic[\u0026#39;RMHR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMHR\u0026#39;][thisState] postsynaptic[\u0026#39;SDQL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SDQL\u0026#39;][thisState] postsynaptic[\u0026#39;SIBVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBVL\u0026#39;][thisState] def SIADL(): postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] def SIADR(): postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] def SIAVL(): postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] def SIAVR(): postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] def SIBDL(): postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;SIBVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBVL\u0026#39;][thisState] def SIBDR(): postsynaptic[\u0026#39;AIML\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIML\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;SIBVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBVR\u0026#39;][thisState] def SIBVL(): postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;SDQR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SDQR\u0026#39;][thisState] postsynaptic[\u0026#39;SIBDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBDL\u0026#39;][thisState] def SIBVR(): postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RMHL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMHL\u0026#39;][thisState] postsynaptic[\u0026#39;SIBDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBDR\u0026#39;][thisState] def SMBDL(): postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVKR\u0026#39;][thisState] postsynaptic[\u0026#39;MDR01\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR01\u0026#39;][thisState] postsynaptic[\u0026#39;MDR02\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR02\u0026#39;][thisState] postsynaptic[\u0026#39;MDR03\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR03\u0026#39;][thisState] postsynaptic[\u0026#39;MDR04\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR04\u0026#39;][thisState] postsynaptic[\u0026#39;MDR06\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR06\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RMED\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMED\u0026#39;][thisState] postsynaptic[\u0026#39;SAADL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SAADL\u0026#39;][thisState] postsynaptic[\u0026#39;SAAVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SAAVR\u0026#39;][thisState] def SMBDR(): postsynaptic[\u0026#39;ALNL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ALNL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVKR\u0026#39;][thisState] postsynaptic[\u0026#39;MDL02\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL02\u0026#39;][thisState] postsynaptic[\u0026#39;MDL03\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL03\u0026#39;][thisState] postsynaptic[\u0026#39;MDL04\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL04\u0026#39;][thisState] postsynaptic[\u0026#39;MDL06\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL06\u0026#39;][thisState] postsynaptic[\u0026#39;MDR04\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR04\u0026#39;][thisState] postsynaptic[\u0026#39;MDR08\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR08\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RMED\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMED\u0026#39;][thisState] postsynaptic[\u0026#39;SAAVL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SAAVL\u0026#39;][thisState] def SMBVL(): postsynaptic[\u0026#39;MVL01\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL01\u0026#39;][thisState] postsynaptic[\u0026#39;MVL02\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL02\u0026#39;][thisState] postsynaptic[\u0026#39;MVL03\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL03\u0026#39;][thisState] postsynaptic[\u0026#39;MVL04\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL04\u0026#39;][thisState] postsynaptic[\u0026#39;MVL05\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL05\u0026#39;][thisState] postsynaptic[\u0026#39;MVL06\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL06\u0026#39;][thisState] postsynaptic[\u0026#39;MVL08\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL08\u0026#39;][thisState] postsynaptic[\u0026#39;PLNL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PLNL\u0026#39;][thisState] postsynaptic[\u0026#39;RMEV\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RMEV\u0026#39;][thisState] postsynaptic[\u0026#39;SAADL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SAADL\u0026#39;][thisState] postsynaptic[\u0026#39;SAAVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SAAVR\u0026#39;][thisState] def SMBVR(): postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVKR\u0026#39;][thisState] postsynaptic[\u0026#39;MVR01\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR01\u0026#39;][thisState] postsynaptic[\u0026#39;MVR02\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR02\u0026#39;][thisState] postsynaptic[\u0026#39;MVR03\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR03\u0026#39;][thisState] postsynaptic[\u0026#39;MVR04\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR04\u0026#39;][thisState] postsynaptic[\u0026#39;MVR06\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR06\u0026#39;][thisState] postsynaptic[\u0026#39;MVR07\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR07\u0026#39;][thisState] postsynaptic[\u0026#39;RMEV\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMEV\u0026#39;][thisState] postsynaptic[\u0026#39;SAADR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;SAADR\u0026#39;][thisState] postsynaptic[\u0026#39;SAAVL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SAAVL\u0026#39;][thisState] def SMDDL(): postsynaptic[\u0026#39;MDL04\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL04\u0026#39;][thisState] postsynaptic[\u0026#39;MDL06\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL06\u0026#39;][thisState] postsynaptic[\u0026#39;MDL08\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL08\u0026#39;][thisState] postsynaptic[\u0026#39;MDR02\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR02\u0026#39;][thisState] postsynaptic[\u0026#39;MDR03\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR03\u0026#39;][thisState] postsynaptic[\u0026#39;MDR04\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR04\u0026#39;][thisState] postsynaptic[\u0026#39;MDR05\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR05\u0026#39;][thisState] postsynaptic[\u0026#39;MDR06\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR06\u0026#39;][thisState] postsynaptic[\u0026#39;MDR07\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR07\u0026#39;][thisState] postsynaptic[\u0026#39;MVL02\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL02\u0026#39;][thisState] postsynaptic[\u0026#39;MVL04\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL04\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIS\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIS\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SMDVR\u0026#39;][thisState] def SMDDR(): postsynaptic[\u0026#39;MDL04\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL04\u0026#39;][thisState] postsynaptic[\u0026#39;MDL05\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL05\u0026#39;][thisState] postsynaptic[\u0026#39;MDL06\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL06\u0026#39;][thisState] postsynaptic[\u0026#39;MDL08\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDL08\u0026#39;][thisState] postsynaptic[\u0026#39;MDR04\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR04\u0026#39;][thisState] postsynaptic[\u0026#39;MDR06\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MDR06\u0026#39;][thisState] postsynaptic[\u0026#39;MVR02\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR02\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIS\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIS\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;VD1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD1\u0026#39;][thisState] def SMDVL(): postsynaptic[\u0026#39;MVL03\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL03\u0026#39;][thisState] postsynaptic[\u0026#39;MVL06\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL06\u0026#39;][thisState] postsynaptic[\u0026#39;MVR02\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR02\u0026#39;][thisState] postsynaptic[\u0026#39;MVR03\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR03\u0026#39;][thisState] postsynaptic[\u0026#39;MVR04\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR04\u0026#39;][thisState] postsynaptic[\u0026#39;MVR06\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR06\u0026#39;][thisState] postsynaptic[\u0026#39;PVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVR\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIS\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIS\u0026#39;][thisState] postsynaptic[\u0026#39;RIVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIVL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDVR\u0026#39;][thisState] def SMDVR(): postsynaptic[\u0026#39;MVL02\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL02\u0026#39;][thisState] postsynaptic[\u0026#39;MVL03\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL03\u0026#39;][thisState] postsynaptic[\u0026#39;MVL04\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL04\u0026#39;][thisState] postsynaptic[\u0026#39;MVR07\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR07\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIVR\u0026#39;][thisState] postsynaptic[\u0026#39;RIVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIVR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;VB1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB1\u0026#39;][thisState] def URADL(): postsynaptic[\u0026#39;IL1DL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;IL1DL\u0026#39;][thisState] postsynaptic[\u0026#39;MDL02\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL02\u0026#39;][thisState] postsynaptic[\u0026#39;MDL03\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL03\u0026#39;][thisState] postsynaptic[\u0026#39;MDL04\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDL04\u0026#39;][thisState] postsynaptic[\u0026#39;RIPL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIPL\u0026#39;][thisState] postsynaptic[\u0026#39;RMEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMEL\u0026#39;][thisState] def URADR(): postsynaptic[\u0026#39;IL1DR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1DR\u0026#39;][thisState] postsynaptic[\u0026#39;MDR01\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR01\u0026#39;][thisState] postsynaptic[\u0026#39;MDR02\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MDR02\u0026#39;][thisState] postsynaptic[\u0026#39;MDR03\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MDR03\u0026#39;][thisState] postsynaptic[\u0026#39;RIPR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIPR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;RMED\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMED\u0026#39;][thisState] postsynaptic[\u0026#39;RMER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMER\u0026#39;][thisState] postsynaptic[\u0026#39;URYDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;URYDR\u0026#39;][thisState] def URAVL(): postsynaptic[\u0026#39;MVL01\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MVL01\u0026#39;][thisState] postsynaptic[\u0026#39;MVL02\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MVL02\u0026#39;][thisState] postsynaptic[\u0026#39;MVL03\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MVL03\u0026#39;][thisState] postsynaptic[\u0026#39;MVL04\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MVL04\u0026#39;][thisState] postsynaptic[\u0026#39;RIPL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIPL\u0026#39;][thisState] postsynaptic[\u0026#39;RMEL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMEL\u0026#39;][thisState] postsynaptic[\u0026#39;RMER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMER\u0026#39;][thisState] postsynaptic[\u0026#39;RMEV\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMEV\u0026#39;][thisState] def URAVR(): postsynaptic[\u0026#39;IL1R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1R\u0026#39;][thisState] postsynaptic[\u0026#39;MVR01\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MVR01\u0026#39;][thisState] postsynaptic[\u0026#39;MVR02\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MVR02\u0026#39;][thisState] postsynaptic[\u0026#39;MVR03\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MVR03\u0026#39;][thisState] postsynaptic[\u0026#39;MVR04\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MVR04\u0026#39;][thisState] postsynaptic[\u0026#39;RIPR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIPR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;RMER\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMER\u0026#39;][thisState] postsynaptic[\u0026#39;RMEV\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMEV\u0026#39;][thisState] def URBL(): postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;CEPDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;CEPDL\u0026#39;][thisState] postsynaptic[\u0026#39;IL1L\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1L\u0026#39;][thisState] postsynaptic[\u0026#39;OLQDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQDL\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQVL\u0026#39;][thisState] postsynaptic[\u0026#39;RICR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;SIAVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIAVL\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBDR\u0026#39;][thisState] postsynaptic[\u0026#39;URXL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;URXL\u0026#39;][thisState] def URBR(): postsynaptic[\u0026#39;ADAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ADAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;CEPDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;CEPDR\u0026#39;][thisState] postsynaptic[\u0026#39;IL1R\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;IL1R\u0026#39;][thisState] postsynaptic[\u0026#39;IL2R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL2R\u0026#39;][thisState] postsynaptic[\u0026#39;OLQDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQDR\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQVR\u0026#39;][thisState] postsynaptic[\u0026#39;RICR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMFL\u0026#39;][thisState] postsynaptic[\u0026#39;SIAVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SIAVR\u0026#39;][thisState] postsynaptic[\u0026#39;SMBDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMBDL\u0026#39;][thisState] postsynaptic[\u0026#39;URXR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;URXR\u0026#39;][thisState] def URXL(): postsynaptic[\u0026#39;ASHL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;ASHL\u0026#39;][thisState] postsynaptic[\u0026#39;AUAL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AUAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVJR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVJR\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RICL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RICL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RMGL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMGL\u0026#39;][thisState] postsynaptic[\u0026#39;RMGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMGL\u0026#39;][thisState] def URXR(): postsynaptic[\u0026#39;AUAR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AUAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;IL2R\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL2R\u0026#39;][thisState] postsynaptic[\u0026#39;OLQVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLQVR\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RIPR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RIPR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RMDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMGR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMGR\u0026#39;][thisState] postsynaptic[\u0026#39;SIAVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIAVR\u0026#39;][thisState] def URYDL(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;RMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] def URYDR(): postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;SMDDL\u0026#39;][thisState] def URYVL(): postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVER\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVER\u0026#39;][thisState] postsynaptic[\u0026#39;IL1VL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1VL\u0026#39;][thisState] postsynaptic[\u0026#39;RIAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIAL\u0026#39;][thisState] postsynaptic[\u0026#39;RIBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIBL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;RIH\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIH\u0026#39;][thisState] postsynaptic[\u0026#39;RIS\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIS\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMDDL\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;SIBVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBVR\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;SMDVR\u0026#39;][thisState] def URYVR(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVEL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVEL\u0026#39;][thisState] postsynaptic[\u0026#39;IL1VR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;IL1VR\u0026#39;][thisState] postsynaptic[\u0026#39;RIAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIAR\u0026#39;][thisState] postsynaptic[\u0026#39;RIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIBR\u0026#39;][thisState] postsynaptic[\u0026#39;RIGR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDDR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;RMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;RMDVL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;RMDVL\u0026#39;][thisState] postsynaptic[\u0026#39;SIBDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBDR\u0026#39;][thisState] postsynaptic[\u0026#39;SIBVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SIBVL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SMDVL\u0026#39;][thisState] def VA1(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;DA2\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DA2\u0026#39;][thisState] postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;MVL07\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MVL07\u0026#39;][thisState] postsynaptic[\u0026#39;MVL08\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MVL08\u0026#39;][thisState] postsynaptic[\u0026#39;MVR07\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MVR07\u0026#39;][thisState] postsynaptic[\u0026#39;MVR08\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;MVR08\u0026#39;][thisState] postsynaptic[\u0026#39;VD1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD1\u0026#39;][thisState] def VA2(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 13 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;MVL07\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL07\u0026#39;][thisState] postsynaptic[\u0026#39;MVL10\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL10\u0026#39;][thisState] postsynaptic[\u0026#39;MVR07\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR07\u0026#39;][thisState] postsynaptic[\u0026#39;MVR10\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR10\u0026#39;][thisState] postsynaptic[\u0026#39;SABD\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;SABD\u0026#39;][thisState] postsynaptic[\u0026#39;VA3\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA3\u0026#39;][thisState] postsynaptic[\u0026#39;VB1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VB1\u0026#39;][thisState] postsynaptic[\u0026#39;VD1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD1\u0026#39;][thisState] postsynaptic[\u0026#39;VD1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD1\u0026#39;][thisState] postsynaptic[\u0026#39;VD2\u0026#39;][nextState] = 11 + postsynaptic[\u0026#39;VD2\u0026#39;][thisState] def VA3(): postsynaptic[\u0026#39;AS1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS1\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 18 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;DD2\u0026#39;][nextState] = 11 + postsynaptic[\u0026#39;DD2\u0026#39;][thisState] postsynaptic[\u0026#39;MVL09\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL09\u0026#39;][thisState] postsynaptic[\u0026#39;MVL10\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL10\u0026#39;][thisState] postsynaptic[\u0026#39;MVL12\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL12\u0026#39;][thisState] postsynaptic[\u0026#39;MVR09\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR09\u0026#39;][thisState] postsynaptic[\u0026#39;MVR10\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR10\u0026#39;][thisState] postsynaptic[\u0026#39;MVR12\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR12\u0026#39;][thisState] postsynaptic[\u0026#39;SABD\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SABD\u0026#39;][thisState] postsynaptic[\u0026#39;VA4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA4\u0026#39;][thisState] postsynaptic[\u0026#39;VD2\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VD2\u0026#39;][thisState] postsynaptic[\u0026#39;VD3\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VD3\u0026#39;][thisState] def VA4(): postsynaptic[\u0026#39;AS2\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AS2\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVDL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVDL\u0026#39;][thisState] postsynaptic[\u0026#39;DA5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA5\u0026#39;][thisState] postsynaptic[\u0026#39;DD2\u0026#39;][nextState] = 21 + postsynaptic[\u0026#39;DD2\u0026#39;][thisState] postsynaptic[\u0026#39;MVL11\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVL11\u0026#39;][thisState] postsynaptic[\u0026#39;MVL12\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVL12\u0026#39;][thisState] postsynaptic[\u0026#39;MVR11\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVR11\u0026#39;][thisState] postsynaptic[\u0026#39;MVR12\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVR12\u0026#39;][thisState] postsynaptic[\u0026#39;SABD\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SABD\u0026#39;][thisState] postsynaptic[\u0026#39;VB3\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VB3\u0026#39;][thisState] postsynaptic[\u0026#39;VD4\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VD4\u0026#39;][thisState] def VA5(): postsynaptic[\u0026#39;AS3\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AS3\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;DA5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DA5\u0026#39;][thisState] postsynaptic[\u0026#39;DD2\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;DD2\u0026#39;][thisState] postsynaptic[\u0026#39;DD3\u0026#39;][nextState] = 13 + postsynaptic[\u0026#39;DD3\u0026#39;][thisState] postsynaptic[\u0026#39;MVL11\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL11\u0026#39;][thisState] postsynaptic[\u0026#39;MVL14\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL14\u0026#39;][thisState] postsynaptic[\u0026#39;MVR11\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR11\u0026#39;][thisState] postsynaptic[\u0026#39;MVR14\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR14\u0026#39;][thisState] postsynaptic[\u0026#39;VD5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD5\u0026#39;][thisState] def VA6(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;DD3\u0026#39;][nextState] = 24 + postsynaptic[\u0026#39;DD3\u0026#39;][thisState] postsynaptic[\u0026#39;MVL13\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL13\u0026#39;][thisState] postsynaptic[\u0026#39;MVL14\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL14\u0026#39;][thisState] postsynaptic[\u0026#39;MVR13\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR13\u0026#39;][thisState] postsynaptic[\u0026#39;MVR14\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR14\u0026#39;][thisState] postsynaptic[\u0026#39;VB5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VB5\u0026#39;][thisState] postsynaptic[\u0026#39;VD5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD5\u0026#39;][thisState] postsynaptic[\u0026#39;VD6\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD6\u0026#39;][thisState] def VA7(): postsynaptic[\u0026#39;AS5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS5\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;DD3\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DD3\u0026#39;][thisState] postsynaptic[\u0026#39;DD4\u0026#39;][nextState] = 12 + postsynaptic[\u0026#39;DD4\u0026#39;][thisState] postsynaptic[\u0026#39;MVL13\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MVL13\u0026#39;][thisState] postsynaptic[\u0026#39;MVL15\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MVL15\u0026#39;][thisState] postsynaptic[\u0026#39;MVL16\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MVL16\u0026#39;][thisState] postsynaptic[\u0026#39;MVR13\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MVR13\u0026#39;][thisState] postsynaptic[\u0026#39;MVR15\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MVR15\u0026#39;][thisState] postsynaptic[\u0026#39;MVR16\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MVR16\u0026#39;][thisState] postsynaptic[\u0026#39;MVULVA\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MVULVA\u0026#39;][thisState] postsynaptic[\u0026#39;VB3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB3\u0026#39;][thisState] postsynaptic[\u0026#39;VD7\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;VD7\u0026#39;][thisState] def VA8(): postsynaptic[\u0026#39;AS6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS6\u0026#39;][thisState] postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;DD4\u0026#39;][nextState] = 21 + postsynaptic[\u0026#39;DD4\u0026#39;][thisState] postsynaptic[\u0026#39;MVL15\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVL15\u0026#39;][thisState] postsynaptic[\u0026#39;MVL16\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVL16\u0026#39;][thisState] postsynaptic[\u0026#39;MVR15\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVR15\u0026#39;][thisState] postsynaptic[\u0026#39;MVR16\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVR16\u0026#39;][thisState] postsynaptic[\u0026#39;PDER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PDER\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;VA8\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA8\u0026#39;][thisState] postsynaptic[\u0026#39;VA9\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA9\u0026#39;][thisState] postsynaptic[\u0026#39;VB6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB6\u0026#39;][thisState] postsynaptic[\u0026#39;VB8\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB8\u0026#39;][thisState] postsynaptic[\u0026#39;VB8\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VB8\u0026#39;][thisState] postsynaptic[\u0026#39;VB9\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VB9\u0026#39;][thisState] postsynaptic[\u0026#39;VD7\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VD7\u0026#39;][thisState] postsynaptic[\u0026#39;VD8\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VD8\u0026#39;][thisState] postsynaptic[\u0026#39;VD8\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD8\u0026#39;][thisState] def VA9(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;DD4\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DD4\u0026#39;][thisState] postsynaptic[\u0026#39;DD5\u0026#39;][nextState] = 15 + postsynaptic[\u0026#39;DD5\u0026#39;][thisState] postsynaptic[\u0026#39;DVB\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVB\u0026#39;][thisState] postsynaptic[\u0026#39;DVC\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVC\u0026#39;][thisState] postsynaptic[\u0026#39;MVL15\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL15\u0026#39;][thisState] postsynaptic[\u0026#39;MVL18\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL18\u0026#39;][thisState] postsynaptic[\u0026#39;MVR15\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR15\u0026#39;][thisState] postsynaptic[\u0026#39;MVR18\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR18\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVT\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVT\u0026#39;][thisState] postsynaptic[\u0026#39;VB8\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;VB8\u0026#39;][thisState] postsynaptic[\u0026#39;VB8\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB8\u0026#39;][thisState] postsynaptic[\u0026#39;VB9\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;VB9\u0026#39;][thisState] postsynaptic[\u0026#39;VD7\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD7\u0026#39;][thisState] postsynaptic[\u0026#39;VD9\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;VD9\u0026#39;][thisState] def VA10(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;MVL17\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL17\u0026#39;][thisState] postsynaptic[\u0026#39;MVL18\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL18\u0026#39;][thisState] postsynaptic[\u0026#39;MVR17\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR17\u0026#39;][thisState] postsynaptic[\u0026#39;MVR18\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR18\u0026#39;][thisState] def VA11(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;DD6\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;DD6\u0026#39;][thisState] postsynaptic[\u0026#39;MVL19\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL19\u0026#39;][thisState] postsynaptic[\u0026#39;MVL20\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL20\u0026#39;][thisState] postsynaptic[\u0026#39;MVR19\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR19\u0026#39;][thisState] postsynaptic[\u0026#39;MVR20\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR20\u0026#39;][thisState] postsynaptic[\u0026#39;PVNR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVNR\u0026#39;][thisState] postsynaptic[\u0026#39;VB10\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB10\u0026#39;][thisState] postsynaptic[\u0026#39;VD12\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;VD12\u0026#39;][thisState] def VA12(): postsynaptic[\u0026#39;AS11\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AS11\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;DA8\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DA8\u0026#39;][thisState] postsynaptic[\u0026#39;DA9\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;DA9\u0026#39;][thisState] postsynaptic[\u0026#39;DB7\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;DB7\u0026#39;][thisState] postsynaptic[\u0026#39;DD6\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DD6\u0026#39;][thisState] postsynaptic[\u0026#39;LUAL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;LUAL\u0026#39;][thisState] postsynaptic[\u0026#39;MVL21\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL21\u0026#39;][thisState] postsynaptic[\u0026#39;MVL22\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL22\u0026#39;][thisState] postsynaptic[\u0026#39;MVL23\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL23\u0026#39;][thisState] postsynaptic[\u0026#39;MVR21\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR21\u0026#39;][thisState] postsynaptic[\u0026#39;MVR22\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR22\u0026#39;][thisState] postsynaptic[\u0026#39;MVR23\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR23\u0026#39;][thisState] postsynaptic[\u0026#39;MVR24\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR24\u0026#39;][thisState] postsynaptic[\u0026#39;PHCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PHCL\u0026#39;][thisState] postsynaptic[\u0026#39;PHCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PHCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;VA11\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA11\u0026#39;][thisState] postsynaptic[\u0026#39;VB11\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB11\u0026#39;][thisState] postsynaptic[\u0026#39;VD12\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VD12\u0026#39;][thisState] postsynaptic[\u0026#39;VD13\u0026#39;][nextState] = 11 + postsynaptic[\u0026#39;VD13\u0026#39;][thisState] def VB1(): postsynaptic[\u0026#39;AIBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AIBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;DB2\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DB2\u0026#39;][thisState] postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;DVA\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVA\u0026#39;][thisState] postsynaptic[\u0026#39;MVL07\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL07\u0026#39;][thisState] postsynaptic[\u0026#39;MVL08\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVL08\u0026#39;][thisState] postsynaptic[\u0026#39;MVR07\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR07\u0026#39;][thisState] postsynaptic[\u0026#39;MVR08\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVR08\u0026#39;][thisState] postsynaptic[\u0026#39;RIML\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIML\u0026#39;][thisState] postsynaptic[\u0026#39;RMFL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RMFL\u0026#39;][thisState] postsynaptic[\u0026#39;SAADL\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;SAADL\u0026#39;][thisState] postsynaptic[\u0026#39;SAADR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;SAADR\u0026#39;][thisState] postsynaptic[\u0026#39;SABD\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SABD\u0026#39;][thisState] postsynaptic[\u0026#39;SMDVR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDVR\u0026#39;][thisState] postsynaptic[\u0026#39;VA1\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VA1\u0026#39;][thisState] postsynaptic[\u0026#39;VA3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA3\u0026#39;][thisState] postsynaptic[\u0026#39;VB2\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;VB2\u0026#39;][thisState] postsynaptic[\u0026#39;VD1\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VD1\u0026#39;][thisState] postsynaptic[\u0026#39;VD2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD2\u0026#39;][thisState] def VB2(): postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;DB4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB4\u0026#39;][thisState] postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 20 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;DD2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DD2\u0026#39;][thisState] postsynaptic[\u0026#39;MVL07\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MVL07\u0026#39;][thisState] postsynaptic[\u0026#39;MVL09\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MVL09\u0026#39;][thisState] postsynaptic[\u0026#39;MVL10\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MVL10\u0026#39;][thisState] postsynaptic[\u0026#39;MVL12\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MVL12\u0026#39;][thisState] postsynaptic[\u0026#39;MVR07\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MVR07\u0026#39;][thisState] postsynaptic[\u0026#39;MVR09\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MVR09\u0026#39;][thisState] postsynaptic[\u0026#39;MVR10\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MVR10\u0026#39;][thisState] postsynaptic[\u0026#39;MVR12\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;MVR12\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;VA2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA2\u0026#39;][thisState] postsynaptic[\u0026#39;VB1\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;VB1\u0026#39;][thisState] postsynaptic[\u0026#39;VB3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB3\u0026#39;][thisState] postsynaptic[\u0026#39;VB5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB5\u0026#39;][thisState] postsynaptic[\u0026#39;VB7\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VB7\u0026#39;][thisState] postsynaptic[\u0026#39;VC2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VC2\u0026#39;][thisState] postsynaptic[\u0026#39;VD2\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;VD2\u0026#39;][thisState] postsynaptic[\u0026#39;VD3\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VD3\u0026#39;][thisState] def VB3(): postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;DB1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB1\u0026#39;][thisState] postsynaptic[\u0026#39;DD2\u0026#39;][nextState] = 37 + postsynaptic[\u0026#39;DD2\u0026#39;][thisState] postsynaptic[\u0026#39;MVL11\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVL11\u0026#39;][thisState] postsynaptic[\u0026#39;MVL12\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVL12\u0026#39;][thisState] postsynaptic[\u0026#39;MVL14\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVL14\u0026#39;][thisState] postsynaptic[\u0026#39;MVR11\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVR11\u0026#39;][thisState] postsynaptic[\u0026#39;MVR12\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVR12\u0026#39;][thisState] postsynaptic[\u0026#39;MVR14\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVR14\u0026#39;][thisState] postsynaptic[\u0026#39;VA4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA4\u0026#39;][thisState] postsynaptic[\u0026#39;VA7\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA7\u0026#39;][thisState] postsynaptic[\u0026#39;VB2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB2\u0026#39;][thisState] def VB4(): postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;DB1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB1\u0026#39;][thisState] postsynaptic[\u0026#39;DB4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB4\u0026#39;][thisState] postsynaptic[\u0026#39;DD2\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;DD2\u0026#39;][thisState] postsynaptic[\u0026#39;DD3\u0026#39;][nextState] = 16 + postsynaptic[\u0026#39;DD3\u0026#39;][thisState] postsynaptic[\u0026#39;MVL11\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL11\u0026#39;][thisState] postsynaptic[\u0026#39;MVL14\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL14\u0026#39;][thisState] postsynaptic[\u0026#39;MVR11\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR11\u0026#39;][thisState] postsynaptic[\u0026#39;MVR14\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR14\u0026#39;][thisState] postsynaptic[\u0026#39;VB5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB5\u0026#39;][thisState] def VB5(): postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;DD3\u0026#39;][nextState] = 27 + postsynaptic[\u0026#39;DD3\u0026#39;][thisState] postsynaptic[\u0026#39;MVL13\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVL13\u0026#39;][thisState] postsynaptic[\u0026#39;MVL14\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVL14\u0026#39;][thisState] postsynaptic[\u0026#39;MVR13\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVR13\u0026#39;][thisState] postsynaptic[\u0026#39;MVR14\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVR14\u0026#39;][thisState] postsynaptic[\u0026#39;VB2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB2\u0026#39;][thisState] postsynaptic[\u0026#39;VB4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB4\u0026#39;][thisState] postsynaptic[\u0026#39;VB6\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;VB6\u0026#39;][thisState] def VB6(): postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;DA4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DA4\u0026#39;][thisState] postsynaptic[\u0026#39;DD4\u0026#39;][nextState] = 30 + postsynaptic[\u0026#39;DD4\u0026#39;][thisState] postsynaptic[\u0026#39;MVL15\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVL15\u0026#39;][thisState] postsynaptic[\u0026#39;MVL16\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVL16\u0026#39;][thisState] postsynaptic[\u0026#39;MVR15\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVR15\u0026#39;][thisState] postsynaptic[\u0026#39;MVR16\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVR16\u0026#39;][thisState] postsynaptic[\u0026#39;MVULVA\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVULVA\u0026#39;][thisState] postsynaptic[\u0026#39;VA8\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA8\u0026#39;][thisState] postsynaptic[\u0026#39;VB5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB5\u0026#39;][thisState] postsynaptic[\u0026#39;VB7\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB7\u0026#39;][thisState] postsynaptic[\u0026#39;VD6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD6\u0026#39;][thisState] postsynaptic[\u0026#39;VD7\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;VD7\u0026#39;][thisState] def VB7(): postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;DD4\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DD4\u0026#39;][thisState] postsynaptic[\u0026#39;MVL15\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL15\u0026#39;][thisState] postsynaptic[\u0026#39;MVR15\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR15\u0026#39;][thisState] postsynaptic[\u0026#39;VB2\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VB2\u0026#39;][thisState] def VB8(): postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;DD5\u0026#39;][nextState] = 30 + postsynaptic[\u0026#39;DD5\u0026#39;][thisState] postsynaptic[\u0026#39;MVL17\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL17\u0026#39;][thisState] postsynaptic[\u0026#39;MVL18\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL18\u0026#39;][thisState] postsynaptic[\u0026#39;MVL20\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL20\u0026#39;][thisState] postsynaptic[\u0026#39;MVR17\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR17\u0026#39;][thisState] postsynaptic[\u0026#39;MVR18\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR18\u0026#39;][thisState] postsynaptic[\u0026#39;MVR20\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR20\u0026#39;][thisState] postsynaptic[\u0026#39;VA8\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VA8\u0026#39;][thisState] postsynaptic[\u0026#39;VA9\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;VA9\u0026#39;][thisState] postsynaptic[\u0026#39;VA9\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA9\u0026#39;][thisState] postsynaptic[\u0026#39;VB9\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;VB9\u0026#39;][thisState] postsynaptic[\u0026#39;VD10\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD10\u0026#39;][thisState] postsynaptic[\u0026#39;VD9\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;VD9\u0026#39;][thisState] def VB9(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;DD5\u0026#39;][nextState] = 8 + postsynaptic[\u0026#39;DD5\u0026#39;][thisState] postsynaptic[\u0026#39;DVB\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVB\u0026#39;][thisState] postsynaptic[\u0026#39;MVL17\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVL17\u0026#39;][thisState] postsynaptic[\u0026#39;MVL20\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVL20\u0026#39;][thisState] postsynaptic[\u0026#39;MVR17\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVR17\u0026#39;][thisState] postsynaptic[\u0026#39;MVR20\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVR20\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;VA8\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VA8\u0026#39;][thisState] postsynaptic[\u0026#39;VA9\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;VA9\u0026#39;][thisState] postsynaptic[\u0026#39;VB8\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB8\u0026#39;][thisState] postsynaptic[\u0026#39;VB8\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VB8\u0026#39;][thisState] postsynaptic[\u0026#39;VD10\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VD10\u0026#39;][thisState] def VB10(): postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;AVKL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVKL\u0026#39;][thisState] postsynaptic[\u0026#39;DD6\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;DD6\u0026#39;][thisState] postsynaptic[\u0026#39;MVL19\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL19\u0026#39;][thisState] postsynaptic[\u0026#39;MVL20\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL20\u0026#39;][thisState] postsynaptic[\u0026#39;MVR19\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR19\u0026#39;][thisState] postsynaptic[\u0026#39;MVR20\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR20\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVT\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVT\u0026#39;][thisState] postsynaptic[\u0026#39;VD11\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD11\u0026#39;][thisState] postsynaptic[\u0026#39;VD12\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD12\u0026#39;][thisState] def VB11(): postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;DD6\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;DD6\u0026#39;][thisState] postsynaptic[\u0026#39;MVL21\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL21\u0026#39;][thisState] postsynaptic[\u0026#39;MVL22\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL22\u0026#39;][thisState] postsynaptic[\u0026#39;MVL23\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVL23\u0026#39;][thisState] postsynaptic[\u0026#39;MVR21\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR21\u0026#39;][thisState] postsynaptic[\u0026#39;MVR22\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR22\u0026#39;][thisState] postsynaptic[\u0026#39;MVR23\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR23\u0026#39;][thisState] postsynaptic[\u0026#39;MVR24\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;MVR24\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;VA12\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA12\u0026#39;][thisState] def VC1(): postsynaptic[\u0026#39;AVL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVL\u0026#39;][thisState] postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;DD2\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;DD2\u0026#39;][thisState] postsynaptic[\u0026#39;DD3\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;DD3\u0026#39;][thisState] postsynaptic[\u0026#39;DVC\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVC\u0026#39;][thisState] postsynaptic[\u0026#39;MVULVA\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;MVULVA\u0026#39;][thisState] postsynaptic[\u0026#39;PVT\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVT\u0026#39;][thisState] postsynaptic[\u0026#39;VC2\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;VC2\u0026#39;][thisState] postsynaptic[\u0026#39;VC3\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VC3\u0026#39;][thisState] postsynaptic[\u0026#39;VD1\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VD1\u0026#39;][thisState] postsynaptic[\u0026#39;VD2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD2\u0026#39;][thisState] postsynaptic[\u0026#39;VD3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD3\u0026#39;][thisState] postsynaptic[\u0026#39;VD4\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD4\u0026#39;][thisState] postsynaptic[\u0026#39;VD5\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VD5\u0026#39;][thisState] postsynaptic[\u0026#39;VD6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD6\u0026#39;][thisState] def VC2(): postsynaptic[\u0026#39;DB4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DB4\u0026#39;][thisState] postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;DD2\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;DD2\u0026#39;][thisState] postsynaptic[\u0026#39;DD3\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;DD3\u0026#39;][thisState] postsynaptic[\u0026#39;DVC\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVC\u0026#39;][thisState] postsynaptic[\u0026#39;MVULVA\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;MVULVA\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVQR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVQR\u0026#39;][thisState] postsynaptic[\u0026#39;PVT\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVT\u0026#39;][thisState] postsynaptic[\u0026#39;VC1\u0026#39;][nextState] = 10 + postsynaptic[\u0026#39;VC1\u0026#39;][thisState] postsynaptic[\u0026#39;VC3\u0026#39;][nextState] = 6 + postsynaptic[\u0026#39;VC3\u0026#39;][thisState] postsynaptic[\u0026#39;VD1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD1\u0026#39;][thisState] postsynaptic[\u0026#39;VD2\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD2\u0026#39;][thisState] postsynaptic[\u0026#39;VD4\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VD4\u0026#39;][thisState] postsynaptic[\u0026#39;VD5\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VD5\u0026#39;][thisState] postsynaptic[\u0026#39;VD6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD6\u0026#39;][thisState] def VC3(): postsynaptic[\u0026#39;AVL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVL\u0026#39;][thisState] postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;DD2\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;DD2\u0026#39;][thisState] postsynaptic[\u0026#39;DD3\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;DD3\u0026#39;][thisState] postsynaptic[\u0026#39;DD4\u0026#39;][nextState] = 13 + postsynaptic[\u0026#39;DD4\u0026#39;][thisState] postsynaptic[\u0026#39;DVC\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;DVC\u0026#39;][thisState] postsynaptic[\u0026#39;HSNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNR\u0026#39;][thisState] postsynaptic[\u0026#39;MVULVA\u0026#39;][nextState] = 11 + postsynaptic[\u0026#39;MVULVA\u0026#39;][thisState] postsynaptic[\u0026#39;PVNR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVNR\u0026#39;][thisState] postsynaptic[\u0026#39;PVPR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVPR\u0026#39;][thisState] postsynaptic[\u0026#39;PVQR\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;PVQR\u0026#39;][thisState] postsynaptic[\u0026#39;VC1\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;VC1\u0026#39;][thisState] postsynaptic[\u0026#39;VC2\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VC2\u0026#39;][thisState] postsynaptic[\u0026#39;VC4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VC4\u0026#39;][thisState] postsynaptic[\u0026#39;VC5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VC5\u0026#39;][thisState] postsynaptic[\u0026#39;VD1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD1\u0026#39;][thisState] postsynaptic[\u0026#39;VD2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD2\u0026#39;][thisState] postsynaptic[\u0026#39;VD3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD3\u0026#39;][thisState] postsynaptic[\u0026#39;VD4\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD4\u0026#39;][thisState] postsynaptic[\u0026#39;VD5\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;VD5\u0026#39;][thisState] postsynaptic[\u0026#39;VD6\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;VD6\u0026#39;][thisState] postsynaptic[\u0026#39;VD7\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VD7\u0026#39;][thisState] def VC4(): postsynaptic[\u0026#39;AVBL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBL\u0026#39;][thisState] postsynaptic[\u0026#39;AVFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVFR\u0026#39;][thisState] postsynaptic[\u0026#39;AVHR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVHR\u0026#39;][thisState] postsynaptic[\u0026#39;MVULVA\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;MVULVA\u0026#39;][thisState] postsynaptic[\u0026#39;VC1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VC1\u0026#39;][thisState] postsynaptic[\u0026#39;VC3\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VC3\u0026#39;][thisState] postsynaptic[\u0026#39;VC5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VC5\u0026#39;][thisState] def VC5(): postsynaptic[\u0026#39;AVFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVFL\u0026#39;][thisState] postsynaptic[\u0026#39;AVFR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVFR\u0026#39;][thisState] postsynaptic[\u0026#39;DVC\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DVC\u0026#39;][thisState] postsynaptic[\u0026#39;HSNL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;HSNL\u0026#39;][thisState] postsynaptic[\u0026#39;MVULVA\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;MVULVA\u0026#39;][thisState] postsynaptic[\u0026#39;OLLR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;OLLR\u0026#39;][thisState] postsynaptic[\u0026#39;PVT\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVT\u0026#39;][thisState] postsynaptic[\u0026#39;URBL\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;URBL\u0026#39;][thisState] postsynaptic[\u0026#39;VC3\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VC3\u0026#39;][thisState] postsynaptic[\u0026#39;VC4\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VC4\u0026#39;][thisState] def VC6(): postsynaptic[\u0026#39;MVULVA\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;MVULVA\u0026#39;][thisState] def VD1(): postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;DVC\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;DVC\u0026#39;][thisState] postsynaptic[\u0026#39;MVL05\u0026#39;][nextState] = -5 + postsynaptic[\u0026#39;MVL05\u0026#39;][thisState] postsynaptic[\u0026#39;MVL08\u0026#39;][nextState] = -5 + postsynaptic[\u0026#39;MVL08\u0026#39;][thisState] postsynaptic[\u0026#39;MVR05\u0026#39;][nextState] = -5 + postsynaptic[\u0026#39;MVR05\u0026#39;][thisState] postsynaptic[\u0026#39;MVR08\u0026#39;][nextState] = -5 + postsynaptic[\u0026#39;MVR08\u0026#39;][thisState] postsynaptic[\u0026#39;RIFL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;RIFL\u0026#39;][thisState] postsynaptic[\u0026#39;RIGL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;RIGL\u0026#39;][thisState] postsynaptic[\u0026#39;SMDDR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;SMDDR\u0026#39;][thisState] postsynaptic[\u0026#39;VA1\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA1\u0026#39;][thisState] postsynaptic[\u0026#39;VA2\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA2\u0026#39;][thisState] postsynaptic[\u0026#39;VC1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VC1\u0026#39;][thisState] postsynaptic[\u0026#39;VD2\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;VD2\u0026#39;][thisState] def VD2(): postsynaptic[\u0026#39;AS1\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AS1\u0026#39;][thisState] postsynaptic[\u0026#39;DD1\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;DD1\u0026#39;][thisState] postsynaptic[\u0026#39;MVL07\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MVL07\u0026#39;][thisState] postsynaptic[\u0026#39;MVL10\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MVL10\u0026#39;][thisState] postsynaptic[\u0026#39;MVR07\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MVR07\u0026#39;][thisState] postsynaptic[\u0026#39;MVR10\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MVR10\u0026#39;][thisState] postsynaptic[\u0026#39;VA2\u0026#39;][nextState] = 9 + postsynaptic[\u0026#39;VA2\u0026#39;][thisState] postsynaptic[\u0026#39;VB2\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VB2\u0026#39;][thisState] postsynaptic[\u0026#39;VD1\u0026#39;][nextState] = 7 + postsynaptic[\u0026#39;VD1\u0026#39;][thisState] postsynaptic[\u0026#39;VD3\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD3\u0026#39;][thisState] def VD3(): postsynaptic[\u0026#39;MVL09\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MVL09\u0026#39;][thisState] postsynaptic[\u0026#39;MVL12\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MVL12\u0026#39;][thisState] postsynaptic[\u0026#39;MVR09\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MVR09\u0026#39;][thisState] postsynaptic[\u0026#39;MVR12\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MVR12\u0026#39;][thisState] postsynaptic[\u0026#39;PVPL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVPL\u0026#39;][thisState] postsynaptic[\u0026#39;VA3\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA3\u0026#39;][thisState] postsynaptic[\u0026#39;VB2\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VB2\u0026#39;][thisState] postsynaptic[\u0026#39;VD2\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD2\u0026#39;][thisState] postsynaptic[\u0026#39;VD4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD4\u0026#39;][thisState] def VD4(): postsynaptic[\u0026#39;DD2\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DD2\u0026#39;][thisState] postsynaptic[\u0026#39;MVL11\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MVL11\u0026#39;][thisState] postsynaptic[\u0026#39;MVL12\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MVL12\u0026#39;][thisState] postsynaptic[\u0026#39;MVR11\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MVR11\u0026#39;][thisState] postsynaptic[\u0026#39;MVR12\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MVR12\u0026#39;][thisState] postsynaptic[\u0026#39;PVPR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVPR\u0026#39;][thisState] postsynaptic[\u0026#39;VD3\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD3\u0026#39;][thisState] postsynaptic[\u0026#39;VD5\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD5\u0026#39;][thisState] def VD5(): postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;MVL14\u0026#39;][nextState] = -17 + postsynaptic[\u0026#39;MVL14\u0026#39;][thisState] postsynaptic[\u0026#39;MVR14\u0026#39;][nextState] = -17 + postsynaptic[\u0026#39;MVR14\u0026#39;][thisState] postsynaptic[\u0026#39;PVPR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVPR\u0026#39;][thisState] postsynaptic[\u0026#39;VA5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA5\u0026#39;][thisState] postsynaptic[\u0026#39;VB4\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VB4\u0026#39;][thisState] postsynaptic[\u0026#39;VD4\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD4\u0026#39;][thisState] postsynaptic[\u0026#39;VD6\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD6\u0026#39;][thisState] def VD6(): postsynaptic[\u0026#39;AVAL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVAL\u0026#39;][thisState] postsynaptic[\u0026#39;MVL13\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MVL13\u0026#39;][thisState] postsynaptic[\u0026#39;MVL14\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MVL14\u0026#39;][thisState] postsynaptic[\u0026#39;MVL16\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MVL16\u0026#39;][thisState] postsynaptic[\u0026#39;MVR13\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MVR13\u0026#39;][thisState] postsynaptic[\u0026#39;MVR14\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MVR14\u0026#39;][thisState] postsynaptic[\u0026#39;MVR16\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MVR16\u0026#39;][thisState] postsynaptic[\u0026#39;VA6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA6\u0026#39;][thisState] postsynaptic[\u0026#39;VB5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VB5\u0026#39;][thisState] postsynaptic[\u0026#39;VD5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VD5\u0026#39;][thisState] postsynaptic[\u0026#39;VD7\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD7\u0026#39;][thisState] def VD7(): postsynaptic[\u0026#39;MVL15\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MVL15\u0026#39;][thisState] postsynaptic[\u0026#39;MVL16\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MVL16\u0026#39;][thisState] postsynaptic[\u0026#39;MVR15\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MVR15\u0026#39;][thisState] postsynaptic[\u0026#39;MVR16\u0026#39;][nextState] = -7 + postsynaptic[\u0026#39;MVR16\u0026#39;][thisState] postsynaptic[\u0026#39;MVULVA\u0026#39;][nextState] = -15 + postsynaptic[\u0026#39;MVULVA\u0026#39;][thisState] postsynaptic[\u0026#39;VA9\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA9\u0026#39;][thisState] postsynaptic[\u0026#39;VD6\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VD6\u0026#39;][thisState] def VD8(): postsynaptic[\u0026#39;DD4\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DD4\u0026#39;][thisState] postsynaptic[\u0026#39;MVL15\u0026#39;][nextState] = -18 + postsynaptic[\u0026#39;MVL15\u0026#39;][thisState] postsynaptic[\u0026#39;MVR15\u0026#39;][nextState] = -18 + postsynaptic[\u0026#39;MVR15\u0026#39;][thisState] postsynaptic[\u0026#39;VA8\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VA8\u0026#39;][thisState] def VD9(): postsynaptic[\u0026#39;MVL17\u0026#39;][nextState] = -10 + postsynaptic[\u0026#39;MVL17\u0026#39;][thisState] postsynaptic[\u0026#39;MVL18\u0026#39;][nextState] = -10 + postsynaptic[\u0026#39;MVL18\u0026#39;][thisState] postsynaptic[\u0026#39;MVR17\u0026#39;][nextState] = -10 + postsynaptic[\u0026#39;MVR17\u0026#39;][thisState] postsynaptic[\u0026#39;MVR18\u0026#39;][nextState] = -10 + postsynaptic[\u0026#39;MVR18\u0026#39;][thisState] postsynaptic[\u0026#39;PDER\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PDER\u0026#39;][thisState] postsynaptic[\u0026#39;VD10\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VD10\u0026#39;][thisState] def VD10(): postsynaptic[\u0026#39;AVBR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;AVBR\u0026#39;][thisState] postsynaptic[\u0026#39;DD5\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;DD5\u0026#39;][thisState] postsynaptic[\u0026#39;DVC\u0026#39;][nextState] = 4 + postsynaptic[\u0026#39;DVC\u0026#39;][thisState] postsynaptic[\u0026#39;MVL17\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MVL17\u0026#39;][thisState] postsynaptic[\u0026#39;MVL20\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MVL20\u0026#39;][thisState] postsynaptic[\u0026#39;MVR17\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MVR17\u0026#39;][thisState] postsynaptic[\u0026#39;MVR20\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MVR20\u0026#39;][thisState] postsynaptic[\u0026#39;VB9\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VB9\u0026#39;][thisState] postsynaptic[\u0026#39;VD9\u0026#39;][nextState] = 5 + postsynaptic[\u0026#39;VD9\u0026#39;][thisState] def VD11(): postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;MVL19\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MVL19\u0026#39;][thisState] postsynaptic[\u0026#39;MVL20\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MVL20\u0026#39;][thisState] postsynaptic[\u0026#39;MVR19\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MVR19\u0026#39;][thisState] postsynaptic[\u0026#39;MVR20\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MVR20\u0026#39;][thisState] postsynaptic[\u0026#39;VA11\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA11\u0026#39;][thisState] postsynaptic[\u0026#39;VB10\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB10\u0026#39;][thisState] def VD12(): postsynaptic[\u0026#39;MVL19\u0026#39;][nextState] = -5 + postsynaptic[\u0026#39;MVL19\u0026#39;][thisState] postsynaptic[\u0026#39;MVL21\u0026#39;][nextState] = -5 + postsynaptic[\u0026#39;MVL21\u0026#39;][thisState] postsynaptic[\u0026#39;MVR19\u0026#39;][nextState] = -5 + postsynaptic[\u0026#39;MVR19\u0026#39;][thisState] postsynaptic[\u0026#39;MVR22\u0026#39;][nextState] = -5 + postsynaptic[\u0026#39;MVR22\u0026#39;][thisState] postsynaptic[\u0026#39;VA11\u0026#39;][nextState] = 3 + postsynaptic[\u0026#39;VA11\u0026#39;][thisState] postsynaptic[\u0026#39;VA12\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;VA12\u0026#39;][thisState] postsynaptic[\u0026#39;VB10\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB10\u0026#39;][thisState] postsynaptic[\u0026#39;VB11\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VB11\u0026#39;][thisState] def VD13(): postsynaptic[\u0026#39;AVAR\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;AVAR\u0026#39;][thisState] postsynaptic[\u0026#39;MVL21\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MVL21\u0026#39;][thisState] postsynaptic[\u0026#39;MVL22\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MVL22\u0026#39;][thisState] postsynaptic[\u0026#39;MVL23\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MVL23\u0026#39;][thisState] postsynaptic[\u0026#39;MVR21\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MVR21\u0026#39;][thisState] postsynaptic[\u0026#39;MVR22\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MVR22\u0026#39;][thisState] postsynaptic[\u0026#39;MVR23\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MVR23\u0026#39;][thisState] postsynaptic[\u0026#39;MVR24\u0026#39;][nextState] = -9 + postsynaptic[\u0026#39;MVR24\u0026#39;][thisState] postsynaptic[\u0026#39;PVCL\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCL\u0026#39;][thisState] postsynaptic[\u0026#39;PVCR\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;PVCR\u0026#39;][thisState] postsynaptic[\u0026#39;PVPL\u0026#39;][nextState] = 2 + postsynaptic[\u0026#39;PVPL\u0026#39;][thisState] postsynaptic[\u0026#39;VA12\u0026#39;][nextState] = 1 + postsynaptic[\u0026#39;VA12\u0026#39;][thisState] def createpostsynaptic(): # The PostSynaptic dictionary maintains the accumulated values for # each neuron and muscle. The Accumulated values are initialized to Zero postsynaptic[\u0026#39;ADAL\u0026#39;] = [0,0] postsynaptic[\u0026#39;ADAR\u0026#39;] = [0,0] postsynaptic[\u0026#39;ADEL\u0026#39;] = [0,0] postsynaptic[\u0026#39;ADER\u0026#39;] = [0,0] postsynaptic[\u0026#39;ADFL\u0026#39;] = [0,0] postsynaptic[\u0026#39;ADFR\u0026#39;] = [0,0] postsynaptic[\u0026#39;ADLL\u0026#39;] = [0,0] postsynaptic[\u0026#39;ADLR\u0026#39;] = [0,0] postsynaptic[\u0026#39;AFDL\u0026#39;] = [0,0] postsynaptic[\u0026#39;AFDR\u0026#39;] = [0,0] postsynaptic[\u0026#39;AIAL\u0026#39;] = [0,0] postsynaptic[\u0026#39;AIAR\u0026#39;] = [0,0] postsynaptic[\u0026#39;AIBL\u0026#39;] = [0,0] postsynaptic[\u0026#39;AIBR\u0026#39;] = [0,0] postsynaptic[\u0026#39;AIML\u0026#39;] = [0,0] postsynaptic[\u0026#39;AIMR\u0026#39;] = [0,0] postsynaptic[\u0026#39;AINL\u0026#39;] = [0,0] postsynaptic[\u0026#39;AINR\u0026#39;] = [0,0] postsynaptic[\u0026#39;AIYL\u0026#39;] = [0,0] postsynaptic[\u0026#39;AIYR\u0026#39;] = [0,0] postsynaptic[\u0026#39;AIZL\u0026#39;] = [0,0] postsynaptic[\u0026#39;AIZR\u0026#39;] = [0,0] postsynaptic[\u0026#39;ALA\u0026#39;] = [0,0] postsynaptic[\u0026#39;ALML\u0026#39;] = [0,0] postsynaptic[\u0026#39;ALMR\u0026#39;] = [0,0] postsynaptic[\u0026#39;ALNL\u0026#39;] = [0,0] postsynaptic[\u0026#39;ALNR\u0026#39;] = [0,0] postsynaptic[\u0026#39;AQR\u0026#39;] = [0,0] postsynaptic[\u0026#39;AS1\u0026#39;] = [0,0] postsynaptic[\u0026#39;AS10\u0026#39;] = [0,0] postsynaptic[\u0026#39;AS11\u0026#39;] = [0,0] postsynaptic[\u0026#39;AS2\u0026#39;] = [0,0] postsynaptic[\u0026#39;AS3\u0026#39;] = [0,0] postsynaptic[\u0026#39;AS4\u0026#39;] = [0,0] postsynaptic[\u0026#39;AS5\u0026#39;] = [0,0] postsynaptic[\u0026#39;AS6\u0026#39;] = [0,0] postsynaptic[\u0026#39;AS7\u0026#39;] = [0,0] postsynaptic[\u0026#39;AS8\u0026#39;] = [0,0] postsynaptic[\u0026#39;AS9\u0026#39;] = [0,0] postsynaptic[\u0026#39;ASEL\u0026#39;] = [0,0] postsynaptic[\u0026#39;ASER\u0026#39;] = [0,0] postsynaptic[\u0026#39;ASGL\u0026#39;] = [0,0] postsynaptic[\u0026#39;ASGR\u0026#39;] = [0,0] postsynaptic[\u0026#39;ASHL\u0026#39;] = [0,0] postsynaptic[\u0026#39;ASHR\u0026#39;] = [0,0] postsynaptic[\u0026#39;ASIL\u0026#39;] = [0,0] postsynaptic[\u0026#39;ASIR\u0026#39;] = [0,0] postsynaptic[\u0026#39;ASJL\u0026#39;] = [0,0] postsynaptic[\u0026#39;ASJR\u0026#39;] = [0,0] postsynaptic[\u0026#39;ASKL\u0026#39;] = [0,0] postsynaptic[\u0026#39;ASKR\u0026#39;] = [0,0] postsynaptic[\u0026#39;AUAL\u0026#39;] = [0,0] postsynaptic[\u0026#39;AUAR\u0026#39;] = [0,0] postsynaptic[\u0026#39;AVAL\u0026#39;] = [0,0] postsynaptic[\u0026#39;AVAR\u0026#39;] = [0,0] postsynaptic[\u0026#39;AVBL\u0026#39;] = [0,0] postsynaptic[\u0026#39;AVBR\u0026#39;] = [0,0] postsynaptic[\u0026#39;AVDL\u0026#39;] = [0,0] postsynaptic[\u0026#39;AVDR\u0026#39;] = [0,0] postsynaptic[\u0026#39;AVEL\u0026#39;] = [0,0] postsynaptic[\u0026#39;AVER\u0026#39;] = [0,0] postsynaptic[\u0026#39;AVFL\u0026#39;] = [0,0] postsynaptic[\u0026#39;AVFR\u0026#39;] = [0,0] postsynaptic[\u0026#39;AVG\u0026#39;] = [0,0] postsynaptic[\u0026#39;AVHL\u0026#39;] = [0,0] postsynaptic[\u0026#39;AVHR\u0026#39;] = [0,0] postsynaptic[\u0026#39;AVJL\u0026#39;] = [0,0] postsynaptic[\u0026#39;AVJR\u0026#39;] = [0,0] postsynaptic[\u0026#39;AVKL\u0026#39;] = [0,0] postsynaptic[\u0026#39;AVKR\u0026#39;] = [0,0] postsynaptic[\u0026#39;AVL\u0026#39;] = [0,0] postsynaptic[\u0026#39;AVM\u0026#39;] = [0,0] postsynaptic[\u0026#39;AWAL\u0026#39;] = [0,0] postsynaptic[\u0026#39;AWAR\u0026#39;] = [0,0] postsynaptic[\u0026#39;AWBL\u0026#39;] = [0,0] postsynaptic[\u0026#39;AWBR\u0026#39;] = [0,0] postsynaptic[\u0026#39;AWCL\u0026#39;] = [0,0] postsynaptic[\u0026#39;AWCR\u0026#39;] = [0,0] postsynaptic[\u0026#39;BAGL\u0026#39;] = [0,0] postsynaptic[\u0026#39;BAGR\u0026#39;] = [0,0] postsynaptic[\u0026#39;BDUL\u0026#39;] = [0,0] postsynaptic[\u0026#39;BDUR\u0026#39;] = [0,0] postsynaptic[\u0026#39;CEPDL\u0026#39;] = [0,0] postsynaptic[\u0026#39;CEPDR\u0026#39;] = [0,0] postsynaptic[\u0026#39;CEPVL\u0026#39;] = [0,0] postsynaptic[\u0026#39;CEPVR\u0026#39;] = [0,0] postsynaptic[\u0026#39;DA1\u0026#39;] = [0,0] postsynaptic[\u0026#39;DA2\u0026#39;] = [0,0] postsynaptic[\u0026#39;DA3\u0026#39;] = [0,0] postsynaptic[\u0026#39;DA4\u0026#39;] = [0,0] postsynaptic[\u0026#39;DA5\u0026#39;] = [0,0] postsynaptic[\u0026#39;DA6\u0026#39;] = [0,0] postsynaptic[\u0026#39;DA7\u0026#39;] = [0,0] postsynaptic[\u0026#39;DA8\u0026#39;] = [0,0] postsynaptic[\u0026#39;DA9\u0026#39;] = [0,0] postsynaptic[\u0026#39;DB1\u0026#39;] = [0,0] postsynaptic[\u0026#39;DB2\u0026#39;] = [0,0] postsynaptic[\u0026#39;DB3\u0026#39;] = [0,0] postsynaptic[\u0026#39;DB4\u0026#39;] = [0,0] postsynaptic[\u0026#39;DB5\u0026#39;] = [0,0] postsynaptic[\u0026#39;DB6\u0026#39;] = [0,0] postsynaptic[\u0026#39;DB7\u0026#39;] = [0,0] postsynaptic[\u0026#39;DD1\u0026#39;] = [0,0] postsynaptic[\u0026#39;DD2\u0026#39;] = [0,0] postsynaptic[\u0026#39;DD3\u0026#39;] = [0,0] postsynaptic[\u0026#39;DD4\u0026#39;] = [0,0] postsynaptic[\u0026#39;DD5\u0026#39;] = [0,0] postsynaptic[\u0026#39;DD6\u0026#39;] = [0,0] postsynaptic[\u0026#39;DVA\u0026#39;] = [0,0] postsynaptic[\u0026#39;DVB\u0026#39;] = [0,0] postsynaptic[\u0026#39;DVC\u0026#39;] = [0,0] postsynaptic[\u0026#39;FLPL\u0026#39;] = [0,0] postsynaptic[\u0026#39;FLPR\u0026#39;] = [0,0] postsynaptic[\u0026#39;HSNL\u0026#39;] = [0,0] postsynaptic[\u0026#39;HSNR\u0026#39;] = [0,0] postsynaptic[\u0026#39;I1L\u0026#39;] = [0,0] postsynaptic[\u0026#39;I1R\u0026#39;] = [0,0] postsynaptic[\u0026#39;I2L\u0026#39;] = [0,0] postsynaptic[\u0026#39;I2R\u0026#39;] = [0,0] postsynaptic[\u0026#39;I3\u0026#39;] = [0,0] postsynaptic[\u0026#39;I4\u0026#39;] = [0,0] postsynaptic[\u0026#39;I5\u0026#39;] = [0,0] postsynaptic[\u0026#39;I6\u0026#39;] = [0,0] postsynaptic[\u0026#39;IL1DL\u0026#39;] = [0,0] postsynaptic[\u0026#39;IL1DR\u0026#39;] = [0,0] postsynaptic[\u0026#39;IL1L\u0026#39;] = [0,0] postsynaptic[\u0026#39;IL1R\u0026#39;] = [0,0] postsynaptic[\u0026#39;IL1VL\u0026#39;] = [0,0] postsynaptic[\u0026#39;IL1VR\u0026#39;] = [0,0] postsynaptic[\u0026#39;IL2L\u0026#39;] = [0,0] postsynaptic[\u0026#39;IL2R\u0026#39;] = [0,0] postsynaptic[\u0026#39;IL2DL\u0026#39;] = [0,0] postsynaptic[\u0026#39;IL2DR\u0026#39;] = [0,0] postsynaptic[\u0026#39;IL2VL\u0026#39;] = [0,0] postsynaptic[\u0026#39;IL2VR\u0026#39;] = [0,0] postsynaptic[\u0026#39;LUAL\u0026#39;] = [0,0] postsynaptic[\u0026#39;LUAR\u0026#39;] = [0,0] postsynaptic[\u0026#39;M1\u0026#39;] = [0,0] postsynaptic[\u0026#39;M2L\u0026#39;] = [0,0] postsynaptic[\u0026#39;M2R\u0026#39;] = [0,0] postsynaptic[\u0026#39;M3L\u0026#39;] = [0,0] postsynaptic[\u0026#39;M3R\u0026#39;] = [0,0] postsynaptic[\u0026#39;M4\u0026#39;] = [0,0] postsynaptic[\u0026#39;M5\u0026#39;] = [0,0] postsynaptic[\u0026#39;MANAL\u0026#39;] = [0,0] postsynaptic[\u0026#39;MCL\u0026#39;] = [0,0] postsynaptic[\u0026#39;MCR\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL01\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL02\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL03\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL04\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL05\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL06\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL07\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL08\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL09\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL10\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL11\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL12\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL13\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL14\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL15\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL16\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL17\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL18\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL19\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL20\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL21\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL22\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL23\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDL24\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR01\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR02\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR03\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR04\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR05\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR06\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR07\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR08\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR09\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR10\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR11\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR12\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR13\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR14\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR15\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR16\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR17\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR18\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR19\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR20\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR21\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR22\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR23\u0026#39;] = [0,0] postsynaptic[\u0026#39;MDR24\u0026#39;] = [0,0] postsynaptic[\u0026#39;MI\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL01\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL02\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL03\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL04\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL05\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL06\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL07\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL08\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL09\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL10\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL11\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL12\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL13\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL14\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL15\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL16\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL17\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL18\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL19\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL20\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL21\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL22\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVL23\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR01\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR02\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR03\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR04\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR05\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR06\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR07\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR08\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR09\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR10\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR11\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR12\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR13\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR14\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR15\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR16\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR17\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR18\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR19\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR20\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR21\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR22\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR23\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVR24\u0026#39;] = [0,0] postsynaptic[\u0026#39;MVULVA\u0026#39;] = [0,0] postsynaptic[\u0026#39;NSML\u0026#39;] = [0,0] postsynaptic[\u0026#39;NSMR\u0026#39;] = [0,0] postsynaptic[\u0026#39;OLLL\u0026#39;] = [0,0] postsynaptic[\u0026#39;OLLR\u0026#39;] = [0,0] postsynaptic[\u0026#39;OLQDL\u0026#39;] = [0,0] postsynaptic[\u0026#39;OLQDR\u0026#39;] = [0,0] postsynaptic[\u0026#39;OLQVL\u0026#39;] = [0,0] postsynaptic[\u0026#39;OLQVR\u0026#39;] = [0,0] postsynaptic[\u0026#39;PDA\u0026#39;] = [0,0] postsynaptic[\u0026#39;PDB\u0026#39;] = [0,0] postsynaptic[\u0026#39;PDEL\u0026#39;] = [0,0] postsynaptic[\u0026#39;PDER\u0026#39;] = [0,0] postsynaptic[\u0026#39;PHAL\u0026#39;] = [0,0] postsynaptic[\u0026#39;PHAR\u0026#39;] = [0,0] postsynaptic[\u0026#39;PHBL\u0026#39;] = [0,0] postsynaptic[\u0026#39;PHBR\u0026#39;] = [0,0] postsynaptic[\u0026#39;PHCL\u0026#39;] = [0,0] postsynaptic[\u0026#39;PHCR\u0026#39;] = [0,0] postsynaptic[\u0026#39;PLML\u0026#39;] = [0,0] postsynaptic[\u0026#39;PLMR\u0026#39;] = [0,0] postsynaptic[\u0026#39;PLNL\u0026#39;] = [0,0] postsynaptic[\u0026#39;PLNR\u0026#39;] = [0,0] postsynaptic[\u0026#39;PQR\u0026#39;] = [0,0] postsynaptic[\u0026#39;PVCL\u0026#39;] = [0,0] postsynaptic[\u0026#39;PVCR\u0026#39;] = [0,0] postsynaptic[\u0026#39;PVDL\u0026#39;] = [0,0] postsynaptic[\u0026#39;PVDR\u0026#39;] = [0,0] postsynaptic[\u0026#39;PVM\u0026#39;] = [0,0] postsynaptic[\u0026#39;PVNL\u0026#39;] = [0,0] postsynaptic[\u0026#39;PVNR\u0026#39;] = [0,0] postsynaptic[\u0026#39;PVPL\u0026#39;] = [0,0] postsynaptic[\u0026#39;PVPR\u0026#39;] = [0,0] postsynaptic[\u0026#39;PVQL\u0026#39;] = [0,0] postsynaptic[\u0026#39;PVQR\u0026#39;] = [0,0] postsynaptic[\u0026#39;PVR\u0026#39;] = [0,0] postsynaptic[\u0026#39;PVT\u0026#39;] = [0,0] postsynaptic[\u0026#39;PVWL\u0026#39;] = [0,0] postsynaptic[\u0026#39;PVWR\u0026#39;] = [0,0] postsynaptic[\u0026#39;RIAL\u0026#39;] = [0,0] postsynaptic[\u0026#39;RIAR\u0026#39;] = [0,0] postsynaptic[\u0026#39;RIBL\u0026#39;] = [0,0] postsynaptic[\u0026#39;RIBR\u0026#39;] = [0,0] postsynaptic[\u0026#39;RICL\u0026#39;] = [0,0] postsynaptic[\u0026#39;RICR\u0026#39;] = [0,0] postsynaptic[\u0026#39;RID\u0026#39;] = [0,0] postsynaptic[\u0026#39;RIFL\u0026#39;] = [0,0] postsynaptic[\u0026#39;RIFR\u0026#39;] = [0,0] postsynaptic[\u0026#39;RIGL\u0026#39;] = [0,0] postsynaptic[\u0026#39;RIGR\u0026#39;] = [0,0] postsynaptic[\u0026#39;RIH\u0026#39;] = [0,0] postsynaptic[\u0026#39;RIML\u0026#39;] = [0,0] postsynaptic[\u0026#39;RIMR\u0026#39;] = [0,0] postsynaptic[\u0026#39;RIPL\u0026#39;] = [0,0] postsynaptic[\u0026#39;RIPR\u0026#39;] = [0,0] postsynaptic[\u0026#39;RIR\u0026#39;] = [0,0] postsynaptic[\u0026#39;RIS\u0026#39;] = [0,0] postsynaptic[\u0026#39;RIVL\u0026#39;] = [0,0] postsynaptic[\u0026#39;RIVR\u0026#39;] = [0,0] postsynaptic[\u0026#39;RMDDL\u0026#39;] = [0,0] postsynaptic[\u0026#39;RMDDR\u0026#39;] = [0,0] postsynaptic[\u0026#39;RMDL\u0026#39;] = [0,0] postsynaptic[\u0026#39;RMDR\u0026#39;] = [0,0] postsynaptic[\u0026#39;RMDVL\u0026#39;] = [0,0] postsynaptic[\u0026#39;RMDVR\u0026#39;] = [0,0] postsynaptic[\u0026#39;RMED\u0026#39;] = [0,0] postsynaptic[\u0026#39;RMEL\u0026#39;] = [0,0] postsynaptic[\u0026#39;RMER\u0026#39;] = [0,0] postsynaptic[\u0026#39;RMEV\u0026#39;] = [0,0] postsynaptic[\u0026#39;RMFL\u0026#39;] = [0,0] postsynaptic[\u0026#39;RMFR\u0026#39;] = [0,0] postsynaptic[\u0026#39;RMGL\u0026#39;] = [0,0] postsynaptic[\u0026#39;RMGR\u0026#39;] = [0,0] postsynaptic[\u0026#39;RMHL\u0026#39;] = [0,0] postsynaptic[\u0026#39;RMHR\u0026#39;] = [0,0] postsynaptic[\u0026#39;SAADL\u0026#39;] = [0,0] postsynaptic[\u0026#39;SAADR\u0026#39;] = [0,0] postsynaptic[\u0026#39;SAAVL\u0026#39;] = [0,0] postsynaptic[\u0026#39;SAAVR\u0026#39;] = [0,0] postsynaptic[\u0026#39;SABD\u0026#39;] = [0,0] postsynaptic[\u0026#39;SABVL\u0026#39;] = [0,0] postsynaptic[\u0026#39;SABVR\u0026#39;] = [0,0] postsynaptic[\u0026#39;SDQL\u0026#39;] = [0,0] postsynaptic[\u0026#39;SDQR\u0026#39;] = [0,0] postsynaptic[\u0026#39;SIADL\u0026#39;] = [0,0] postsynaptic[\u0026#39;SIADR\u0026#39;] = [0,0] postsynaptic[\u0026#39;SIAVL\u0026#39;] = [0,0] postsynaptic[\u0026#39;SIAVR\u0026#39;] = [0,0] postsynaptic[\u0026#39;SIBDL\u0026#39;] = [0,0] postsynaptic[\u0026#39;SIBDR\u0026#39;] = [0,0] postsynaptic[\u0026#39;SIBVL\u0026#39;] = [0,0] postsynaptic[\u0026#39;SIBVR\u0026#39;] = [0,0] postsynaptic[\u0026#39;SMBDL\u0026#39;] = [0,0] postsynaptic[\u0026#39;SMBDR\u0026#39;] = [0,0] postsynaptic[\u0026#39;SMBVL\u0026#39;] = [0,0] postsynaptic[\u0026#39;SMBVR\u0026#39;] = [0,0] postsynaptic[\u0026#39;SMDDL\u0026#39;] = [0,0] postsynaptic[\u0026#39;SMDDR\u0026#39;] = [0,0] postsynaptic[\u0026#39;SMDVL\u0026#39;] = [0,0] postsynaptic[\u0026#39;SMDVR\u0026#39;] = [0,0] postsynaptic[\u0026#39;URADL\u0026#39;] = [0,0] postsynaptic[\u0026#39;URADR\u0026#39;] = [0,0] postsynaptic[\u0026#39;URAVL\u0026#39;] = [0,0] postsynaptic[\u0026#39;URAVR\u0026#39;] = [0,0] postsynaptic[\u0026#39;URBL\u0026#39;] = [0,0] postsynaptic[\u0026#39;URBR\u0026#39;] = [0,0] postsynaptic[\u0026#39;URXL\u0026#39;] = [0,0] postsynaptic[\u0026#39;URXR\u0026#39;] = [0,0] postsynaptic[\u0026#39;URYDL\u0026#39;] = [0,0] postsynaptic[\u0026#39;URYDR\u0026#39;] = [0,0] postsynaptic[\u0026#39;URYVL\u0026#39;] = [0,0] postsynaptic[\u0026#39;URYVR\u0026#39;] = [0,0] postsynaptic[\u0026#39;VA1\u0026#39;] = [0,0] postsynaptic[\u0026#39;VA10\u0026#39;] = [0,0] postsynaptic[\u0026#39;VA11\u0026#39;] = [0,0] postsynaptic[\u0026#39;VA12\u0026#39;] = [0,0] postsynaptic[\u0026#39;VA2\u0026#39;] = [0,0] postsynaptic[\u0026#39;VA3\u0026#39;] = [0,0] postsynaptic[\u0026#39;VA4\u0026#39;] = [0,0] postsynaptic[\u0026#39;VA5\u0026#39;] = [0,0] postsynaptic[\u0026#39;VA6\u0026#39;] = [0,0] postsynaptic[\u0026#39;VA7\u0026#39;] = [0,0] postsynaptic[\u0026#39;VA8\u0026#39;] = [0,0] postsynaptic[\u0026#39;VA9\u0026#39;] = [0,0] postsynaptic[\u0026#39;VB1\u0026#39;] = [0,0] postsynaptic[\u0026#39;VB10\u0026#39;] = [0,0] postsynaptic[\u0026#39;VB11\u0026#39;] = [0,0] postsynaptic[\u0026#39;VB2\u0026#39;] = [0,0] postsynaptic[\u0026#39;VB3\u0026#39;] = [0,0] postsynaptic[\u0026#39;VB4\u0026#39;] = [0,0] postsynaptic[\u0026#39;VB5\u0026#39;] = [0,0] postsynaptic[\u0026#39;VB6\u0026#39;] = [0,0] postsynaptic[\u0026#39;VB7\u0026#39;] = [0,0] postsynaptic[\u0026#39;VB8\u0026#39;] = [0,0] postsynaptic[\u0026#39;VB9\u0026#39;] = [0,0] postsynaptic[\u0026#39;VC1\u0026#39;] = [0,0] postsynaptic[\u0026#39;VC2\u0026#39;] = [0,0] postsynaptic[\u0026#39;VC3\u0026#39;] = [0,0] postsynaptic[\u0026#39;VC4\u0026#39;] = [0,0] postsynaptic[\u0026#39;VC5\u0026#39;] = [0,0] postsynaptic[\u0026#39;VC6\u0026#39;] = [0,0] postsynaptic[\u0026#39;VD1\u0026#39;] = [0,0] postsynaptic[\u0026#39;VD10\u0026#39;] = [0,0] postsynaptic[\u0026#39;VD11\u0026#39;] = [0,0] postsynaptic[\u0026#39;VD12\u0026#39;] = [0,0] postsynaptic[\u0026#39;VD13\u0026#39;] = [0,0] postsynaptic[\u0026#39;VD2\u0026#39;] = [0,0] postsynaptic[\u0026#39;VD3\u0026#39;] = [0,0] postsynaptic[\u0026#39;VD4\u0026#39;] = [0,0] postsynaptic[\u0026#39;VD5\u0026#39;] = [0,0] postsynaptic[\u0026#39;VD6\u0026#39;] = [0,0] postsynaptic[\u0026#39;VD7\u0026#39;] = [0,0] postsynaptic[\u0026#39;VD8\u0026#39;] = [0,0] postsynaptic[\u0026#39;VD9\u0026#39;] = [0,0] #global postsynapticNext = copy.deepcopy(postsynaptic) def motorcontrol(): global accumright global accumleft # accumulate left and right muscles and the accumulated values are # used to move the left and right motors of the robot for pscheck in postsynaptic: if pscheck in musDleft or pscheck in musVleft: accumleft += postsynaptic[pscheck][thisState] postsynaptic[pscheck][thisState] = 0 #Both states have to be set to 0 once the muscle is fired, or #postsynaptic[pscheck][nextState] = 0 # it will keep returning beyond the threshold within one iteration. elif pscheck in musDright or pscheck in musVright: accumright += postsynaptic[pscheck][thisState] postsynaptic[pscheck][thisState] = 0 #postsynaptic[pscheck][nextState] = 0 # We turn the wheels according to the motor weight accumulation new_speed = abs(accumleft) + abs(accumright) if new_speed \u0026gt; 150: new_speed = 200 elif new_speed \u0026lt; 75: new_speed = 170 print \u0026#34;Left: \u0026#34;, accumleft, \u0026#34;Right:\u0026#34;, accumright, \u0026#34;Speed: \u0026#34;, new_speed ## Start Commented section set_speed(new_speed) if accumleft == 0 and accumright == 0: stop() elif accumright \u0026lt;= 0 and accumleft \u0026lt; 0: set_speed(200) turnratio = float(accumright) / float(accumleft) # print \u0026#34;Turn Ratio: \u0026#34;, turnratio if turnratio \u0026lt;= 0.6: left_rot() time.sleep(0.8) elif turnratio \u0026gt;= 2: right_rot() time.sleep(0.8) bwd() time.sleep(0.5) elif accumright \u0026lt;= 0 and accumleft \u0026gt;= 0: right_rot() time.sleep(0.8) elif accumright \u0026gt;= 0 and accumleft \u0026lt;= 0: left_rot() time.sleep(0.8) elif accumright \u0026gt;= 0 and accumleft \u0026gt; 0: turnratio = float(accumright) / float(accumleft) # print \u0026#34;Turn Ratio: \u0026#34;, turnratio if turnratio \u0026lt;= 0.6: left_rot() time.sleep(0.8) elif turnratio \u0026gt;= 2: right_rot() time.sleep(0.8) fwd() time.sleep(0.5) else: stop() ## End Commented section accumleft = 0 accumright = 0 time.sleep(0.5) def dendriteAccumulate(dneuron): f = eval(dneuron) f() def fireNeuron(fneuron): # The threshold has been exceeded and we fire the neurite if fneuron != \u0026#34;MVULVA\u0026#34;: f = eval(fneuron) f() def runconnectome(): # Each time a set of neuron is stimulated, this method will execute # The weigted values are accumulated in the PostSynaptic array # Once the accumulation is read, we see what neurons are greater # then the threshold and fire the neuron or muscle that has exceeded # the threshold global thisState global nextState for ps in postsynaptic: if ps[:3] not in muscles and abs(postsynaptic[ps][thisState]) \u0026gt; threshold: fireNeuron(ps) postsynaptic[ps] = [0,0] motorcontrol() thisState,nextState=nextState,thisState # Create the dictionary createpostsynaptic() tch=0 set_speed(200) tfood = 0 try: ### Here is where you would put in a method to stimulate the neurons ### ### We stimulate chemosensory neurons constantly unless nose touch ### ### (sonar) is stimulated and then we fire nose touch neurites ### ### Use CNTRL-C to stop the program while True: ## Start comment - use a fixed value if you want to stimulte nose touch ## use something like \u0026#34;dist = 27\u0026#34; if you want to stop nose stimulation sens = BrickPi.Sensor[PORT_3] BrickPiUpdateValues() ## End Comment #Do we need to switch states at the end of each loop? No, this is done inside the runconnectome() #function, called inside each loop. if sens \u0026lt; 10 or sens==22: print \u0026#34;OBSTACLE (Nose Touch)\u0026#34;, tch dendriteAccumulate(\u0026#34;FLPR\u0026#34;) dendriteAccumulate(\u0026#34;FLPL\u0026#34;) dendriteAccumulate(\u0026#34;ASHL\u0026#34;) dendriteAccumulate(\u0026#34;ASHR\u0026#34;) dendriteAccumulate(\u0026#34;IL1VL\u0026#34;) dendriteAccumulate(\u0026#34;IL1VR\u0026#34;) dendriteAccumulate(\u0026#34;OLQDL\u0026#34;) dendriteAccumulate(\u0026#34;OLQDR\u0026#34;) dendriteAccumulate(\u0026#34;OLQVR\u0026#34;) dendriteAccumulate(\u0026#34;OLQVL\u0026#34;) runconnectome() else: if tfood \u0026lt; 2: print \u0026#34;FOOD\u0026#34; print (thisState) dendriteAccumulate(\u0026#34;ADFL\u0026#34;) dendriteAccumulate(\u0026#34;ADFR\u0026#34;) dendriteAccumulate(\u0026#34;ASGR\u0026#34;) dendriteAccumulate(\u0026#34;ASGL\u0026#34;) dendriteAccumulate(\u0026#34;ASIL\u0026#34;) dendriteAccumulate(\u0026#34;ASIR\u0026#34;) dendriteAccumulate(\u0026#34;ASJR\u0026#34;) dendriteAccumulate(\u0026#34;ASJL\u0026#34;) runconnectome() #time.sleep(5) tfood += 0.5 if (tfood \u0026gt; 20): tfood = 0 except KeyboardInterrupt: ## Start Comment stop() print speed print tch ## End Comment print \u0026#34;Ctrl+C detected. Program Stopped!\u0026#34; for pscheck in postsynaptic: print (pscheck,\u0026#39; \u0026#39;,postsynaptic[pscheck][0],\u0026#39; \u0026#39;,postsynaptic[pscheck][1])   ","date":"2016-08-20T00:00:00Z","image":"https://slc.is/images/openWorm.webp","permalink":"https://slc.is/archive/raspberry-pi-and-caenorhabditis-elegans/","title":"Raspberry Pi and Caenorhabditis Elegans"}]