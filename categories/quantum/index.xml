<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quantum on SLC is</title><link>https://slc.is/categories/quantum/</link><description>Recent content in Quantum on SLC is</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 23 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://slc.is/categories/quantum/index.xml" rel="self" type="application/rss+xml"/><item><title>Generating a PGP Key</title><link>https://slc.is/archive/pgp/</link><pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate><guid>https://slc.is/archive/pgp/</guid><description>&lt;img src="https://slc.is/images/pgp.webp" alt="Featured image of post Generating a PGP Key" />&lt;p>This is an extreme guide to generating a PGP key. A simple tutorial will suffice; however, this will help generate the most secure key possible.&lt;/p>
&lt;h1 id="quantum-background">Quantum Background&lt;/h1>
&lt;p>The NIST compared the &lt;a class="link" href="https://csrc.nist.gov/CSRC/media/Presentations/NIST-Status-Update-on-Elliptic-Curves-and-Post-Qua/images-media/moody-dustin-threshold-crypto-workshop-March-2019.pdf" target="_blank" rel="noopener"
>security of RSA and ECC keys&lt;/a> and concluded that, with sufficient lengths in key complexity, either standard will suffice.&lt;/p>
&lt;p>Shor&amp;rsquo;s algorithm factors coprime numbers, thus is able to recreate the private key to any RSA-generated public key. This NIST paper, however, asserts that Grover&amp;rsquo;s algorithm can be used to recreate the private key to any ECC-generated public key. While true, this is the same as a brute-force solution since Grover&amp;rsquo;s search would still need $\sqrt{N}$ qubits to find the private key. Shor&amp;rsquo;s algorithm has a complexity of around $O(\log{(N)}^3)$ while Grover&amp;rsquo;s has a complexity of $O(\sqrt{N})$.&lt;/p>
&lt;p>Considering the difference in algorithmic complexity between Shor&amp;rsquo;s and Grover&amp;rsquo;s algorithms, Shor&amp;rsquo;s poses a more significant threat to RSA encryption than Grover&amp;rsquo;s does to Ed25519. Because of this, I recommend using Ed25519 for a PGP key pair. There are some unsupported theories that elliptic curve cryptography is not secure, but no evidence has been provided for this whatsoever.&lt;/p>
&lt;h1 id="truly-random-key-seeds">Truly Random Key Seeds&lt;/h1>
&lt;p>Since this post is already looking ahead many decades, the next recommendation will be seeding more entropy into the PRNG that is used to generate the PGP key pair. The elliptic curve generation will pick a random slope for a line to intersect the elliptic curve.&lt;/p>
&lt;p>&lt;img src="https://slc.is/images/ecc.webp"
loading="lazy"
alt="https://www.desmos.com/calculator/hhqdcaiv7p"
>&lt;/p>
&lt;p>In theory, unless your computer is using a truly random source of entropy, the slope of the line could be rederived and the private key could be recreated. This is absurdly unlikely, but the solution is easily implemented, and the time it takes to generate the private key is negligible considering the duration you&amp;rsquo;ll use the key.&lt;/p>
&lt;p>Using a true random source of entropy could be counting the number of times a geiger counter clicks in a given time frame, or using a hardware random source of entropy like the &lt;a class="link" href="https://onerng.info/" target="_blank" rel="noopener"
>OneRNG V3&lt;/a>. I already have a OneRNG USB, so I&amp;rsquo;ll seed my random numbers with that.&lt;/p>
&lt;h1 id="generating-a-pgp-key-pair">Generating a PGP Key Pair&lt;/h1>
&lt;p>First, install &lt;a class="link" href="https://gnupg.org/" target="_blank" rel="noopener"
>GnuPG&lt;/a>. This is a free software that can be used to generate PGP keys. It&amp;rsquo;s best to use an open source and offline tool to generate keys since websites and servers could use a variety of methods to store or recreate your private key. Additionally, using a device you know is secure and private is a necessity. A simple way to handle trust is to use a live USB, then assume that there&amp;rsquo;s no hardware-level surveillance on your device.&lt;/p>
&lt;p>On the download page, it supports common operating systems like Windows, MacOS, and Linux, as well as other platforms.&lt;/p>
&lt;h2 id="seed-the-prng">Seed the PRNG&lt;/h2>
&lt;p>Find what entropy source GnuPG uses on your operating system. On Linux and MacOS, for example, it&amp;rsquo;s &lt;code>/dev/random&lt;/code>. To add entropy to the PRNG, use something like the following command:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">rngd -r /path/to/true/randomness
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="run-gnupg">Run GnuPG&lt;/h2>
&lt;p>Once you have installed GnuPG, run &lt;code>gpg --full-generate-key&lt;/code> to generate a key pair.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">~$ gpg --full-generate-key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gpg &lt;span class="o">(&lt;/span>GnuPG&lt;span class="o">)&lt;/span> 2.3.4&lt;span class="p">;&lt;/span> Copyright &lt;span class="o">(&lt;/span>C&lt;span class="o">)&lt;/span> &lt;span class="m">2021&lt;/span> Free Software Foundation, Inc.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">This is free software: you are free to change and redistribute it.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">There is NO WARRANTY, to the extent permitted by law.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Please &lt;span class="k">select&lt;/span> what kind of key you want:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>1&lt;span class="o">)&lt;/span> RSA and RSA
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>2&lt;span class="o">)&lt;/span> DSA and Elgamal
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>3&lt;span class="o">)&lt;/span> DSA &lt;span class="o">(&lt;/span>sign only&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>4&lt;span class="o">)&lt;/span> RSA &lt;span class="o">(&lt;/span>sign only&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>9&lt;span class="o">)&lt;/span> ECC &lt;span class="o">(&lt;/span>sign and encrypt&lt;span class="o">)&lt;/span> *default*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>10&lt;span class="o">)&lt;/span> ECC &lt;span class="o">(&lt;/span>sign only&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>14&lt;span class="o">)&lt;/span> Existing key from card
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Your selection? &lt;span class="m">9&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Please &lt;span class="k">select&lt;/span> which elliptic curve you want:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>1&lt;span class="o">)&lt;/span> Curve &lt;span class="m">25519&lt;/span> *default*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>4&lt;span class="o">)&lt;/span> NIST P-384
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">(&lt;/span>6&lt;span class="o">)&lt;/span> Brainpool P-256
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Your selection? &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Please specify how long the key should be valid.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">0&lt;/span> &lt;span class="o">=&lt;/span> key does not expire
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;n&amp;gt; &lt;span class="o">=&lt;/span> key expires in n days
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;n&amp;gt;w &lt;span class="o">=&lt;/span> key expires in n weeks
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;n&amp;gt;m &lt;span class="o">=&lt;/span> key expires in n months
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;n&amp;gt;y &lt;span class="o">=&lt;/span> key expires in n years
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Key is valid &lt;span class="k">for&lt;/span>? &lt;span class="o">(&lt;/span>0&lt;span class="o">)&lt;/span> &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Key does not expire at all
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Is this correct? &lt;span class="o">(&lt;/span>y/N&lt;span class="o">)&lt;/span> y
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">GnuPG needs to construct a user ID to identify your key.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Real name: name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Email address: name@example.org
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Comment: hello, world
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">You selected this USER-ID:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;name (hello, world) &amp;lt;name@example.org&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Change &lt;span class="o">(&lt;/span>N&lt;span class="o">)&lt;/span>ame, &lt;span class="o">(&lt;/span>C&lt;span class="o">)&lt;/span>omment, &lt;span class="o">(&lt;/span>E&lt;span class="o">)&lt;/span>mail or &lt;span class="o">(&lt;/span>O&lt;span class="o">)&lt;/span>kay/&lt;span class="o">(&lt;/span>Q&lt;span class="o">)&lt;/span>uit? O
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">We need to generate a lot of random bytes. It is a good idea to perform
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">some other action &lt;span class="o">(&lt;/span>&lt;span class="nb">type&lt;/span> on the keyboard, move the mouse, utilize the
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">disks&lt;span class="o">)&lt;/span> during the prime generation&lt;span class="p">;&lt;/span> this gives the random number
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">generator a better chance to gain enough entropy.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gpg: directory &lt;span class="s1">&amp;#39;~/name/.gnupg/openpgp-revocs.d&amp;#39;&lt;/span> created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gpg: revocation certificate stored as &lt;span class="s1">&amp;#39;~/name/.gnupg/openpgp-revocs.d/ABCDEFGHIJKLMNOPQRSTUVWXYANDZ01223456789.rev&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public and secret key created and signed.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pub ed25519 2022-03-24 &lt;span class="o">[&lt;/span>SC&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ABCDEFGHIJKLMNOPQRSTUVWXYANDZ01223456789
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">uid name &lt;span class="o">(&lt;/span>hello, world&lt;span class="o">)&lt;/span> &amp;lt;name@example.org&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sub cv25519 2022-03-24 &lt;span class="o">[&lt;/span>E&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>It&amp;rsquo;s reassuring to see that the recommended settings are what we decided on too! Before moving on, confirm that you now have a PGP key pair. Run &lt;code>--list-keys&lt;/code> to view the generated key information.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">~$ gpg --list-keys
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gpg: checking the trustdb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gpg: marginals needed: &lt;span class="m">3&lt;/span> completes needed: &lt;span class="m">1&lt;/span> trust model: pgp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gpg: depth: &lt;span class="m">0&lt;/span> valid: &lt;span class="m">1&lt;/span> signed: &lt;span class="m">0&lt;/span> trust: 0-, 0q, 0n, 0m, 0f, 1u
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~/name/.gnupg/pubring.kbx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pub ed25519 2022-03-24 &lt;span class="o">[&lt;/span>SC&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ABCDEFGHIJKLMNOPQRSTUVWXYANDZ01223456789
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">uid &lt;span class="o">[&lt;/span>ultimate&lt;span class="o">]&lt;/span> name &lt;span class="o">(&lt;/span>hello, world&lt;span class="o">)&lt;/span> &amp;lt;name@example.org&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sub cv25519 2022-03-24 &lt;span class="o">[&lt;/span>E&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The &lt;code>KEY-ID&lt;/code> is the 40 character long fingerprint for the key pair. That ID will be used to specify the key when using it.&lt;/p>
&lt;h1 id="distributing-your-public-key">Distributing your &lt;strong>public&lt;/strong> key&lt;/h1>
&lt;p>You might&amp;rsquo;ve seen people link their public key when sharing their email or other contact services. You can distribute your public key in any way you&amp;rsquo;d like, but a good way to do this is to use a PGP key server.&lt;/p>
&lt;p>There are a few key servers out there, but the most popular are:&lt;/p>
&lt;ol>
&lt;li>pgp.mit.edu&lt;/li>
&lt;li>keyserver.ubuntu.com&lt;/li>
&lt;li>keybase.io&lt;/li>
&lt;li>keys.openpgp.org&lt;/li>
&lt;li>keys.mailvelope.com&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>Key servers use pooling to distribute keys, so you can tend to upload a key once and have it distributed to many people.&lt;/p>
&lt;/blockquote>
&lt;p>By running &lt;code>gpg --send-keys&lt;/code> on your key pair, you can export your public key.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">gpg --send-keys ABCDEFGHIJKLMNOPQRSTUVWXYANDZ01223456789
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This will export your public key to &lt;a class="link" href="https://keys.openpgp.org/" target="_blank" rel="noopener"
>keys.openpgp.org&lt;/a>. The other sites also have an upload pages, so feel free to upload there as well.&lt;/p>
&lt;p>To easily copy your public key, you can use &lt;code>gpg --export --armor&lt;/code>. The &lt;code>--armor&lt;/code> flag will export the key in ASCII armored format.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">~$ gpg --export --armor ABCDEFGHIJKLMNOPQRSTUVWXYANDZ01223456789
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-----BEGIN PGP PUBLIC KEY BLOCK-----
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">xjMEYkAMlhYJKwYBBAHaRw8BAQdAija76hmp8YHmr0zHw+Qv1nMNsrqcsRQW
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cqSlqOEoHCrNHVNwZW5jZXIgQ2h1cmNoaWxsIDxtZUBzbGMuaXM+wqoEExYK
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ADsWIQQQICP7jXDvYysbVVUKmHynkTkZlQUCYkAMlgIbAwULCQgHAgMiAgEG
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FQoJCAsCAxYCAQIeBwIXgAAhCRAKmHynkTkZlRYhBBAgI/uNcO9jKxtVVQqY
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fKeRORmVyFAA/3tWetkYc5XKA8yDYyAeZk8cI0Cy7+1Afm/p2mQQnzXvAQCq
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">QzdsI4owKGbHudz/DKsVKkWDCZ1yfg0FRq52qMnGAM0jU3BlbmNlciBDaHVy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Y2hpbGwgPHNwZW5jZUBkdWNrLmNvbT7CqgQTFgoAOxYhBBAgI/uNcO9jKxtV
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">VQqYfKeRORmVBQJiQBKFAhsDBQsJCAcCAyICAQYVCgkICwIDFgIBAh4HAheA
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ACEJEAqYfKeRORmVFiEEECAj+41w72MrG1VVCph8p5E5GZX5vwEAlCwXoyAp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3bjz6x+rH1N7lqB/oIW4uPwc2bEKu43+POQA/1iqNPNTHjNsewlF19pGLljA
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">xn946DQzWw02ulFqz5sKzjgEYkAMlhIKKwYBBAGXVQEFAQEHQNfziQppiMhw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ieGfPpIMopxsvTe/scnI6G7WhoMUPbNEAwEIB8KPBBgWCgAgFiEEECAj+41w
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">72MrG1VVCph8p5E5GZUFAmJADJYCGwwAIQkQCph8p5E5GZUWIQQQICP7jXDv
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">YysbVVUKmHynkTkZlf+MAQCQByuimb5r1gEPoPQ0+dg0GQP16WYE/EF4WhC3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kJ8QuQD+OW350m6xUU9djl7gmlnBeoNZB7EyoPuGs301bL1v6A8&lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">=&lt;/span>QfAK
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-----END PGP PUBLIC KEY BLOCK-----
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="encrypting-and-decrypting-data">Encrypting and Decrypting Data&lt;/h2>
&lt;p>To encrypt, run &lt;code>--encrypt&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">gpg --encrypt --recipient ABCDEFGHIJKLMNOPQRSTUVWXYANDZ01223456789 /path/to/file
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>That will output a file named &lt;code>/path/to/file.gpg&lt;/code>. Only you can decrypt that file with your private key. To do that use &lt;code>--decrypt&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">gpg --decrypt --recipient ABCDEFGHIJKLMNOPQRSTUVWXYANDZ01223456789 /path/to/file.gpg &amp;gt; /path/to/file
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="backing-up-your-private-key">Backing up your private key&lt;/h1>
&lt;p>To backup your private key, run &lt;code>--export-secret-keys&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">~$ gpg --export-secret-key --armor ABCDEFGHIJKLMNOPQRSTUVWXYANDZ01223456789
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-----BEGIN PGP PRIVATE KEY BLOCK-----
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lFgEYjw1xhYJKwYBBAHaRw8BAQdAwl9GSoOR4E7wUpe1A+Evd+ViiavBUvpvw4nf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">JLVtm3EAAQCTHWqtqmI1D6ODctaR3UGOLLsGZjUe1WTPP5BDQkVC9w5DtCZuYW1l
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ciAoaGVsbG8sIHdvcmwpIDxuYW1lQGV4YW1wbGUuY29tPoiUBBMWCgA8FiEE6Vs9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vE0RXucZDtSi9KkIHalB430FAmI8NcYCGwMFCwkIBwIDIgIBBhUKCQgLAgQWAgMB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Ah4HAheAAAoJEPSpCB2pQeN967EBANgog1cMEPpNYjXTZzSiOFSK4BmlwV1vghTB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0xq7cLv4APsEmzZK8djumlIAD1Ur0/tgoXVk3Mt6TFibmOpMec2IA5xdBGI8NcYS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CisGAQQBl1UBBQEBB0BAsR6gXGOwPgWrfmltMAh7EIZ5J8GYE206qsVhwXzhdgMB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CAcAAP9G0xraBqKnhlP5pkjuaxl/qOS+5m4NtJZm4YeJ/o91qBMCiHgEGBYKACAW
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">IQTpWz28TRFe5xkO1KL0qQgdqUHjfQUCYjw1xgIbDAAKCRD0qQgdqUHjfR1RAP9R
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Lm53gMSLaAAyonnsV49TSK8Lunv9ochw4LlmDc0/wQD8CUO687SXXpAVrJCvcbqu
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">aXfYuB1XxWxcgI5phcv/VAw&lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">=&lt;/span>LAxH
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-----END PGP PRIVATE KEY BLOCK-----
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Again, you can pipe this into a file or copy it into a notebook.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>PGP key generation can be as simple (from generating and managing keys from within Mailvelope) to as complex as you&amp;rsquo;d like. The benefit with more engaged generation is you only need to do it once. After the first time, you can use the same key for any communication. I hope this tutorial is helpful in getting started with or improving your PGP keys.&lt;/p></description></item><item><title>Degrees of Randomness and the Law of Large Numbers</title><link>https://slc.is/archive/degrees-of-randomness-and-the-law-of-large-numbers/</link><pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate><guid>https://slc.is/archive/degrees-of-randomness-and-the-law-of-large-numbers/</guid><description>&lt;img src="https://slc.is/images/randomCoefficients.webp" alt="Featured image of post Degrees of Randomness and the Law of Large Numbers" />&lt;p>In a previous post comparing quantum and avalanche diode methods of true random number generation, an interesting pattern emerged. The quantum random numbers would pass more STS tests than avalanche diode random numbers. Seemingly, the quantum RNG converges to a mean before the diode RNG.&lt;/p>
&lt;p>This should not be the case since both methods produce true random numbers, so this post will be exploring if this is actually occurring and why.&lt;/p>
&lt;h2 id="code">Code&lt;/h2>
&lt;p>We&amp;rsquo;ll be using &lt;code>C&lt;/code> to do this analysis since it&amp;rsquo;s fast enough for the scale I need.&lt;/p>
&lt;p>The first task will be opening a file of random data by variable amounts. The &lt;a class="link" href="https://pubs.opengroup.org/onlinepubs/9699919799/functions/fread.html#tag_16_164" target="_blank" rel="noopener"
>&lt;code>fread&lt;/code>&lt;/a> command takes a filename and number of bytes to read as arguments, so that&amp;rsquo;ll work well.&lt;/p>
&lt;p>Specifically, the file (let&amp;rsquo;s call it &lt;code>random&lt;/code>) needs to be read in incrementing amounts, so the code will look like this:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define MAX_READ 5
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define FILE_NAME &amp;#34;random&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">…&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">stream&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">FILE_NAME&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;r&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">bytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">bytes&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">MAX_READ&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">bytes&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">bytes&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">bytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This is storing some number of bytes in a buffer array. Now we can iterate through that array to determine the mean. Keep in mind that the theoretical mean is 0.5, so this is eventually going to compare the rates at which quantum and avalanche diode RNGs converge to the theoretical mean.&lt;/p>
&lt;p>We&amp;rsquo;re iterating through 8 bits at a time, so to find each binary mean, we&amp;rsquo;ll count the number of ones in binary and divide by 8.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kr">inline&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="nf">binaryMean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// https://stackoverflow.com/a/698183
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">byte&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mo">01001001001ULL&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mo">042104210421ULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%&lt;/span> &lt;span class="mo">017&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mf">8.0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The remainder is just reading multiple files and parsing the data as a &lt;!-- raw HTML omitted -->CSV&lt;!-- raw HTML omitted -->.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define MAX_READ 1000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">long&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">MAX_READ&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kr">inline&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="nf">binaryMean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">byte&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">byte&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mo">01001001001ULL&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mo">042104210421ULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mo">017&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mf">8.0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">analyzeFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">filename&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">filenum&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">stream&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">filename&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;r&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">bytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">bytes&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">MAX_READ&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">bytes&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">bytes&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">bytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">long&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">mean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">bytes&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mean&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">binaryMean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">filenum&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">bytes&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mean&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">bytes&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fclose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">analyzeFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;../../randomReports/quantum&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">analyzeFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;../../randomReports/avalanche&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Theoretical Mean,Quantum Mean,Avalanche Diode Mean&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">MAX_READ&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;0.5,%Lf,%Lf&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The astute among us 🔴 will notice that I&amp;rsquo;m printing the data to stout; however, I&amp;rsquo;ll actually pull a *nix and piping the output to gnuplot.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">gcc -c -o main.o main.c &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> gcc ./main.o -o main &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> ./main &lt;span class="p">|&lt;/span> cat &amp;gt; /tmp/gnuplotdata.csv &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> gnuplot -p -e &lt;span class="s2">&amp;#34;set title &amp;#39;Quantum vs. Avalanche&amp;#39;;set xlabel &amp;#39;Average Length&amp;#39;;set ylabel &amp;#39;Average&amp;#39;;set datafile separator &amp;#39;,&amp;#39;;plot for [col=1:3] &amp;#39;/tmp/gnuplotdata.csv&amp;#39; using col with lines title columnheader;pause -1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>That&amp;rsquo;s &lt;em>sus&lt;/em> but why have pipes if you never use them? Anyways, we can now begin comparing convergence.&lt;/p>
&lt;h2 id="analysis">Analysis&lt;/h2>
&lt;p>&lt;img src="https://slc.is/images/quantumAvalanchePlot.webp"
loading="lazy"
alt="Gnuplot Mean Convergence Plot"
>&lt;/p>
&lt;p>This is the plot outputted by gnuplot and it looks like both RNGs converge to 0.5 at equal rates.&lt;/p>
&lt;blockquote>
&lt;p>The differing rates to randomness is deeper than approaching the mean.&lt;/p>
&lt;/blockquote>
&lt;p>I&amp;rsquo;ll now be using the &lt;a class="link" href="https://www.fourmilab.ch/random/" target="_blank" rel="noopener"
>ent&lt;/a> tool for statistical testing.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">dd &lt;span class="k">if&lt;/span>&lt;span class="o">=&lt;/span>../../randomReports/randomData &lt;span class="nv">bs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">104857601&lt;/span> &lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">8&lt;/span> &lt;span class="nv">iflag&lt;/span>&lt;span class="o">=&lt;/span>fullblock 2&amp;gt;/dev/null &lt;span class="p">|&lt;/span> ent -b
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Entropy = 1.000000 bits per bit.&lt;/p>
&lt;p>Optimum compression would reduce the size
of this 838860800 bit file by 0 percent.&lt;/p>
&lt;p>Chi square distribution for 838860800 samples is 1.41, and randomly would exceed this value 23.50 percent of the times.&lt;/p>
&lt;p>Arithmetic mean value of data bits is 0.5000 (0.5 = random).&lt;/p>
&lt;p>Monte Carlo value for Pi is 3.141312452 (error 0.01 percent).&lt;/p>
&lt;p>Serial correlation coefficient is -0.000014 (totally uncorrelated = 0.0).&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Entropy = 1.000000 bits per bit.&lt;/p>
&lt;p>Optimum compression would reduce the size
of this 838860800 bit file by 0 percent.&lt;/p>
&lt;p>Chi square distribution for 838860800 samples is 3.09, and randomly would exceed this value 7.88 percent of the times.&lt;/p>
&lt;p>Arithmetic mean value of data bits is 0.5000 (0.5 = random).&lt;/p>
&lt;p>Monte Carlo value for Pi is 3.141780515 (error 0.01 percent).&lt;/p>
&lt;p>Serial correlation coefficient is -0.000027 (totally uncorrelated = 0.0).&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>Entropy = 1.000000 bits per bit.&lt;/p>
&lt;p>Optimum compression would reduce the size
of this 838860800 bit file by 0 percent.&lt;/p>
&lt;p>Chi square distribution for 838860800 samples is 0.62, and randomly would exceed this value 43.12 percent of the times.&lt;/p>
&lt;p>Arithmetic mean value of data bits is 0.5000 (0.5 = random).&lt;/p>
&lt;p>Monte Carlo value for Pi is 3.141913953 (error 0.01 percent).&lt;/p>
&lt;p>Serial correlation coefficient is 0.000048 (totally uncorrelated = 0.0).&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>When applied to all three files, these are the results we get:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th style="text-align:center">Chi Square&lt;/th>
&lt;th style="text-align:center">Monte Carlo Difference&lt;/th>
&lt;th style="text-align:center">Serial Correlation Coefficient&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Quantum&lt;/td>
&lt;td style="text-align:center">1.41&lt;/td>
&lt;td style="text-align:center">0.000280202&lt;/td>
&lt;td style="text-align:center">-0.000014&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Avalanche Diode&lt;/td>
&lt;td style="text-align:center">3.09&lt;/td>
&lt;td style="text-align:center">-0.000187861&lt;/td>
&lt;td style="text-align:center">-0.000027&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Pseudorandom Generator&lt;/td>
&lt;td style="text-align:center">0.62&lt;/td>
&lt;td style="text-align:center">-0.000321299&lt;/td>
&lt;td style="text-align:center">0.000048&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>We know that the &lt;!-- raw HTML omitted -->PRNG&lt;!-- raw HTML omitted --> is the least random, so if there are any tests that the PRNG does best, that test can not be used.&lt;/p>
&lt;p>Unsurprisingly, the PRNG performs worst in every test. Avalanche diode outperforms quantum in Chi Square &lt;em>and&lt;/em> estimating Pi. Quantum only outperformed Avalanche diode in Serial Correlation Coefficient. Since the goal is to observe convergence of randomness, serial correlation makes the most sense to use.&lt;/p>
&lt;p>What we&amp;rsquo;ll do now is observe the serial correlation coefficients of quantum and avalanche diode as the number of trials increases.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define MAX_READ 2500
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">long&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">MAX_READ&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">analyzeFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">filename&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">filenum&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// I increased the array sizes because a memory
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// leak and I didn&amp;#39;t care to track it down
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">output&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1035&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">snprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;%s%s%s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;dd if=&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">filename&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34; bs=&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">bytes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">bytes&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">MAX_READ&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">bytes&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">byteString&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">21&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">snprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">byteString&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;%lu&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bytes&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2560&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">snprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s">&amp;#34;%s%s%s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">byteString&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34; count=8 iflag=fullblock 2&amp;gt;/dev/null | ent -b | tail &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;-1 | cut -c 35-43 | xargs&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">popen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;r&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fgets&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">filenum&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">bytes&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strtold&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">analyzeFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;../../randomReports/quantum&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">analyzeFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;../../randomReports/avalanche&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Theoretical Coefficient,Quantum Coefficient,Avalanche Diode &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Coefficient&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">line&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">MAX_READ&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;0,%Lf,%Lf&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">line&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now, much like before, we&amp;rsquo;ll pipe this output into gnuplot.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">gcc -c -o main.o main.c &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> gcc ./main.o -o main &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> ./main &lt;span class="p">|&lt;/span> cat &amp;gt; /tmp/gnuplotdata.csv &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> gnuplot -p -e &lt;span class="s2">&amp;#34;set title &amp;#39;Quantum vs. Avalanche&amp;#39;;set xlabel &amp;#39;Size (Bytes)&amp;#39;;set ylabel &amp;#39;Serial Correlation Coefficient&amp;#39;;set datafile separator &amp;#39;,&amp;#39;;plot for [col=1:3] &amp;#39;/tmp/gnuplotdata.csv&amp;#39; using col with lines title columnheader;pause -1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://slc.is/images/randomCoefficients.webp"
loading="lazy"
alt="Gnuplot Coefficient Convergence Plot"
>&lt;/p>
&lt;p>Well, this is interesting.&lt;/p>
&lt;h2 id="explanation">Explanation&lt;/h2>
&lt;p>I have a couple theories for why these two methods of &lt;!-- raw HTML omitted -->TRNG&lt;!-- raw HTML omitted --> approach correlation coefficients of 0 at different rates.&lt;/p>
&lt;ol>
&lt;li>Partial Measurements
&lt;ul>
&lt;li>In a more &lt;!-- raw HTML omitted -->complex&lt;!-- raw HTML omitted --> system, there are more opportunities to be entangled with the environment which might increase correlation between measurements.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Faulty Hardware
&lt;ul>
&lt;li>The hardware might have some issue which causes data correlation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Obviously, the first explanation is more flashy, so I&amp;rsquo;m hoping something along those lines is occurring. With the avalanche diode method, electrons will be entangled with the enclosure which is weakly entangled with everything around it. This additional entanglement could reduce the randomness of the sequence. Quantum methods of generation should, therefore, have varying rates of discorrelation based on their amounts of interaction with the environment.&lt;/p>
&lt;p>I&amp;rsquo;ll try to compare these rates with more precise avalanche diode machines and superconducting, photonic, nuclear magnetic resonance, dot, and other quantum methods.&lt;/p></description></item><item><title>Quantum versus Avalanche Breakdown Randomness</title><link>https://slc.is/archive/quantum-versus-avalanche-breakdown-randomness/</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate><guid>https://slc.is/archive/quantum-versus-avalanche-breakdown-randomness/</guid><description>&lt;img src="https://slc.is/images/onerng.webp" alt="Featured image of post Quantum versus Avalanche Breakdown Randomness" />&lt;p>Avalanche breakdown and quantum are two methods for generating true random numbers. Here, we&amp;rsquo;ll compare them for feasibility and quality. The feasibility of a &lt;!-- raw HTML omitted -->TRNG&lt;!-- raw HTML omitted --> is how many bits per second it can produce while remaining random. And that leads us into quality which will be determined according to the NIST&amp;rsquo;s &lt;a class="link" href="https://www.nist.gov/publications/statistical-test-suite-random-and-pseudorandom-number-generators-cryptographic" target="_blank" rel="noopener"
>&lt;!-- raw HTML omitted -->STS&lt;!-- raw HTML omitted -->&lt;/a>. We&amp;rsquo;ll also compare these methods against the computer&amp;rsquo;s default RNG as a baseline.&lt;/p>
&lt;p>I&amp;rsquo;m using the Arcetri Team&amp;rsquo;s &lt;a class="link" href="https://github.com/arcetri/sts" target="_blank" rel="noopener"
>implementation&lt;/a> of the STS. Building it just required running &lt;code>make&lt;/code> in the repo.&lt;/p>
&lt;p>We&amp;rsquo;ll read around 100 &lt;!-- raw HTML omitted -->MB&lt;!-- raw HTML omitted --> of random data to perform the tests on. STS defaults to measuring bitsreams of 1 megabit per iteration, so we&amp;rsquo;ll run 800 iterations (8 bits = 1 byte).&lt;/p>
&lt;p>A useful way to record the random numbers and the speed of their generation is with the &lt;a class="link" href="https://wikipedia.org/wiki/Dd_%28Unix%29" target="_blank" rel="noopener"
>&lt;code>dd&lt;/code>&lt;/a> command.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">~# dd &lt;span class="k">if&lt;/span>&lt;span class="o">=&lt;/span>/path/to/random &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">of&lt;/span>&lt;span class="o">=&lt;/span>/copy/of/random &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">bs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">104857600&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">iflag&lt;/span>&lt;span class="o">=&lt;/span>fullblock
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">104857600&lt;/span> bytes &lt;span class="o">(&lt;/span>&lt;span class="m">105&lt;/span> MB, &lt;span class="m">100&lt;/span> MiB&lt;span class="o">)&lt;/span> copied, X.X s, X B/s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>I&amp;rsquo;m also saving the data and reports under a &lt;code>reports&lt;/code> directory — so, create that if you need.&lt;/p>
&lt;/blockquote>
&lt;h2 id="baseline">Baseline&lt;/h2>
&lt;p>Reading from &lt;a class="link" href="https://linuxhint.com/dev_random_vs_dev_urandom/" target="_blank" rel="noopener"
>random or urandom&lt;/a> seems to be a surprisingly controversial subject, but the only nearly-standard difference I found was that &lt;code>urandom&lt;/code> (which stands for unblocked random) won&amp;rsquo;t block read access when there isn&amp;rsquo;t enough randomness while &lt;code>random&lt;/code> will. I&amp;rsquo;m only looking at the best each method has to offer, so I&amp;rsquo;ll be accessing &lt;code>/dev/random&lt;/code> for this data.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">~# dd &lt;span class="k">if&lt;/span>&lt;span class="o">=&lt;/span>/dev/random &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">of&lt;/span>&lt;span class="o">=&lt;/span>reports/random &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">bs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">104857600&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">iflag&lt;/span>&lt;span class="o">=&lt;/span>fullblock
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">104857600&lt;/span> bytes &lt;span class="o">(&lt;/span>&lt;span class="m">105&lt;/span> MB, &lt;span class="m">100&lt;/span> MiB&lt;span class="o">)&lt;/span> copied, 0.637875 s, &lt;span class="m">164&lt;/span> MB/s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~# ./sts -v &lt;span class="m">1&lt;/span> -i &lt;span class="m">800&lt;/span> -w reports/ -F r reports/random
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Testing data from file: reports/random
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of init phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of init phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of iterate phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of iterate phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of assess phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of assess phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of destroy phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of destroy phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Execution completed!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Check the random.txt file &lt;span class="k">for&lt;/span> the results
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The collapsed details above summarize how many STS random tests the data passed. Running these tests on different data will change the results; however, we&amp;rsquo;re testing 800 iterations of $2^{20}=1,048,576$ bits, so the results are statistically significant.&lt;/p>
&lt;p>This report is included in the zip linked in the conclusion along with the data used to derive the score.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>A total of 188 tests (some of the 15 tests actually consist of multiple sub-tests) were conducted to evaluate the randomness of 800 bitstreams of 1048576 bits from:&lt;/p>
&lt;pre>&lt;code>reports/random
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>The numerous empirical results of these tests were then interpreted with an examination of the proportion of sequences that pass a statistical test (proportion analysis) and the distribution of p-values to check for uniformity (uniformity analysis). The results were the following:&lt;/p>
&lt;pre>&lt;code>187/188 tests passed successfully both the analyses.
1/188 tests did not pass successfully both the analyses.
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>Here are the results of the single tests:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The &amp;ldquo;Frequency&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Block Frequency&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Cumulative Sums&amp;rdquo; (forward) test passed both the analyses.
The &amp;ldquo;Cumulative Sums&amp;rdquo; (backward) test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Runs&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Longest Run of Ones&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Binary Matrix Rank&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Discrete Fourier Transform&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>147/148 of the &amp;ldquo;Non-overlapping Template Matching&amp;rdquo; tests passed both the analyses.
1/148 of the &amp;ldquo;Non-overlapping Template Matching&amp;rdquo; tests FAILED the proportion analysis.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Overlapping Template Matching&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Maurer&amp;rsquo;s Universal Statistical&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Approximate Entropy&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>8/8 of the &amp;ldquo;Random Excursions&amp;rdquo; tests passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>18/18 of the &amp;ldquo;Random Excursions Variant&amp;rdquo; tests passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Serial&amp;rdquo; (first) test passed both the analyses.
The &amp;ldquo;Serial&amp;rdquo; (second) test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Linear Complexity&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;p>To begin our comparison, we&amp;rsquo;ll evaluate avalanche breakdown.&lt;/p>
&lt;h2 id="avalanche-breakdown">Avalanche Breakdown&lt;/h2>
&lt;p>This step is unique since we need to initialize the avalanche device to be read as a bitstream on &lt;!-- raw HTML omitted -->*nix&lt;!-- raw HTML omitted -->.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">~# dmesg &lt;span class="p">|&lt;/span> grep cdc_acm&lt;span class="se">\ &lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="p">|&lt;/span> tail -1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cdc_acm 1-2.3.2.4.2.4:1.0: ttyACM0: USB ACM device
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~# stty raw -echo &amp;lt;/dev/ttyACM0 &lt;span class="c1"># put the tty device into raw mode&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~# &lt;span class="nb">echo&lt;/span> cmd0 &amp;gt;/dev/ttyACM0 &lt;span class="c1"># put the device into the avalanche/whitening mode&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~# &lt;span class="nb">echo&lt;/span> cmdO &amp;gt;/dev/ttyACM0 &lt;span class="c1"># turn on the feed to the USB&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Running the command below should dim the &lt;!-- raw HTML omitted -->LED&lt;!-- raw HTML omitted -->, indicating a loss in entropy.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">~# dd &lt;span class="k">if&lt;/span>&lt;span class="o">=&lt;/span>/dev/ttyACM0 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">of&lt;/span>&lt;span class="o">=&lt;/span>reports/avalanche &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">bs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">104857600&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">iflag&lt;/span>&lt;span class="o">=&lt;/span>fullblock
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">104857600&lt;/span> bytes &lt;span class="o">(&lt;/span>&lt;span class="m">105&lt;/span> MB, &lt;span class="m">100&lt;/span> MiB&lt;span class="o">)&lt;/span> copied, 1829.86 s, 57.3 kB/s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~# ./sts -v &lt;span class="m">1&lt;/span> -i &lt;span class="m">800&lt;/span> -w reports/ -F r reports/avalanche
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Testing data from file: reports/avalanche
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of init phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of init phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of iterate phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of iterate phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of assess phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of assess phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of destroy phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of destroy phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Execution completed!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Check the avalanche.txt file &lt;span class="k">for&lt;/span> the results
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>A total of 188 tests (some of the 15 tests actually consist of multiple sub-tests) were conducted to evaluate the randomness of 800 bitstreams of 1048576 bits from:&lt;/p>
&lt;pre>&lt;code>reports/avalanche
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>The numerous empirical results of these tests were then interpreted with an examination of the proportion of sequences that pass a statistical test (proportion analysis) and the distribution of p-values to check for uniformity (uniformity analysis). The results were the following:&lt;/p>
&lt;pre>&lt;code>183/188 tests passed successfully both the analyses.
5/188 tests did not pass successfully both the analyses.
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>Here are the results of the single tests:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The &amp;ldquo;Frequency&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Block Frequency&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Cumulative Sums&amp;rdquo; (forward) test passed both the analyses.
The &amp;ldquo;Cumulative Sums&amp;rdquo; (backward) test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Runs&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Longest Run of Ones&amp;rdquo; test FAILED both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Binary Matrix Rank&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Discrete Fourier Transform&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>146/148 of the &amp;ldquo;Non-overlapping Template Matching&amp;rdquo; tests passed both the analyses.
2/148 of the &amp;ldquo;Non-overlapping Template Matching&amp;rdquo; tests FAILED both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Overlapping Template Matching&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Maurer&amp;rsquo;s Universal Statistical&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Approximate Entropy&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>8/8 of the &amp;ldquo;Random Excursions&amp;rdquo; tests passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>18/18 of the &amp;ldquo;Random Excursions Variant&amp;rdquo; tests passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Serial&amp;rdquo; (first) test FAILED both the analyses.
The &amp;ldquo;Serial&amp;rdquo; (second) test FAILED both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Linear Complexity&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="quantum-computer">Quantum Computer&lt;/h2>
&lt;p>You can either collect your own quantum data or download dumps from &lt;a class="link" href="https://cloudstor.aarnet.edu.au/plus/s/9Ik6roa7ACFyWL4" target="_blank" rel="noopener"
>ANU&lt;/a>. For any reasonable length, just download a pre-collected dump which the bash code will help with.&lt;/p>
&lt;h3 id="code-to-collect-data">Code to Collect Data&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">requests&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">get&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">tqdm&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">trange&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">os&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">path&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;reports/quantum&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;ab&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">trange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">2e6&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getsize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bin_str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://qrng.anu.edu.au/wp-content/plugins/colours-plugin/get_one_binary.php&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">text&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bin_str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">byteorder&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;big&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">~# &lt;span class="c1"># download 100 MB of quantum data from ANU&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~# curl -o reports/.quantum &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="s2">&amp;#34;https://cloudstor.aarnet.edu.au/plus/s/9Ik6roa7ACFyWL4/download?path=%2FANU_23Oct2017_5000MB&amp;amp;files=ANU_23Oct2017_100MB_1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> % Total % Received % Xferd Average Speed Time Time Time Current
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Dload Upload Total Spent Left Speed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">100&lt;/span> 100M &lt;span class="m">100&lt;/span> 100M &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> 5587k &lt;span class="m">0&lt;/span> 0:00:18 0:00:18 --:--:-- 6108k
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~# ./sts -v &lt;span class="m">1&lt;/span> -i &lt;span class="m">800&lt;/span> -w ./reports/ -F r reports/quantum
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Testing data from file: reports/quantum
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of init phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of init phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of iterate phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of iterate phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of assess phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of assess phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start of destroy phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">End of destroy phase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Execution completed!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Check the quantum.txt file &lt;span class="k">for&lt;/span> the results
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>A total of 188 tests (some of the 15 tests actually consist of multiple sub-tests) were conducted to evaluate the randomness of 800 bitstreams of 1048576 bits from:&lt;/p>
&lt;pre>&lt;code>reports/quantum
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>The numerous empirical results of these tests were then interpreted with an examination of the proportion of sequences that pass a statistical test (proportion analysis) and the distribution of p-values to check for uniformity (uniformity analysis). The results were the following:&lt;/p>
&lt;pre>&lt;code>188/188 tests passed successfully both the analyses.
0/188 tests did not pass successfully both the analyses.
&lt;/code>&lt;/pre>
&lt;hr>
&lt;p>Here are the results of the single tests:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The &amp;ldquo;Frequency&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Block Frequency&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Cumulative Sums&amp;rdquo; (forward) test passed both the analyses.
The &amp;ldquo;Cumulative Sums&amp;rdquo; (backward) test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Runs&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Longest Run of Ones&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Binary Matrix Rank&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Discrete Fourier Transform&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>148/148 of the &amp;ldquo;Non-overlapping Template Matching&amp;rdquo; tests passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Overlapping Template Matching&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Maurer&amp;rsquo;s Universal Statistical&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Approximate Entropy&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>8/8 of the &amp;ldquo;Random Excursions&amp;rdquo; tests passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>18/18 of the &amp;ldquo;Random Excursions Variant&amp;rdquo; tests passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Serial&amp;rdquo; (first) test passed both the analyses.
The &amp;ldquo;Serial&amp;rdquo; (second) test passed both the analyses.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &amp;ldquo;Linear Complexity&amp;rdquo; test passed both the analyses.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Here&amp;rsquo;s a summary of results.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th style="text-align:center">Randomness&lt;/th>
&lt;th style="text-align:center">Speed&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Random&lt;/td>
&lt;td style="text-align:center">187/188&lt;/td>
&lt;td style="text-align:center">164 MB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Avalanche&lt;/td>
&lt;td style="text-align:center">183/188&lt;/td>
&lt;td style="text-align:center">57.3 kB/s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Quantum&lt;/td>
&lt;td style="text-align:center">188/188&lt;/td>
&lt;td style="text-align:center">&lt;a class="link" href="https://qrng.anu.edu.au/contact/faq/" target="_blank" rel="noopener"
>5.7 Gb/s&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The built-in random entropy is the most common source of random numbers, and is almost perfectly statistically random. Obviously, the computer is not truly random, but the &lt;a class="link" href="https://unix.stackexchange.com/a/324210" target="_blank" rel="noopener"
>algorithms used&lt;/a> are made to score highly on these tests. For fast and affordable random numbers, built-in generators are the way to go, especially since they&amp;rsquo;re constantly seeded with conditions surrounding the machine.&lt;/p>
&lt;p>Avalanche diode breakdown has by far the slowest generation speed but boasts true random number generation. Interestingly, this generation scored the lowest in both randomness and speed, so the primary use-case for avalanche breakdown would be seeding the computer&amp;rsquo;s built-in &lt;code>random&lt;/code>. In that way, the computer will take entropy from the diode without depleting it and offering fast generation. When generating SSL certificates and private keys in general for websites, SSH, or even &lt;!-- raw HTML omitted -->crypto&lt;!-- raw HTML omitted --> wallets, the risk of using pseudo-random numbers is too high, in my opinion. If what you&amp;rsquo;re working on isn&amp;rsquo;t worth ~$40.00, then use &lt;code>random&lt;/code>, but if it&amp;rsquo;s worth more than that, invest in a avalanche breakdown device. I spent $40.00 and picked up the &lt;a class="link" href="https://onerng.info/" target="_blank" rel="noopener"
>OneRNG V3&lt;/a> pictured above.&lt;/p>
&lt;p>Quantum random numbers are blisteringly fast and truly random. This will most likely be a huge use-case for quantum in the future. As crypto becomes more widespread on the internet, I&amp;rsquo;m sure companies or individuals will want true randomness for generating their keys. As of right now, though, they&amp;rsquo;re simply too expensive to buy.&lt;/p>
&lt;p>The best option for securely generating random numbers is to seed the computer&amp;rsquo;s entropy with a source of true randomness. If this is something you were considering, know that despite the high 187 score that &lt;code>random&lt;/code> achieved, it is not truly random, meaning the numbers will always be the same if the initial conditions are replicated. Depending on your use-case, that might be fine. For example, running a Monte Carlo simulation or initializing random weights to a neural network. But if you&amp;rsquo;re working with sensitive information, a true source of random numbers, even just as a seed to the machine, is always safer.&lt;/p>
&lt;p>If you&amp;rsquo;d like to confirm these results, you can &lt;a class="link" href="https://slc.is/data/randomReports.zip" >download&lt;/a> the random data and reports for each respective binary blob. As expected for random data, zip couldn&amp;rsquo;t compress the three 100 MB files, so it is over 300 MB! Sadly I can&amp;rsquo;t upload that to GitHub, so I&amp;rsquo;m uploading a 100 MB version instead. If you&amp;rsquo;d &lt;em>really&lt;/em> like the 300 MB version, email me and I&amp;rsquo;ll send it over.&lt;/p>
&lt;p>Based on the results from the smaller sample, it seems that the &lt;a class="link" href="https://wikipedia.org/wiki/Law_of_large_numbers" target="_blank" rel="noopener"
>Law of Large Numbers&lt;/a> applies most to avalanche diode breakdown and least to the built-in pseudo-random number generator. Quantum in somewhere in the middle. This is only from a few tests though, so it&amp;rsquo;s by no means as significant as the results from 800 tests.&lt;/p></description></item><item><title>Custom Gates in Qiskit with Pulse</title><link>https://slc.is/archive/custom-gates-in-qiskit-with-pulse/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><guid>https://slc.is/archive/custom-gates-in-qiskit-with-pulse/</guid><description>&lt;img src="https://slc.is/images/pulseVisual3.webp" alt="Featured image of post Custom Gates in Qiskit with Pulse" />&lt;p>Quantum research often requires applying operations in novel ways; however, it&amp;rsquo;s occasionally necessary to create gates to reduce circuit length. If too many operations are applied to a qubit, the quantum state is lost and no valuable insight can be gained. The quantum compiler can optimize these steps, but having the ability to create custom microwave pulses to apply to qubits is valuable.&lt;/p>
&lt;p>In this quick tutorial, we will compose a Hadamard pulse and apply it to a qubit through a circuit using Qiskit. That&amp;rsquo;s quite a mouthful, but it&amp;rsquo;s a lot nicer than it seems.&lt;/p>
&lt;h2 id="imports">Imports&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">qiskit&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Aer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">assemble&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pulse&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">QuantumCircuit&lt;/span>&lt;span class="p">,&lt;/span>\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">schedule&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">transpile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">qiskit.circuit&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Gate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">qiskit.providers.aer&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">PulseSimulator&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">qiskit.providers.aer.pulse&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">PulseSystemModel&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">qiskit.test&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">mock&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">qiskit.pulse.library&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Gaussian&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">qiskit.visualization&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">plot_histogram&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">qiskit.visualization.pulse_v2&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">draw&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">qiskit.tools.jupyter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># fake quantum computer we&amp;#39;re using&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">backend&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">FakeArmonk&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We need to import the necessary Qiskit modules, but one thing to note is the mock backend we&amp;rsquo;re using. From &lt;code>qiskit.test&lt;/code> we import &lt;code>mock&lt;/code> and use its fake Armonk backend. This is a fake quantum computer that will simulate our code. Armonk also supports Qiskit Pulse and pulse simulations which we need. Waiting to run pulses on hardware can take a long time, so having a simulator is extremely helpful when prototyping quantum gates.&lt;/p>
&lt;p>To begin our custom gate, we need to define a non-calibrated gate that we will later calibrate with a custom microwave pulse.&lt;/p>
&lt;h3 id="create-a-custom-gate">Create a custom gate&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">gate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Gate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;hadamard&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;H&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num_qubits&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We created a gate that will apply a pulse to one qubit. But the gate doesn&amp;rsquo;t have a pulse yet. Let&amp;rsquo;s fix that!&lt;/p>
&lt;h3 id="build-pulse-for-custom-gate">Build pulse for custom gate&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># create a microwave pulse with a gaussian curve&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">with&lt;/span> &lt;span class="n">pulse&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">backend&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;hadamard&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">gate_pulse&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># custom pulse for this demo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">microwave&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Gaussian&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">duration&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">310&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">amp&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mf">.36&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sigma&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">80&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pulse&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">play&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">microwave&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pulse&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">drive_channel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">gate_pulse&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">draw&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://slc.is/images/pulseVisual1.webp"
loading="lazy"
alt="Hadamard Gaussian"
>&lt;/p>
&lt;p>Most waves can be parameterized by a gaussian shape in quantum computing. In Qiskit Pulse, we simply define the shape of the curve and set that microwave to a variable &lt;code>gate_pulse&lt;/code>. This pulse can be changed in both shape and parameters. Qiskit also offers non-gaussian curves that can be used, though gaussian is most commonly seen.&lt;/p>
&lt;p>The next step is to attach this microwave pulse to the custom gate we initialized.&lt;/p>
&lt;h3 id="use-custom-gate">Use custom gate&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">qc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">QuantumCircuit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># append the custom gate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">qc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">qc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">measure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># define pulse of quantum gate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">qc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_calibration&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;hadamard&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">gate_pulse&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">qc&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">draw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;mpl&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We can treat the gate normally when building circuits, but adding the pulse is different. Qiskit uses &lt;code>add_calibration&lt;/code> to apply a custom pulse to a specific gate.&lt;/p>
&lt;p>&lt;img src="https://slc.is/images/pulseVisual2.webp"
loading="lazy"
alt="Gate Circuit"
>&lt;/p>
&lt;p>We&amp;rsquo;re now using a custom gate in a circuit, but let&amp;rsquo;s confirm that this circuit is &lt;em>actually&lt;/em> applying the pulse we specified.&lt;/p>
&lt;p>We can use Qiskit Pulse to transpile the circuit to pulses that would be directly run on the quantum computers.&lt;/p>
&lt;h2 id="convert-the-circuit-back-to-a-pulse">Convert the circuit back to a pulse&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># unnecessary with calibrated gates&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">qc_t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">transpile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">qc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">backend&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">qc_pulse&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">schedule&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">qc_t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">backend&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">draw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">qc_pulse&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">backend&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">backend&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://slc.is/images/pulseVisual3.webp"
loading="lazy"
alt="Circuit Pulses"
>&lt;/p>
&lt;p>If you compare the microwave we defined above to this, you can see that it is indeed the same. Our circuit is now using a custom Hadamard gate! But let&amp;rsquo;s not be too quick to celebrate.&lt;/p>
&lt;p>Let&amp;rsquo;s run one final test to see how the simulator handles custom pulses.&lt;/p>
&lt;h2 id="execute-circuit">Execute Circuit&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># create a pulse simulator and model&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">backend_sim&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">PulseSimulator&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">system_model&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">PulseSystemModel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">from_backend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">backend&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># prepare the pulse job&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pulse_qobj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">assemble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">qc_pulse&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">backend&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">backend_sim&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># run the job on the backend&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sim_result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">backend_sim&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pulse_qobj&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This method of simulating circuits is different from most tutorials you&amp;rsquo;ll find. Since we&amp;rsquo;re using a custom pulse, our simulator needs to be able to handle that. We use the &lt;code>PulseSimulator&lt;/code> to handle this kind of circuit. I believe it&amp;rsquo;s due to the normal simulator using matrices while this needs to handle microwaves, but I&amp;rsquo;m not sure.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># plot circuit output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">plot_histogram&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sim_result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_counts&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://slc.is/images/pulseVisual4.webp"
loading="lazy"
alt="Measurement Histogram"
>&lt;/p>
&lt;p>Success! As expected, the qubit is in a superposition between $\ket{0}$ and $\ket{1}$. The near 50-50 distribution supports that… but what happens when you apply two of these pulses in succession? We&amp;rsquo;ll tackle that at a later time, but if you want a head-start, check out the &lt;a class="link" href="https://qiskit.org/textbook/ch-quantum-hardware/calibrating-qubits-pulse.html" target="_blank" rel="noopener"
>Rabi experiment&lt;/a>. 😵‍💫&lt;/p>
&lt;h3 id="version-information">Version Information&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Qiskit Software&lt;/th>
&lt;th style="text-align:right">Version&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>qiskit-terra&lt;/td>
&lt;td style="text-align:right">0.19.1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>qiskit-aer&lt;/td>
&lt;td style="text-align:right">0.9.1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>qiskit-ignis&lt;/td>
&lt;td style="text-align:right">0.7.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>qiskit-ibmq-provider&lt;/td>
&lt;td style="text-align:right">0.18.2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>qiskit&lt;/td>
&lt;td style="text-align:right">0.33.1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Quantum Physics I</title><link>https://slc.is/archive/quantum-physics-i/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><guid>https://slc.is/archive/quantum-physics-i/</guid><description>&lt;img src="https://slc.is/images/ocw1.webp" alt="Featured image of post Quantum Physics I" />&lt;p>I began learning quantum mechanics with Professor Allan Adams on &lt;a class="link" href="https://ocw.mit.edu/8-04S13" target="_blank" rel="noopener"
>MIT OpenCourseWare&lt;/a>! This will be an ongoing post about interesting things I learn, as a way to share a computer scientist&amp;rsquo;s perspective on quantum physics as well as to hold myself accountable in finishing the course.&lt;/p>
&lt;blockquote>
&lt;p>The miracle is not that electrons behave oddly. The miracle is that when you take $10^{26}$ electrons, they behave like cheese! 🧀&lt;/p>
&lt;/blockquote>
&lt;p>The first lecture taught me something fundamental about the term &lt;em>superposition&lt;/em>. As I used quantum computers, I thought about the &lt;!-- raw HTML omitted -->qubit&lt;!-- raw HTML omitted -->s as being both 0 and 1 while in superposition; however, this is &lt;strong>false&lt;/strong>. The qubit is in no meaningful state: not 0, not 1, not both, and not neither.&lt;/p>
&lt;p>In the second lecture, this idea of superposition is again reiterated by the famous double-slit experiment, where an electron neither passes through the top nor bottom slits, neither both nor no slits. Contuining to experimentally demonstrate quantum properties, Professor Adams then proved &lt;a class="link" href="https://https://wikipedia.org/wiki/Bell%27s_theorem" target="_blank" rel="noopener"
>Bell&amp;rsquo;s Inequality&lt;/a> very simply as $P(a \cup \overline{b}) + P(b \cup \overline{c}) \geq P(a \cup \overline{c})$. Perhaps unsurprisingly at this point, electrons&amp;rsquo; angular momenta in the &lt;em>x&lt;/em>, &lt;em>y&lt;/em>, and &lt;em>z&lt;/em> axes, which are either up or down, do not abide by Bell&amp;rsquo;s Inequality. However, this &lt;strong>is&lt;/strong> very surprising, because simple logic and integers must be flawed at a fundamental sense to not accurately describe quantum properties.&lt;/p>
&lt;p>&lt;img src="https://slc.is/images/ocw2.webp"
loading="lazy"
alt="OCW"
>&lt;/p>
&lt;p>I&amp;rsquo;m tempted to take a &lt;a class="link" href="https://online.stanford.edu/courses/soe-yeeqmse01-quantum-mechanics-scientists-and-engineers" target="_blank" rel="noopener"
>course&lt;/a> now, because doing problem sets for a course designed to be taken in-person is tedious. I also want a certificate😮‍💨. If the OpenCourseWare site is down, click &lt;!-- raw HTML omitted -->here&lt;!-- raw HTML omitted --> to download the lecture materials.&lt;/p></description></item><item><title>Summer of Quantum</title><link>https://slc.is/archive/summer-of-quantum/</link><pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate><guid>https://slc.is/archive/summer-of-quantum/</guid><description>&lt;img src="https://slc.is/images/quantumSummer.webp" alt="Featured image of post Summer of Quantum" />&lt;p>This summer will be affectionately known as the Quantum Summer.&lt;/p>
&lt;p>Because of a scheduling mishap, I found myself teaching three quantum courses at once:&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="https://www.bnl.gov/quantumcenter/" target="_blank" rel="noopener"
>Brookhaven National Laboratory&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://qiskit.org/events/summer-school/" target="_blank" rel="noopener"
>Qiskit Global Summer School&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.qmunity.tech/qubes-camp" target="_blank" rel="noopener"
>QuBes Camp&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>This situation pushed me to balance responsibilities and make tons of quantum resources. As a result, I became inspired to buy &lt;a class="link" href="https://www.quantumforay.com" target="_blank" rel="noopener"
>www.quantumforay.com&lt;/a>; a fun play on quantum fourier.&lt;/p>
&lt;p>Now, equipped with the QF website, I am inspired to make an amazing quantum curriculum from determining what worked best at the three quantum schools. I will include Google Forms as graded quizzes and cover the most essential information with additional resources linked below.&lt;/p></description></item><item><title>Quantum Tales</title><link>https://slc.is/archive/quantum-tales/</link><pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate><guid>https://slc.is/archive/quantum-tales/</guid><description>&lt;img src="https://slc.is/images/quantumTales.webp" alt="Featured image of post Quantum Tales" />&lt;p>Shortly after becoming an IBM Qiskit Advocate, I was introduced to the Unitary Fund. After writing a &lt;a class="link" href="https://link.medium.com/y1zFy6ThYhb" target="_blank" rel="noopener"
>story&lt;/a> where the reader uses Shor&amp;rsquo;s algorithm to decrypt a stock listing, I wanted to create more stories teaching quantum algorithms.&lt;/p>
&lt;p>With the help of the &lt;a class="link" href="https://unitary.fund" target="_blank" rel="noopener"
>Unitary Fund&lt;/a>, I was able to realize this dream. I created a series of stories that teach various quantum algorithms. The stories are all rooted in classic fairy tales from around the world, except the protagonist now employees their quantum prowess to succeed.&lt;/p>
&lt;p>This project is ongoing and will hopefully cover a wide range of algorithms and tales alike. The &lt;a class="link" href="https://quantumtales.org" target="_blank" rel="noopener"
>QuantumTales&lt;/a> site will have the most up-to-date information as well as previews. The &lt;a class="link" href="https://github.com/splch/quantum-tales/" target="_blank" rel="noopener"
>GitHub repository&lt;/a> is the second place to look for code and additional information.&lt;/p></description></item></channel></rss>